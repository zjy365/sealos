
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model OauthProvider
 * 
 */
export type OauthProvider = $Result.DefaultSelection<Prisma.$OauthProviderPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model AccountTransaction
 * 
 */
export type AccountTransaction = $Result.DefaultSelection<Prisma.$AccountTransactionPayload>
/**
 * Model ErrorPaymentCreate
 * 
 */
export type ErrorPaymentCreate = $Result.DefaultSelection<Prisma.$ErrorPaymentCreatePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model InviteReward
 * 
 */
export type InviteReward = $Result.DefaultSelection<Prisma.$InviteRewardPayload>
/**
 * Model UserSemChannel
 * 
 */
export type UserSemChannel = $Result.DefaultSelection<Prisma.$UserSemChannelPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model UserTask
 * 
 */
export type UserTask = $Result.DefaultSelection<Prisma.$UserTaskPayload>
/**
 * Model CardInfo
 * 
 */
export type CardInfo = $Result.DefaultSelection<Prisma.$CardInfoPayload>
/**
 * Model Credits
 * 
 */
export type Credits = $Result.DefaultSelection<Prisma.$CreditsPayload>
/**
 * Model InvoicePayment
 * 
 */
export type InvoicePayment = $Result.DefaultSelection<Prisma.$InvoicePaymentPayload>
/**
 * Model PaymentOrder
 * 
 */
export type PaymentOrder = $Result.DefaultSelection<Prisma.$PaymentOrderPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model SubscriptionPlan
 * 
 */
export type SubscriptionPlan = $Result.DefaultSelection<Prisma.$SubscriptionPlanPayload>
/**
 * Model UserInfo
 * 
 */
export type UserInfo = $Result.DefaultSelection<Prisma.$UserInfoPayload>
/**
 * Model WorkspaceUsage
 * 
 */
export type WorkspaceUsage = $Result.DefaultSelection<Prisma.$WorkspaceUsagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ProviderType: {
  PHONE: 'PHONE',
  GITHUB: 'GITHUB',
  WECHAT: 'WECHAT',
  GOOGLE: 'GOOGLE',
  PASSWORD: 'PASSWORD',
  OAUTH2: 'OAUTH2',
  EMAIL: 'EMAIL'
};

export type ProviderType = (typeof ProviderType)[keyof typeof ProviderType]


export const UserStatus: {
  NORMAL_USER: 'NORMAL_USER',
  LOCK_USER: 'LOCK_USER',
  DELETE_USER: 'DELETE_USER'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const TaskType: {
  LAUNCHPAD: 'LAUNCHPAD',
  COSTCENTER: 'COSTCENTER',
  DATABASE: 'DATABASE',
  DESKTOP: 'DESKTOP',
  APPSTORE: 'APPSTORE',
  CRONJOB: 'CRONJOB',
  DEVBOX: 'DEVBOX',
  CONTACT: 'CONTACT',
  REAL_NAME_AUTH: 'REAL_NAME_AUTH'
};

export type TaskType = (typeof TaskType)[keyof typeof TaskType]


export const TaskStatus: {
  NOT_COMPLETED: 'NOT_COMPLETED',
  COMPLETED: 'COMPLETED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]

}

export type ProviderType = $Enums.ProviderType

export const ProviderType: typeof $Enums.ProviderType

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type TaskType = $Enums.TaskType

export const TaskType: typeof $Enums.TaskType

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more OauthProviders
 * const oauthProviders = await prisma.oauthProvider.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more OauthProviders
   * const oauthProviders = await prisma.oauthProvider.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.oauthProvider`: Exposes CRUD operations for the **OauthProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OauthProviders
    * const oauthProviders = await prisma.oauthProvider.findMany()
    * ```
    */
  get oauthProvider(): Prisma.OauthProviderDelegate<ExtArgs>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.accountTransaction`: Exposes CRUD operations for the **AccountTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountTransactions
    * const accountTransactions = await prisma.accountTransaction.findMany()
    * ```
    */
  get accountTransaction(): Prisma.AccountTransactionDelegate<ExtArgs>;

  /**
   * `prisma.errorPaymentCreate`: Exposes CRUD operations for the **ErrorPaymentCreate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ErrorPaymentCreates
    * const errorPaymentCreates = await prisma.errorPaymentCreate.findMany()
    * ```
    */
  get errorPaymentCreate(): Prisma.ErrorPaymentCreateDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.inviteReward`: Exposes CRUD operations for the **InviteReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InviteRewards
    * const inviteRewards = await prisma.inviteReward.findMany()
    * ```
    */
  get inviteReward(): Prisma.InviteRewardDelegate<ExtArgs>;

  /**
   * `prisma.userSemChannel`: Exposes CRUD operations for the **UserSemChannel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSemChannels
    * const userSemChannels = await prisma.userSemChannel.findMany()
    * ```
    */
  get userSemChannel(): Prisma.UserSemChannelDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.userTask`: Exposes CRUD operations for the **UserTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTasks
    * const userTasks = await prisma.userTask.findMany()
    * ```
    */
  get userTask(): Prisma.UserTaskDelegate<ExtArgs>;

  /**
   * `prisma.cardInfo`: Exposes CRUD operations for the **CardInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardInfos
    * const cardInfos = await prisma.cardInfo.findMany()
    * ```
    */
  get cardInfo(): Prisma.CardInfoDelegate<ExtArgs>;

  /**
   * `prisma.credits`: Exposes CRUD operations for the **Credits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credits
    * const credits = await prisma.credits.findMany()
    * ```
    */
  get credits(): Prisma.CreditsDelegate<ExtArgs>;

  /**
   * `prisma.invoicePayment`: Exposes CRUD operations for the **InvoicePayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoicePayments
    * const invoicePayments = await prisma.invoicePayment.findMany()
    * ```
    */
  get invoicePayment(): Prisma.InvoicePaymentDelegate<ExtArgs>;

  /**
   * `prisma.paymentOrder`: Exposes CRUD operations for the **PaymentOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentOrders
    * const paymentOrders = await prisma.paymentOrder.findMany()
    * ```
    */
  get paymentOrder(): Prisma.PaymentOrderDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.subscriptionPlan`: Exposes CRUD operations for the **SubscriptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPlans
    * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
    * ```
    */
  get subscriptionPlan(): Prisma.SubscriptionPlanDelegate<ExtArgs>;

  /**
   * `prisma.userInfo`: Exposes CRUD operations for the **UserInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInfos
    * const userInfos = await prisma.userInfo.findMany()
    * ```
    */
  get userInfo(): Prisma.UserInfoDelegate<ExtArgs>;

  /**
   * `prisma.workspaceUsage`: Exposes CRUD operations for the **WorkspaceUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceUsages
    * const workspaceUsages = await prisma.workspaceUsage.findMany()
    * ```
    */
  get workspaceUsage(): Prisma.WorkspaceUsageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    OauthProvider: 'OauthProvider',
    Region: 'Region',
    Account: 'Account',
    AccountTransaction: 'AccountTransaction',
    ErrorPaymentCreate: 'ErrorPaymentCreate',
    Payment: 'Payment',
    User: 'User',
    InviteReward: 'InviteReward',
    UserSemChannel: 'UserSemChannel',
    Task: 'Task',
    UserTask: 'UserTask',
    CardInfo: 'CardInfo',
    Credits: 'Credits',
    InvoicePayment: 'InvoicePayment',
    PaymentOrder: 'PaymentOrder',
    Subscription: 'Subscription',
    SubscriptionPlan: 'SubscriptionPlan',
    UserInfo: 'UserInfo',
    WorkspaceUsage: 'WorkspaceUsage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'oauthProvider' | 'region' | 'account' | 'accountTransaction' | 'errorPaymentCreate' | 'payment' | 'user' | 'inviteReward' | 'userSemChannel' | 'task' | 'userTask' | 'cardInfo' | 'credits' | 'invoicePayment' | 'paymentOrder' | 'subscription' | 'subscriptionPlan' | 'userInfo' | 'workspaceUsage'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      OauthProvider: {
        payload: Prisma.$OauthProviderPayload<ExtArgs>
        fields: Prisma.OauthProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OauthProviderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OauthProviderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          findFirst: {
            args: Prisma.OauthProviderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OauthProviderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          findMany: {
            args: Prisma.OauthProviderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>[]
          }
          create: {
            args: Prisma.OauthProviderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          createMany: {
            args: Prisma.OauthProviderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OauthProviderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          update: {
            args: Prisma.OauthProviderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          deleteMany: {
            args: Prisma.OauthProviderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OauthProviderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OauthProviderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OauthProviderPayload>
          }
          aggregate: {
            args: Prisma.OauthProviderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOauthProvider>
          }
          groupBy: {
            args: Prisma.OauthProviderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OauthProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OauthProviderCountArgs<ExtArgs>,
            result: $Utils.Optional<OauthProviderCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>,
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      AccountTransaction: {
        payload: Prisma.$AccountTransactionPayload<ExtArgs>
        fields: Prisma.AccountTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountTransactionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountTransactionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          findFirst: {
            args: Prisma.AccountTransactionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountTransactionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          findMany: {
            args: Prisma.AccountTransactionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>[]
          }
          create: {
            args: Prisma.AccountTransactionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          createMany: {
            args: Prisma.AccountTransactionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountTransactionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          update: {
            args: Prisma.AccountTransactionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          deleteMany: {
            args: Prisma.AccountTransactionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountTransactionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountTransactionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountTransactionPayload>
          }
          aggregate: {
            args: Prisma.AccountTransactionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccountTransaction>
          }
          groupBy: {
            args: Prisma.AccountTransactionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountTransactionCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountTransactionCountAggregateOutputType> | number
          }
        }
      }
      ErrorPaymentCreate: {
        payload: Prisma.$ErrorPaymentCreatePayload<ExtArgs>
        fields: Prisma.ErrorPaymentCreateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ErrorPaymentCreateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ErrorPaymentCreateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          findFirst: {
            args: Prisma.ErrorPaymentCreateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ErrorPaymentCreateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          findMany: {
            args: Prisma.ErrorPaymentCreateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>[]
          }
          create: {
            args: Prisma.ErrorPaymentCreateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          createMany: {
            args: Prisma.ErrorPaymentCreateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ErrorPaymentCreateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          update: {
            args: Prisma.ErrorPaymentCreateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          deleteMany: {
            args: Prisma.ErrorPaymentCreateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ErrorPaymentCreateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ErrorPaymentCreateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ErrorPaymentCreatePayload>
          }
          aggregate: {
            args: Prisma.ErrorPaymentCreateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateErrorPaymentCreate>
          }
          groupBy: {
            args: Prisma.ErrorPaymentCreateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ErrorPaymentCreateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ErrorPaymentCreateCountArgs<ExtArgs>,
            result: $Utils.Optional<ErrorPaymentCreateCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      InviteReward: {
        payload: Prisma.$InviteRewardPayload<ExtArgs>
        fields: Prisma.InviteRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InviteRewardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InviteRewardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          findFirst: {
            args: Prisma.InviteRewardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InviteRewardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          findMany: {
            args: Prisma.InviteRewardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>[]
          }
          create: {
            args: Prisma.InviteRewardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          createMany: {
            args: Prisma.InviteRewardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InviteRewardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          update: {
            args: Prisma.InviteRewardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          deleteMany: {
            args: Prisma.InviteRewardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InviteRewardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InviteRewardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InviteRewardPayload>
          }
          aggregate: {
            args: Prisma.InviteRewardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInviteReward>
          }
          groupBy: {
            args: Prisma.InviteRewardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InviteRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.InviteRewardCountArgs<ExtArgs>,
            result: $Utils.Optional<InviteRewardCountAggregateOutputType> | number
          }
        }
      }
      UserSemChannel: {
        payload: Prisma.$UserSemChannelPayload<ExtArgs>
        fields: Prisma.UserSemChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSemChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSemChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          findFirst: {
            args: Prisma.UserSemChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSemChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          findMany: {
            args: Prisma.UserSemChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>[]
          }
          create: {
            args: Prisma.UserSemChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          createMany: {
            args: Prisma.UserSemChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserSemChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          update: {
            args: Prisma.UserSemChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          deleteMany: {
            args: Prisma.UserSemChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserSemChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserSemChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSemChannelPayload>
          }
          aggregate: {
            args: Prisma.UserSemChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserSemChannel>
          }
          groupBy: {
            args: Prisma.UserSemChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserSemChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSemChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<UserSemChannelCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>,
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      UserTask: {
        payload: Prisma.$UserTaskPayload<ExtArgs>
        fields: Prisma.UserTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          findFirst: {
            args: Prisma.UserTaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          findMany: {
            args: Prisma.UserTaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>[]
          }
          create: {
            args: Prisma.UserTaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          createMany: {
            args: Prisma.UserTaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserTaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          update: {
            args: Prisma.UserTaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          deleteMany: {
            args: Prisma.UserTaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserTaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserTaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTaskPayload>
          }
          aggregate: {
            args: Prisma.UserTaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserTask>
          }
          groupBy: {
            args: Prisma.UserTaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTaskCountArgs<ExtArgs>,
            result: $Utils.Optional<UserTaskCountAggregateOutputType> | number
          }
        }
      }
      CardInfo: {
        payload: Prisma.$CardInfoPayload<ExtArgs>
        fields: Prisma.CardInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          findFirst: {
            args: Prisma.CardInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          findMany: {
            args: Prisma.CardInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>[]
          }
          create: {
            args: Prisma.CardInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          createMany: {
            args: Prisma.CardInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CardInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          update: {
            args: Prisma.CardInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          deleteMany: {
            args: Prisma.CardInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CardInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CardInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardInfoPayload>
          }
          aggregate: {
            args: Prisma.CardInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCardInfo>
          }
          groupBy: {
            args: Prisma.CardInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CardInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<CardInfoCountAggregateOutputType> | number
          }
        }
      }
      Credits: {
        payload: Prisma.$CreditsPayload<ExtArgs>
        fields: Prisma.CreditsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          findFirst: {
            args: Prisma.CreditsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          findMany: {
            args: Prisma.CreditsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>[]
          }
          create: {
            args: Prisma.CreditsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          createMany: {
            args: Prisma.CreditsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CreditsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          update: {
            args: Prisma.CreditsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          deleteMany: {
            args: Prisma.CreditsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CreditsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CreditsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreditsPayload>
          }
          aggregate: {
            args: Prisma.CreditsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCredits>
          }
          groupBy: {
            args: Prisma.CreditsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CreditsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditsCountArgs<ExtArgs>,
            result: $Utils.Optional<CreditsCountAggregateOutputType> | number
          }
        }
      }
      InvoicePayment: {
        payload: Prisma.$InvoicePaymentPayload<ExtArgs>
        fields: Prisma.InvoicePaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoicePaymentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoicePaymentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          findFirst: {
            args: Prisma.InvoicePaymentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoicePaymentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          findMany: {
            args: Prisma.InvoicePaymentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>[]
          }
          create: {
            args: Prisma.InvoicePaymentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          createMany: {
            args: Prisma.InvoicePaymentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvoicePaymentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          update: {
            args: Prisma.InvoicePaymentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          deleteMany: {
            args: Prisma.InvoicePaymentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvoicePaymentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvoicePaymentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
          }
          aggregate: {
            args: Prisma.InvoicePaymentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvoicePayment>
          }
          groupBy: {
            args: Prisma.InvoicePaymentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvoicePaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoicePaymentCountArgs<ExtArgs>,
            result: $Utils.Optional<InvoicePaymentCountAggregateOutputType> | number
          }
        }
      }
      PaymentOrder: {
        payload: Prisma.$PaymentOrderPayload<ExtArgs>
        fields: Prisma.PaymentOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          findFirst: {
            args: Prisma.PaymentOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          findMany: {
            args: Prisma.PaymentOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>[]
          }
          create: {
            args: Prisma.PaymentOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          createMany: {
            args: Prisma.PaymentOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          update: {
            args: Prisma.PaymentOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          deleteMany: {
            args: Prisma.PaymentOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentOrderPayload>
          }
          aggregate: {
            args: Prisma.PaymentOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaymentOrder>
          }
          groupBy: {
            args: Prisma.PaymentOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentOrderCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPlan: {
        payload: Prisma.$SubscriptionPlanPayload<ExtArgs>
        fields: Prisma.SubscriptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPlanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionPlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          update: {
            args: Prisma.SubscriptionPlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionPlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubscriptionPlan>
          }
          groupBy: {
            args: Prisma.SubscriptionPlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPlanCountArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionPlanCountAggregateOutputType> | number
          }
        }
      }
      UserInfo: {
        payload: Prisma.$UserInfoPayload<ExtArgs>
        fields: Prisma.UserInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findFirst: {
            args: Prisma.UserInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findMany: {
            args: Prisma.UserInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>[]
          }
          create: {
            args: Prisma.UserInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          createMany: {
            args: Prisma.UserInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          update: {
            args: Prisma.UserInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          deleteMany: {
            args: Prisma.UserInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          aggregate: {
            args: Prisma.UserInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserInfo>
          }
          groupBy: {
            args: Prisma.UserInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<UserInfoCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceUsage: {
        payload: Prisma.$WorkspaceUsagePayload<ExtArgs>
        fields: Prisma.WorkspaceUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceUsageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceUsageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceUsageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceUsageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          findMany: {
            args: Prisma.WorkspaceUsageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>[]
          }
          create: {
            args: Prisma.WorkspaceUsageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          createMany: {
            args: Prisma.WorkspaceUsageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkspaceUsageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          update: {
            args: Prisma.WorkspaceUsageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceUsageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUsageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkspaceUsageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUsagePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceUsageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkspaceUsage>
          }
          groupBy: {
            args: Prisma.WorkspaceUsageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkspaceUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceUsageCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkspaceUsageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    WorkspaceUsage: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    WorkspaceUsage?: boolean | RegionCountOutputTypeCountWorkspaceUsageArgs
  }

  // Custom InputTypes

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountWorkspaceUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUsageWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    oauthProvider: number
    userTasks: number
    workspaceUsage: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthProvider?: boolean | UserCountOutputTypeCountOauthProviderArgs
    userTasks?: boolean | UserCountOutputTypeCountUserTasksArgs
    workspaceUsage?: boolean | UserCountOutputTypeCountWorkspaceUsageArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauthProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthProviderWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTaskWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspaceUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUsageWhereInput
  }



  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    userTasks: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTasks?: boolean | TaskCountOutputTypeCountUserTasksArgs
  }

  // Custom InputTypes

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountUserTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTaskWhereInput
  }



  /**
   * Count Type SubscriptionPlanCountOutputType
   */

  export type SubscriptionPlanCountOutputType = {
    Subscription: number
  }

  export type SubscriptionPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subscription?: boolean | SubscriptionPlanCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes

  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlanCountOutputType
     */
    select?: SubscriptionPlanCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model OauthProvider
   */

  export type AggregateOauthProvider = {
    _count: OauthProviderCountAggregateOutputType | null
    _min: OauthProviderMinAggregateOutputType | null
    _max: OauthProviderMaxAggregateOutputType | null
  }

  export type OauthProviderMinAggregateOutputType = {
    uid: string | null
    userUid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    providerType: $Enums.ProviderType | null
    providerId: string | null
    password: string | null
  }

  export type OauthProviderMaxAggregateOutputType = {
    uid: string | null
    userUid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    providerType: $Enums.ProviderType | null
    providerId: string | null
    password: string | null
  }

  export type OauthProviderCountAggregateOutputType = {
    uid: number
    userUid: number
    createdAt: number
    updatedAt: number
    providerType: number
    providerId: number
    password: number
    _all: number
  }


  export type OauthProviderMinAggregateInputType = {
    uid?: true
    userUid?: true
    createdAt?: true
    updatedAt?: true
    providerType?: true
    providerId?: true
    password?: true
  }

  export type OauthProviderMaxAggregateInputType = {
    uid?: true
    userUid?: true
    createdAt?: true
    updatedAt?: true
    providerType?: true
    providerId?: true
    password?: true
  }

  export type OauthProviderCountAggregateInputType = {
    uid?: true
    userUid?: true
    createdAt?: true
    updatedAt?: true
    providerType?: true
    providerId?: true
    password?: true
    _all?: true
  }

  export type OauthProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthProvider to aggregate.
     */
    where?: OauthProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthProviders to fetch.
     */
    orderBy?: OauthProviderOrderByWithRelationInput | OauthProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OauthProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OauthProviders
    **/
    _count?: true | OauthProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OauthProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OauthProviderMaxAggregateInputType
  }

  export type GetOauthProviderAggregateType<T extends OauthProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateOauthProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOauthProvider[P]>
      : GetScalarType<T[P], AggregateOauthProvider[P]>
  }




  export type OauthProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthProviderWhereInput
    orderBy?: OauthProviderOrderByWithAggregationInput | OauthProviderOrderByWithAggregationInput[]
    by: OauthProviderScalarFieldEnum[] | OauthProviderScalarFieldEnum
    having?: OauthProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OauthProviderCountAggregateInputType | true
    _min?: OauthProviderMinAggregateInputType
    _max?: OauthProviderMaxAggregateInputType
  }

  export type OauthProviderGroupByOutputType = {
    uid: string
    userUid: string
    createdAt: Date
    updatedAt: Date
    providerType: $Enums.ProviderType
    providerId: string
    password: string | null
    _count: OauthProviderCountAggregateOutputType | null
    _min: OauthProviderMinAggregateOutputType | null
    _max: OauthProviderMaxAggregateOutputType | null
  }

  type GetOauthProviderGroupByPayload<T extends OauthProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OauthProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OauthProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OauthProviderGroupByOutputType[P]>
            : GetScalarType<T[P], OauthProviderGroupByOutputType[P]>
        }
      >
    >


  export type OauthProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    userUid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    providerType?: boolean
    providerId?: boolean
    password?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oauthProvider"]>

  export type OauthProviderSelectScalar = {
    uid?: boolean
    userUid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    providerType?: boolean
    providerId?: boolean
    password?: boolean
  }

  export type OauthProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $OauthProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OauthProvider"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      uid: string
      userUid: string
      createdAt: Date
      updatedAt: Date
      providerType: $Enums.ProviderType
      providerId: string
      password: string | null
    }, ExtArgs["result"]["oauthProvider"]>
    composites: {}
  }


  type OauthProviderGetPayload<S extends boolean | null | undefined | OauthProviderDefaultArgs> = $Result.GetResult<Prisma.$OauthProviderPayload, S>

  type OauthProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OauthProviderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OauthProviderCountAggregateInputType | true
    }

  export interface OauthProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OauthProvider'], meta: { name: 'OauthProvider' } }
    /**
     * Find zero or one OauthProvider that matches the filter.
     * @param {OauthProviderFindUniqueArgs} args - Arguments to find a OauthProvider
     * @example
     * // Get one OauthProvider
     * const oauthProvider = await prisma.oauthProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OauthProviderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderFindUniqueArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OauthProvider that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OauthProviderFindUniqueOrThrowArgs} args - Arguments to find a OauthProvider
     * @example
     * // Get one OauthProvider
     * const oauthProvider = await prisma.oauthProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OauthProviderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OauthProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderFindFirstArgs} args - Arguments to find a OauthProvider
     * @example
     * // Get one OauthProvider
     * const oauthProvider = await prisma.oauthProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OauthProviderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderFindFirstArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OauthProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderFindFirstOrThrowArgs} args - Arguments to find a OauthProvider
     * @example
     * // Get one OauthProvider
     * const oauthProvider = await prisma.oauthProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OauthProviderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OauthProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OauthProviders
     * const oauthProviders = await prisma.oauthProvider.findMany()
     * 
     * // Get first 10 OauthProviders
     * const oauthProviders = await prisma.oauthProvider.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const oauthProviderWithUidOnly = await prisma.oauthProvider.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends OauthProviderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OauthProvider.
     * @param {OauthProviderCreateArgs} args - Arguments to create a OauthProvider.
     * @example
     * // Create one OauthProvider
     * const OauthProvider = await prisma.oauthProvider.create({
     *   data: {
     *     // ... data to create a OauthProvider
     *   }
     * })
     * 
    **/
    create<T extends OauthProviderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderCreateArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OauthProviders.
     *     @param {OauthProviderCreateManyArgs} args - Arguments to create many OauthProviders.
     *     @example
     *     // Create many OauthProviders
     *     const oauthProvider = await prisma.oauthProvider.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OauthProviderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OauthProvider.
     * @param {OauthProviderDeleteArgs} args - Arguments to delete one OauthProvider.
     * @example
     * // Delete one OauthProvider
     * const OauthProvider = await prisma.oauthProvider.delete({
     *   where: {
     *     // ... filter to delete one OauthProvider
     *   }
     * })
     * 
    **/
    delete<T extends OauthProviderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderDeleteArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OauthProvider.
     * @param {OauthProviderUpdateArgs} args - Arguments to update one OauthProvider.
     * @example
     * // Update one OauthProvider
     * const oauthProvider = await prisma.oauthProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OauthProviderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderUpdateArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OauthProviders.
     * @param {OauthProviderDeleteManyArgs} args - Arguments to filter OauthProviders to delete.
     * @example
     * // Delete a few OauthProviders
     * const { count } = await prisma.oauthProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OauthProviderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OauthProviderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OauthProviders
     * const oauthProvider = await prisma.oauthProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OauthProviderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OauthProvider.
     * @param {OauthProviderUpsertArgs} args - Arguments to update or create a OauthProvider.
     * @example
     * // Update or create a OauthProvider
     * const oauthProvider = await prisma.oauthProvider.upsert({
     *   create: {
     *     // ... data to create a OauthProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OauthProvider we want to update
     *   }
     * })
    **/
    upsert<T extends OauthProviderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OauthProviderUpsertArgs<ExtArgs>>
    ): Prisma__OauthProviderClient<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OauthProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderCountArgs} args - Arguments to filter OauthProviders to count.
     * @example
     * // Count the number of OauthProviders
     * const count = await prisma.oauthProvider.count({
     *   where: {
     *     // ... the filter for the OauthProviders we want to count
     *   }
     * })
    **/
    count<T extends OauthProviderCountArgs>(
      args?: Subset<T, OauthProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OauthProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OauthProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OauthProviderAggregateArgs>(args: Subset<T, OauthProviderAggregateArgs>): Prisma.PrismaPromise<GetOauthProviderAggregateType<T>>

    /**
     * Group by OauthProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OauthProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OauthProviderGroupByArgs['orderBy'] }
        : { orderBy?: OauthProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OauthProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOauthProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OauthProvider model
   */
  readonly fields: OauthProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OauthProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OauthProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OauthProvider model
   */ 
  interface OauthProviderFieldRefs {
    readonly uid: FieldRef<"OauthProvider", 'String'>
    readonly userUid: FieldRef<"OauthProvider", 'String'>
    readonly createdAt: FieldRef<"OauthProvider", 'DateTime'>
    readonly updatedAt: FieldRef<"OauthProvider", 'DateTime'>
    readonly providerType: FieldRef<"OauthProvider", 'ProviderType'>
    readonly providerId: FieldRef<"OauthProvider", 'String'>
    readonly password: FieldRef<"OauthProvider", 'String'>
  }
    

  // Custom InputTypes

  /**
   * OauthProvider findUnique
   */
  export type OauthProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter, which OauthProvider to fetch.
     */
    where: OauthProviderWhereUniqueInput
  }


  /**
   * OauthProvider findUniqueOrThrow
   */
  export type OauthProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter, which OauthProvider to fetch.
     */
    where: OauthProviderWhereUniqueInput
  }


  /**
   * OauthProvider findFirst
   */
  export type OauthProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter, which OauthProvider to fetch.
     */
    where?: OauthProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthProviders to fetch.
     */
    orderBy?: OauthProviderOrderByWithRelationInput | OauthProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthProviders.
     */
    cursor?: OauthProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthProviders.
     */
    distinct?: OauthProviderScalarFieldEnum | OauthProviderScalarFieldEnum[]
  }


  /**
   * OauthProvider findFirstOrThrow
   */
  export type OauthProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter, which OauthProvider to fetch.
     */
    where?: OauthProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthProviders to fetch.
     */
    orderBy?: OauthProviderOrderByWithRelationInput | OauthProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthProviders.
     */
    cursor?: OauthProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthProviders.
     */
    distinct?: OauthProviderScalarFieldEnum | OauthProviderScalarFieldEnum[]
  }


  /**
   * OauthProvider findMany
   */
  export type OauthProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter, which OauthProviders to fetch.
     */
    where?: OauthProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthProviders to fetch.
     */
    orderBy?: OauthProviderOrderByWithRelationInput | OauthProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OauthProviders.
     */
    cursor?: OauthProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthProviders.
     */
    skip?: number
    distinct?: OauthProviderScalarFieldEnum | OauthProviderScalarFieldEnum[]
  }


  /**
   * OauthProvider create
   */
  export type OauthProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a OauthProvider.
     */
    data: XOR<OauthProviderCreateInput, OauthProviderUncheckedCreateInput>
  }


  /**
   * OauthProvider createMany
   */
  export type OauthProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OauthProviders.
     */
    data: OauthProviderCreateManyInput | OauthProviderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OauthProvider update
   */
  export type OauthProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a OauthProvider.
     */
    data: XOR<OauthProviderUpdateInput, OauthProviderUncheckedUpdateInput>
    /**
     * Choose, which OauthProvider to update.
     */
    where: OauthProviderWhereUniqueInput
  }


  /**
   * OauthProvider updateMany
   */
  export type OauthProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OauthProviders.
     */
    data: XOR<OauthProviderUpdateManyMutationInput, OauthProviderUncheckedUpdateManyInput>
    /**
     * Filter which OauthProviders to update
     */
    where?: OauthProviderWhereInput
  }


  /**
   * OauthProvider upsert
   */
  export type OauthProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the OauthProvider to update in case it exists.
     */
    where: OauthProviderWhereUniqueInput
    /**
     * In case the OauthProvider found by the `where` argument doesn't exist, create a new OauthProvider with this data.
     */
    create: XOR<OauthProviderCreateInput, OauthProviderUncheckedCreateInput>
    /**
     * In case the OauthProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OauthProviderUpdateInput, OauthProviderUncheckedUpdateInput>
  }


  /**
   * OauthProvider delete
   */
  export type OauthProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    /**
     * Filter which OauthProvider to delete.
     */
    where: OauthProviderWhereUniqueInput
  }


  /**
   * OauthProvider deleteMany
   */
  export type OauthProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthProviders to delete
     */
    where?: OauthProviderWhereInput
  }


  /**
   * OauthProvider without action
   */
  export type OauthProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
  }



  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    uid: string | null
    displayName: string | null
    location: string | null
    domain: string | null
    description: string | null
  }

  export type RegionMaxAggregateOutputType = {
    uid: string | null
    displayName: string | null
    location: string | null
    domain: string | null
    description: string | null
  }

  export type RegionCountAggregateOutputType = {
    uid: number
    displayName: number
    location: number
    domain: number
    description: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    uid?: true
    displayName?: true
    location?: true
    domain?: true
    description?: true
  }

  export type RegionMaxAggregateInputType = {
    uid?: true
    displayName?: true
    location?: true
    domain?: true
    description?: true
  }

  export type RegionCountAggregateInputType = {
    uid?: true
    displayName?: true
    location?: true
    domain?: true
    description?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    uid: string
    displayName: string
    location: string
    domain: string
    description: string | null
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    displayName?: boolean
    location?: boolean
    domain?: boolean
    description?: boolean
    WorkspaceUsage?: boolean | Region$WorkspaceUsageArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    uid?: boolean
    displayName?: boolean
    location?: boolean
    domain?: boolean
    description?: boolean
  }

  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    WorkspaceUsage?: boolean | Region$WorkspaceUsageArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      WorkspaceUsage: Prisma.$WorkspaceUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      uid: string
      displayName: string
      location: string
      domain: string
      description: string | null
    }, ExtArgs["result"]["region"]>
    composites: {}
  }


  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Region that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const regionWithUidOnly = await prisma.region.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends RegionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
    **/
    create<T extends RegionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RegionCreateArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Regions.
     *     @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     *     @example
     *     // Create many Regions
     *     const region = await prisma.region.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RegionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
    **/
    delete<T extends RegionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
    **/
    upsert<T extends RegionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>
    ): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    WorkspaceUsage<T extends Region$WorkspaceUsageArgs<ExtArgs> = {}>(args?: Subset<T, Region$WorkspaceUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Region model
   */ 
  interface RegionFieldRefs {
    readonly uid: FieldRef<"Region", 'String'>
    readonly displayName: FieldRef<"Region", 'String'>
    readonly location: FieldRef<"Region", 'String'>
    readonly domain: FieldRef<"Region", 'String'>
    readonly description: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }


  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }


  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }


  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }


  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }


  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }


  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }


  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
  }


  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }


  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }


  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
  }


  /**
   * Region.WorkspaceUsage
   */
  export type Region$WorkspaceUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    where?: WorkspaceUsageWhereInput
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    cursor?: WorkspaceUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceUsageScalarFieldEnum | WorkspaceUsageScalarFieldEnum[]
  }


  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegionInclude<ExtArgs> | null
  }



  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    activityBonus: number | null
    balance: number | null
    deduction_balance: number | null
  }

  export type AccountSumAggregateOutputType = {
    activityBonus: bigint | null
    balance: bigint | null
    deduction_balance: bigint | null
  }

  export type AccountMinAggregateOutputType = {
    userUid: string | null
    activityBonus: bigint | null
    encryptBalance: string | null
    encryptDeductionBalance: string | null
    created_at: Date | null
    create_region_id: string | null
    balance: bigint | null
    deduction_balance: bigint | null
  }

  export type AccountMaxAggregateOutputType = {
    userUid: string | null
    activityBonus: bigint | null
    encryptBalance: string | null
    encryptDeductionBalance: string | null
    created_at: Date | null
    create_region_id: string | null
    balance: bigint | null
    deduction_balance: bigint | null
  }

  export type AccountCountAggregateOutputType = {
    userUid: number
    activityBonus: number
    encryptBalance: number
    encryptDeductionBalance: number
    created_at: number
    create_region_id: number
    balance: number
    deduction_balance: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    activityBonus?: true
    balance?: true
    deduction_balance?: true
  }

  export type AccountSumAggregateInputType = {
    activityBonus?: true
    balance?: true
    deduction_balance?: true
  }

  export type AccountMinAggregateInputType = {
    userUid?: true
    activityBonus?: true
    encryptBalance?: true
    encryptDeductionBalance?: true
    created_at?: true
    create_region_id?: true
    balance?: true
    deduction_balance?: true
  }

  export type AccountMaxAggregateInputType = {
    userUid?: true
    activityBonus?: true
    encryptBalance?: true
    encryptDeductionBalance?: true
    created_at?: true
    create_region_id?: true
    balance?: true
    deduction_balance?: true
  }

  export type AccountCountAggregateInputType = {
    userUid?: true
    activityBonus?: true
    encryptBalance?: true
    encryptDeductionBalance?: true
    created_at?: true
    create_region_id?: true
    balance?: true
    deduction_balance?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    userUid: string
    activityBonus: bigint
    encryptBalance: string
    encryptDeductionBalance: string
    created_at: Date
    create_region_id: string
    balance: bigint | null
    deduction_balance: bigint | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userUid?: boolean
    activityBonus?: boolean
    encryptBalance?: boolean
    encryptDeductionBalance?: boolean
    created_at?: boolean
    create_region_id?: boolean
    balance?: boolean
    deduction_balance?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    userUid?: boolean
    activityBonus?: boolean
    encryptBalance?: boolean
    encryptDeductionBalance?: boolean
    created_at?: boolean
    create_region_id?: boolean
    balance?: boolean
    deduction_balance?: boolean
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      userUid: string
      activityBonus: bigint
      encryptBalance: string
      encryptDeductionBalance: string
      created_at: Date
      create_region_id: string
      balance: bigint | null
      deduction_balance: bigint | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `userUid`
     * const accountWithUserUidOnly = await prisma.account.findMany({ select: { userUid: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly userUid: FieldRef<"Account", 'String'>
    readonly activityBonus: FieldRef<"Account", 'BigInt'>
    readonly encryptBalance: FieldRef<"Account", 'String'>
    readonly encryptDeductionBalance: FieldRef<"Account", 'String'>
    readonly created_at: FieldRef<"Account", 'DateTime'>
    readonly create_region_id: FieldRef<"Account", 'String'>
    readonly balance: FieldRef<"Account", 'BigInt'>
    readonly deduction_balance: FieldRef<"Account", 'BigInt'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
  }



  /**
   * Model AccountTransaction
   */

  export type AggregateAccountTransaction = {
    _count: AccountTransactionCountAggregateOutputType | null
    _avg: AccountTransactionAvgAggregateOutputType | null
    _sum: AccountTransactionSumAggregateOutputType | null
    _min: AccountTransactionMinAggregateOutputType | null
    _max: AccountTransactionMaxAggregateOutputType | null
  }

  export type AccountTransactionAvgAggregateOutputType = {
    deduction_balance: number | null
    balance: number | null
    balance_before: number | null
    deduction_balance_before: number | null
    deduction_credit: number | null
  }

  export type AccountTransactionSumAggregateOutputType = {
    deduction_balance: bigint | null
    balance: bigint | null
    balance_before: bigint | null
    deduction_balance_before: bigint | null
    deduction_credit: bigint | null
  }

  export type AccountTransactionMinAggregateOutputType = {
    id: string | null
    type: string | null
    deduction_balance: bigint | null
    balance: bigint | null
    message: string | null
    created_at: Date | null
    updated_at: Date | null
    billing_id: string | null
    userUid: string | null
    balance_before: bigint | null
    deduction_balance_before: bigint | null
    region: string | null
    deduction_credit: bigint | null
  }

  export type AccountTransactionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    deduction_balance: bigint | null
    balance: bigint | null
    message: string | null
    created_at: Date | null
    updated_at: Date | null
    billing_id: string | null
    userUid: string | null
    balance_before: bigint | null
    deduction_balance_before: bigint | null
    region: string | null
    deduction_credit: bigint | null
  }

  export type AccountTransactionCountAggregateOutputType = {
    id: number
    type: number
    deduction_balance: number
    balance: number
    message: number
    created_at: number
    updated_at: number
    billing_id: number
    userUid: number
    balance_before: number
    deduction_balance_before: number
    region: number
    deduction_credit: number
    billing_id_list: number
    credit_id_list: number
    _all: number
  }


  export type AccountTransactionAvgAggregateInputType = {
    deduction_balance?: true
    balance?: true
    balance_before?: true
    deduction_balance_before?: true
    deduction_credit?: true
  }

  export type AccountTransactionSumAggregateInputType = {
    deduction_balance?: true
    balance?: true
    balance_before?: true
    deduction_balance_before?: true
    deduction_credit?: true
  }

  export type AccountTransactionMinAggregateInputType = {
    id?: true
    type?: true
    deduction_balance?: true
    balance?: true
    message?: true
    created_at?: true
    updated_at?: true
    billing_id?: true
    userUid?: true
    balance_before?: true
    deduction_balance_before?: true
    region?: true
    deduction_credit?: true
  }

  export type AccountTransactionMaxAggregateInputType = {
    id?: true
    type?: true
    deduction_balance?: true
    balance?: true
    message?: true
    created_at?: true
    updated_at?: true
    billing_id?: true
    userUid?: true
    balance_before?: true
    deduction_balance_before?: true
    region?: true
    deduction_credit?: true
  }

  export type AccountTransactionCountAggregateInputType = {
    id?: true
    type?: true
    deduction_balance?: true
    balance?: true
    message?: true
    created_at?: true
    updated_at?: true
    billing_id?: true
    userUid?: true
    balance_before?: true
    deduction_balance_before?: true
    region?: true
    deduction_credit?: true
    billing_id_list?: true
    credit_id_list?: true
    _all?: true
  }

  export type AccountTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountTransaction to aggregate.
     */
    where?: AccountTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTransactions to fetch.
     */
    orderBy?: AccountTransactionOrderByWithRelationInput | AccountTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountTransactions
    **/
    _count?: true | AccountTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountTransactionMaxAggregateInputType
  }

  export type GetAccountTransactionAggregateType<T extends AccountTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountTransaction[P]>
      : GetScalarType<T[P], AggregateAccountTransaction[P]>
  }




  export type AccountTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountTransactionWhereInput
    orderBy?: AccountTransactionOrderByWithAggregationInput | AccountTransactionOrderByWithAggregationInput[]
    by: AccountTransactionScalarFieldEnum[] | AccountTransactionScalarFieldEnum
    having?: AccountTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountTransactionCountAggregateInputType | true
    _avg?: AccountTransactionAvgAggregateInputType
    _sum?: AccountTransactionSumAggregateInputType
    _min?: AccountTransactionMinAggregateInputType
    _max?: AccountTransactionMaxAggregateInputType
  }

  export type AccountTransactionGroupByOutputType = {
    id: string
    type: string
    deduction_balance: bigint
    balance: bigint
    message: string | null
    created_at: Date
    updated_at: Date
    billing_id: string
    userUid: string
    balance_before: bigint | null
    deduction_balance_before: bigint | null
    region: string | null
    deduction_credit: bigint | null
    billing_id_list: string[]
    credit_id_list: string[]
    _count: AccountTransactionCountAggregateOutputType | null
    _avg: AccountTransactionAvgAggregateOutputType | null
    _sum: AccountTransactionSumAggregateOutputType | null
    _min: AccountTransactionMinAggregateOutputType | null
    _max: AccountTransactionMaxAggregateOutputType | null
  }

  type GetAccountTransactionGroupByPayload<T extends AccountTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], AccountTransactionGroupByOutputType[P]>
        }
      >
    >


  export type AccountTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    deduction_balance?: boolean
    balance?: boolean
    message?: boolean
    created_at?: boolean
    updated_at?: boolean
    billing_id?: boolean
    userUid?: boolean
    balance_before?: boolean
    deduction_balance_before?: boolean
    region?: boolean
    deduction_credit?: boolean
    billing_id_list?: boolean
    credit_id_list?: boolean
  }, ExtArgs["result"]["accountTransaction"]>

  export type AccountTransactionSelectScalar = {
    id?: boolean
    type?: boolean
    deduction_balance?: boolean
    balance?: boolean
    message?: boolean
    created_at?: boolean
    updated_at?: boolean
    billing_id?: boolean
    userUid?: boolean
    balance_before?: boolean
    deduction_balance_before?: boolean
    region?: boolean
    deduction_credit?: boolean
    billing_id_list?: boolean
    credit_id_list?: boolean
  }


  export type $AccountTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountTransaction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      deduction_balance: bigint
      balance: bigint
      message: string | null
      created_at: Date
      updated_at: Date
      billing_id: string
      userUid: string
      balance_before: bigint | null
      deduction_balance_before: bigint | null
      region: string | null
      deduction_credit: bigint | null
      billing_id_list: string[]
      credit_id_list: string[]
    }, ExtArgs["result"]["accountTransaction"]>
    composites: {}
  }


  type AccountTransactionGetPayload<S extends boolean | null | undefined | AccountTransactionDefaultArgs> = $Result.GetResult<Prisma.$AccountTransactionPayload, S>

  type AccountTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountTransactionCountAggregateInputType | true
    }

  export interface AccountTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountTransaction'], meta: { name: 'AccountTransaction' } }
    /**
     * Find zero or one AccountTransaction that matches the filter.
     * @param {AccountTransactionFindUniqueArgs} args - Arguments to find a AccountTransaction
     * @example
     * // Get one AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountTransactionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AccountTransaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountTransactionFindUniqueOrThrowArgs} args - Arguments to find a AccountTransaction
     * @example
     * // Get one AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountTransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AccountTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionFindFirstArgs} args - Arguments to find a AccountTransaction
     * @example
     * // Get one AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountTransactionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionFindFirstArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AccountTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionFindFirstOrThrowArgs} args - Arguments to find a AccountTransaction
     * @example
     * // Get one AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountTransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AccountTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountTransactions
     * const accountTransactions = await prisma.accountTransaction.findMany()
     * 
     * // Get first 10 AccountTransactions
     * const accountTransactions = await prisma.accountTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountTransactionWithIdOnly = await prisma.accountTransaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountTransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AccountTransaction.
     * @param {AccountTransactionCreateArgs} args - Arguments to create a AccountTransaction.
     * @example
     * // Create one AccountTransaction
     * const AccountTransaction = await prisma.accountTransaction.create({
     *   data: {
     *     // ... data to create a AccountTransaction
     *   }
     * })
     * 
    **/
    create<T extends AccountTransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionCreateArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AccountTransactions.
     *     @param {AccountTransactionCreateManyArgs} args - Arguments to create many AccountTransactions.
     *     @example
     *     // Create many AccountTransactions
     *     const accountTransaction = await prisma.accountTransaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountTransactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountTransaction.
     * @param {AccountTransactionDeleteArgs} args - Arguments to delete one AccountTransaction.
     * @example
     * // Delete one AccountTransaction
     * const AccountTransaction = await prisma.accountTransaction.delete({
     *   where: {
     *     // ... filter to delete one AccountTransaction
     *   }
     * })
     * 
    **/
    delete<T extends AccountTransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionDeleteArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AccountTransaction.
     * @param {AccountTransactionUpdateArgs} args - Arguments to update one AccountTransaction.
     * @example
     * // Update one AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountTransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionUpdateArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AccountTransactions.
     * @param {AccountTransactionDeleteManyArgs} args - Arguments to filter AccountTransactions to delete.
     * @example
     * // Delete a few AccountTransactions
     * const { count } = await prisma.accountTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountTransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountTransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountTransactions
     * const accountTransaction = await prisma.accountTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountTransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountTransaction.
     * @param {AccountTransactionUpsertArgs} args - Arguments to update or create a AccountTransaction.
     * @example
     * // Update or create a AccountTransaction
     * const accountTransaction = await prisma.accountTransaction.upsert({
     *   create: {
     *     // ... data to create a AccountTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountTransaction we want to update
     *   }
     * })
    **/
    upsert<T extends AccountTransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountTransactionUpsertArgs<ExtArgs>>
    ): Prisma__AccountTransactionClient<$Result.GetResult<Prisma.$AccountTransactionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AccountTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionCountArgs} args - Arguments to filter AccountTransactions to count.
     * @example
     * // Count the number of AccountTransactions
     * const count = await prisma.accountTransaction.count({
     *   where: {
     *     // ... the filter for the AccountTransactions we want to count
     *   }
     * })
    **/
    count<T extends AccountTransactionCountArgs>(
      args?: Subset<T, AccountTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountTransactionAggregateArgs>(args: Subset<T, AccountTransactionAggregateArgs>): Prisma.PrismaPromise<GetAccountTransactionAggregateType<T>>

    /**
     * Group by AccountTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountTransactionGroupByArgs['orderBy'] }
        : { orderBy?: AccountTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountTransaction model
   */
  readonly fields: AccountTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AccountTransaction model
   */ 
  interface AccountTransactionFieldRefs {
    readonly id: FieldRef<"AccountTransaction", 'String'>
    readonly type: FieldRef<"AccountTransaction", 'String'>
    readonly deduction_balance: FieldRef<"AccountTransaction", 'BigInt'>
    readonly balance: FieldRef<"AccountTransaction", 'BigInt'>
    readonly message: FieldRef<"AccountTransaction", 'String'>
    readonly created_at: FieldRef<"AccountTransaction", 'DateTime'>
    readonly updated_at: FieldRef<"AccountTransaction", 'DateTime'>
    readonly billing_id: FieldRef<"AccountTransaction", 'String'>
    readonly userUid: FieldRef<"AccountTransaction", 'String'>
    readonly balance_before: FieldRef<"AccountTransaction", 'BigInt'>
    readonly deduction_balance_before: FieldRef<"AccountTransaction", 'BigInt'>
    readonly region: FieldRef<"AccountTransaction", 'String'>
    readonly deduction_credit: FieldRef<"AccountTransaction", 'BigInt'>
    readonly billing_id_list: FieldRef<"AccountTransaction", 'String[]'>
    readonly credit_id_list: FieldRef<"AccountTransaction", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * AccountTransaction findUnique
   */
  export type AccountTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter, which AccountTransaction to fetch.
     */
    where: AccountTransactionWhereUniqueInput
  }


  /**
   * AccountTransaction findUniqueOrThrow
   */
  export type AccountTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter, which AccountTransaction to fetch.
     */
    where: AccountTransactionWhereUniqueInput
  }


  /**
   * AccountTransaction findFirst
   */
  export type AccountTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter, which AccountTransaction to fetch.
     */
    where?: AccountTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTransactions to fetch.
     */
    orderBy?: AccountTransactionOrderByWithRelationInput | AccountTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountTransactions.
     */
    cursor?: AccountTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountTransactions.
     */
    distinct?: AccountTransactionScalarFieldEnum | AccountTransactionScalarFieldEnum[]
  }


  /**
   * AccountTransaction findFirstOrThrow
   */
  export type AccountTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter, which AccountTransaction to fetch.
     */
    where?: AccountTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTransactions to fetch.
     */
    orderBy?: AccountTransactionOrderByWithRelationInput | AccountTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountTransactions.
     */
    cursor?: AccountTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountTransactions.
     */
    distinct?: AccountTransactionScalarFieldEnum | AccountTransactionScalarFieldEnum[]
  }


  /**
   * AccountTransaction findMany
   */
  export type AccountTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter, which AccountTransactions to fetch.
     */
    where?: AccountTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTransactions to fetch.
     */
    orderBy?: AccountTransactionOrderByWithRelationInput | AccountTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountTransactions.
     */
    cursor?: AccountTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTransactions.
     */
    skip?: number
    distinct?: AccountTransactionScalarFieldEnum | AccountTransactionScalarFieldEnum[]
  }


  /**
   * AccountTransaction create
   */
  export type AccountTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * The data needed to create a AccountTransaction.
     */
    data: XOR<AccountTransactionCreateInput, AccountTransactionUncheckedCreateInput>
  }


  /**
   * AccountTransaction createMany
   */
  export type AccountTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountTransactions.
     */
    data: AccountTransactionCreateManyInput | AccountTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AccountTransaction update
   */
  export type AccountTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * The data needed to update a AccountTransaction.
     */
    data: XOR<AccountTransactionUpdateInput, AccountTransactionUncheckedUpdateInput>
    /**
     * Choose, which AccountTransaction to update.
     */
    where: AccountTransactionWhereUniqueInput
  }


  /**
   * AccountTransaction updateMany
   */
  export type AccountTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountTransactions.
     */
    data: XOR<AccountTransactionUpdateManyMutationInput, AccountTransactionUncheckedUpdateManyInput>
    /**
     * Filter which AccountTransactions to update
     */
    where?: AccountTransactionWhereInput
  }


  /**
   * AccountTransaction upsert
   */
  export type AccountTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * The filter to search for the AccountTransaction to update in case it exists.
     */
    where: AccountTransactionWhereUniqueInput
    /**
     * In case the AccountTransaction found by the `where` argument doesn't exist, create a new AccountTransaction with this data.
     */
    create: XOR<AccountTransactionCreateInput, AccountTransactionUncheckedCreateInput>
    /**
     * In case the AccountTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountTransactionUpdateInput, AccountTransactionUncheckedUpdateInput>
  }


  /**
   * AccountTransaction delete
   */
  export type AccountTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
    /**
     * Filter which AccountTransaction to delete.
     */
    where: AccountTransactionWhereUniqueInput
  }


  /**
   * AccountTransaction deleteMany
   */
  export type AccountTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountTransactions to delete
     */
    where?: AccountTransactionWhereInput
  }


  /**
   * AccountTransaction without action
   */
  export type AccountTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountTransaction
     */
    select?: AccountTransactionSelect<ExtArgs> | null
  }



  /**
   * Model ErrorPaymentCreate
   */

  export type AggregateErrorPaymentCreate = {
    _count: ErrorPaymentCreateCountAggregateOutputType | null
    _avg: ErrorPaymentCreateAvgAggregateOutputType | null
    _sum: ErrorPaymentCreateSumAggregateOutputType | null
    _min: ErrorPaymentCreateMinAggregateOutputType | null
    _max: ErrorPaymentCreateMaxAggregateOutputType | null
  }

  export type ErrorPaymentCreateAvgAggregateOutputType = {
    amount: number | null
    gift: number | null
  }

  export type ErrorPaymentCreateSumAggregateOutputType = {
    amount: bigint | null
    gift: bigint | null
  }

  export type ErrorPaymentCreateMinAggregateOutputType = {
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string | null
    create_time: Date | null
  }

  export type ErrorPaymentCreateMaxAggregateOutputType = {
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string | null
    create_time: Date | null
  }

  export type ErrorPaymentCreateCountAggregateOutputType = {
    userUid: number
    regionUid: number
    created_at: number
    regionUserOwner: number
    method: number
    amount: number
    gift: number
    trade_no: number
    code_url: number
    invoiced_at: number
    remark: number
    message: number
    create_time: number
    _all: number
  }


  export type ErrorPaymentCreateAvgAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type ErrorPaymentCreateSumAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type ErrorPaymentCreateMinAggregateInputType = {
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    create_time?: true
  }

  export type ErrorPaymentCreateMaxAggregateInputType = {
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    create_time?: true
  }

  export type ErrorPaymentCreateCountAggregateInputType = {
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    create_time?: true
    _all?: true
  }

  export type ErrorPaymentCreateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ErrorPaymentCreate to aggregate.
     */
    where?: ErrorPaymentCreateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorPaymentCreates to fetch.
     */
    orderBy?: ErrorPaymentCreateOrderByWithRelationInput | ErrorPaymentCreateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ErrorPaymentCreateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorPaymentCreates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorPaymentCreates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ErrorPaymentCreates
    **/
    _count?: true | ErrorPaymentCreateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ErrorPaymentCreateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ErrorPaymentCreateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ErrorPaymentCreateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ErrorPaymentCreateMaxAggregateInputType
  }

  export type GetErrorPaymentCreateAggregateType<T extends ErrorPaymentCreateAggregateArgs> = {
        [P in keyof T & keyof AggregateErrorPaymentCreate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateErrorPaymentCreate[P]>
      : GetScalarType<T[P], AggregateErrorPaymentCreate[P]>
  }




  export type ErrorPaymentCreateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ErrorPaymentCreateWhereInput
    orderBy?: ErrorPaymentCreateOrderByWithAggregationInput | ErrorPaymentCreateOrderByWithAggregationInput[]
    by: ErrorPaymentCreateScalarFieldEnum[] | ErrorPaymentCreateScalarFieldEnum
    having?: ErrorPaymentCreateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ErrorPaymentCreateCountAggregateInputType | true
    _avg?: ErrorPaymentCreateAvgAggregateInputType
    _sum?: ErrorPaymentCreateSumAggregateInputType
    _min?: ErrorPaymentCreateMinAggregateInputType
    _max?: ErrorPaymentCreateMaxAggregateInputType
  }

  export type ErrorPaymentCreateGroupByOutputType = {
    userUid: string
    regionUid: string
    created_at: Date
    regionUserOwner: string
    method: string
    amount: bigint
    gift: bigint | null
    trade_no: string
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string
    create_time: Date
    _count: ErrorPaymentCreateCountAggregateOutputType | null
    _avg: ErrorPaymentCreateAvgAggregateOutputType | null
    _sum: ErrorPaymentCreateSumAggregateOutputType | null
    _min: ErrorPaymentCreateMinAggregateOutputType | null
    _max: ErrorPaymentCreateMaxAggregateOutputType | null
  }

  type GetErrorPaymentCreateGroupByPayload<T extends ErrorPaymentCreateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ErrorPaymentCreateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ErrorPaymentCreateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ErrorPaymentCreateGroupByOutputType[P]>
            : GetScalarType<T[P], ErrorPaymentCreateGroupByOutputType[P]>
        }
      >
    >


  export type ErrorPaymentCreateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    message?: boolean
    create_time?: boolean
  }, ExtArgs["result"]["errorPaymentCreate"]>

  export type ErrorPaymentCreateSelectScalar = {
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    message?: boolean
    create_time?: boolean
  }


  export type $ErrorPaymentCreatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ErrorPaymentCreate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      userUid: string
      regionUid: string
      created_at: Date
      regionUserOwner: string
      method: string
      amount: bigint
      gift: bigint | null
      trade_no: string
      code_url: string | null
      invoiced_at: boolean | null
      remark: string | null
      message: string
      create_time: Date
    }, ExtArgs["result"]["errorPaymentCreate"]>
    composites: {}
  }


  type ErrorPaymentCreateGetPayload<S extends boolean | null | undefined | ErrorPaymentCreateDefaultArgs> = $Result.GetResult<Prisma.$ErrorPaymentCreatePayload, S>

  type ErrorPaymentCreateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ErrorPaymentCreateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ErrorPaymentCreateCountAggregateInputType | true
    }

  export interface ErrorPaymentCreateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ErrorPaymentCreate'], meta: { name: 'ErrorPaymentCreate' } }
    /**
     * Find zero or one ErrorPaymentCreate that matches the filter.
     * @param {ErrorPaymentCreateFindUniqueArgs} args - Arguments to find a ErrorPaymentCreate
     * @example
     * // Get one ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ErrorPaymentCreateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateFindUniqueArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ErrorPaymentCreate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ErrorPaymentCreateFindUniqueOrThrowArgs} args - Arguments to find a ErrorPaymentCreate
     * @example
     * // Get one ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ErrorPaymentCreateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ErrorPaymentCreate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateFindFirstArgs} args - Arguments to find a ErrorPaymentCreate
     * @example
     * // Get one ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ErrorPaymentCreateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateFindFirstArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ErrorPaymentCreate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateFindFirstOrThrowArgs} args - Arguments to find a ErrorPaymentCreate
     * @example
     * // Get one ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ErrorPaymentCreateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ErrorPaymentCreates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ErrorPaymentCreates
     * const errorPaymentCreates = await prisma.errorPaymentCreate.findMany()
     * 
     * // Get first 10 ErrorPaymentCreates
     * const errorPaymentCreates = await prisma.errorPaymentCreate.findMany({ take: 10 })
     * 
     * // Only select the `userUid`
     * const errorPaymentCreateWithUserUidOnly = await prisma.errorPaymentCreate.findMany({ select: { userUid: true } })
     * 
    **/
    findMany<T extends ErrorPaymentCreateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ErrorPaymentCreate.
     * @param {ErrorPaymentCreateCreateArgs} args - Arguments to create a ErrorPaymentCreate.
     * @example
     * // Create one ErrorPaymentCreate
     * const ErrorPaymentCreate = await prisma.errorPaymentCreate.create({
     *   data: {
     *     // ... data to create a ErrorPaymentCreate
     *   }
     * })
     * 
    **/
    create<T extends ErrorPaymentCreateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateCreateArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ErrorPaymentCreates.
     *     @param {ErrorPaymentCreateCreateManyArgs} args - Arguments to create many ErrorPaymentCreates.
     *     @example
     *     // Create many ErrorPaymentCreates
     *     const errorPaymentCreate = await prisma.errorPaymentCreate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ErrorPaymentCreateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ErrorPaymentCreate.
     * @param {ErrorPaymentCreateDeleteArgs} args - Arguments to delete one ErrorPaymentCreate.
     * @example
     * // Delete one ErrorPaymentCreate
     * const ErrorPaymentCreate = await prisma.errorPaymentCreate.delete({
     *   where: {
     *     // ... filter to delete one ErrorPaymentCreate
     *   }
     * })
     * 
    **/
    delete<T extends ErrorPaymentCreateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateDeleteArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ErrorPaymentCreate.
     * @param {ErrorPaymentCreateUpdateArgs} args - Arguments to update one ErrorPaymentCreate.
     * @example
     * // Update one ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ErrorPaymentCreateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateUpdateArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ErrorPaymentCreates.
     * @param {ErrorPaymentCreateDeleteManyArgs} args - Arguments to filter ErrorPaymentCreates to delete.
     * @example
     * // Delete a few ErrorPaymentCreates
     * const { count } = await prisma.errorPaymentCreate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ErrorPaymentCreateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ErrorPaymentCreateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ErrorPaymentCreates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ErrorPaymentCreates
     * const errorPaymentCreate = await prisma.errorPaymentCreate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ErrorPaymentCreateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ErrorPaymentCreate.
     * @param {ErrorPaymentCreateUpsertArgs} args - Arguments to update or create a ErrorPaymentCreate.
     * @example
     * // Update or create a ErrorPaymentCreate
     * const errorPaymentCreate = await prisma.errorPaymentCreate.upsert({
     *   create: {
     *     // ... data to create a ErrorPaymentCreate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ErrorPaymentCreate we want to update
     *   }
     * })
    **/
    upsert<T extends ErrorPaymentCreateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ErrorPaymentCreateUpsertArgs<ExtArgs>>
    ): Prisma__ErrorPaymentCreateClient<$Result.GetResult<Prisma.$ErrorPaymentCreatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ErrorPaymentCreates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateCountArgs} args - Arguments to filter ErrorPaymentCreates to count.
     * @example
     * // Count the number of ErrorPaymentCreates
     * const count = await prisma.errorPaymentCreate.count({
     *   where: {
     *     // ... the filter for the ErrorPaymentCreates we want to count
     *   }
     * })
    **/
    count<T extends ErrorPaymentCreateCountArgs>(
      args?: Subset<T, ErrorPaymentCreateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ErrorPaymentCreateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ErrorPaymentCreate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ErrorPaymentCreateAggregateArgs>(args: Subset<T, ErrorPaymentCreateAggregateArgs>): Prisma.PrismaPromise<GetErrorPaymentCreateAggregateType<T>>

    /**
     * Group by ErrorPaymentCreate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorPaymentCreateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ErrorPaymentCreateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ErrorPaymentCreateGroupByArgs['orderBy'] }
        : { orderBy?: ErrorPaymentCreateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ErrorPaymentCreateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetErrorPaymentCreateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ErrorPaymentCreate model
   */
  readonly fields: ErrorPaymentCreateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ErrorPaymentCreate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ErrorPaymentCreateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ErrorPaymentCreate model
   */ 
  interface ErrorPaymentCreateFieldRefs {
    readonly userUid: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly regionUid: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly created_at: FieldRef<"ErrorPaymentCreate", 'DateTime'>
    readonly regionUserOwner: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly method: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly amount: FieldRef<"ErrorPaymentCreate", 'BigInt'>
    readonly gift: FieldRef<"ErrorPaymentCreate", 'BigInt'>
    readonly trade_no: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly code_url: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly invoiced_at: FieldRef<"ErrorPaymentCreate", 'Boolean'>
    readonly remark: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly message: FieldRef<"ErrorPaymentCreate", 'String'>
    readonly create_time: FieldRef<"ErrorPaymentCreate", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ErrorPaymentCreate findUnique
   */
  export type ErrorPaymentCreateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter, which ErrorPaymentCreate to fetch.
     */
    where: ErrorPaymentCreateWhereUniqueInput
  }


  /**
   * ErrorPaymentCreate findUniqueOrThrow
   */
  export type ErrorPaymentCreateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter, which ErrorPaymentCreate to fetch.
     */
    where: ErrorPaymentCreateWhereUniqueInput
  }


  /**
   * ErrorPaymentCreate findFirst
   */
  export type ErrorPaymentCreateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter, which ErrorPaymentCreate to fetch.
     */
    where?: ErrorPaymentCreateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorPaymentCreates to fetch.
     */
    orderBy?: ErrorPaymentCreateOrderByWithRelationInput | ErrorPaymentCreateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ErrorPaymentCreates.
     */
    cursor?: ErrorPaymentCreateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorPaymentCreates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorPaymentCreates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ErrorPaymentCreates.
     */
    distinct?: ErrorPaymentCreateScalarFieldEnum | ErrorPaymentCreateScalarFieldEnum[]
  }


  /**
   * ErrorPaymentCreate findFirstOrThrow
   */
  export type ErrorPaymentCreateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter, which ErrorPaymentCreate to fetch.
     */
    where?: ErrorPaymentCreateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorPaymentCreates to fetch.
     */
    orderBy?: ErrorPaymentCreateOrderByWithRelationInput | ErrorPaymentCreateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ErrorPaymentCreates.
     */
    cursor?: ErrorPaymentCreateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorPaymentCreates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorPaymentCreates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ErrorPaymentCreates.
     */
    distinct?: ErrorPaymentCreateScalarFieldEnum | ErrorPaymentCreateScalarFieldEnum[]
  }


  /**
   * ErrorPaymentCreate findMany
   */
  export type ErrorPaymentCreateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter, which ErrorPaymentCreates to fetch.
     */
    where?: ErrorPaymentCreateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorPaymentCreates to fetch.
     */
    orderBy?: ErrorPaymentCreateOrderByWithRelationInput | ErrorPaymentCreateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ErrorPaymentCreates.
     */
    cursor?: ErrorPaymentCreateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorPaymentCreates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorPaymentCreates.
     */
    skip?: number
    distinct?: ErrorPaymentCreateScalarFieldEnum | ErrorPaymentCreateScalarFieldEnum[]
  }


  /**
   * ErrorPaymentCreate create
   */
  export type ErrorPaymentCreateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * The data needed to create a ErrorPaymentCreate.
     */
    data: XOR<ErrorPaymentCreateCreateInput, ErrorPaymentCreateUncheckedCreateInput>
  }


  /**
   * ErrorPaymentCreate createMany
   */
  export type ErrorPaymentCreateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ErrorPaymentCreates.
     */
    data: ErrorPaymentCreateCreateManyInput | ErrorPaymentCreateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ErrorPaymentCreate update
   */
  export type ErrorPaymentCreateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * The data needed to update a ErrorPaymentCreate.
     */
    data: XOR<ErrorPaymentCreateUpdateInput, ErrorPaymentCreateUncheckedUpdateInput>
    /**
     * Choose, which ErrorPaymentCreate to update.
     */
    where: ErrorPaymentCreateWhereUniqueInput
  }


  /**
   * ErrorPaymentCreate updateMany
   */
  export type ErrorPaymentCreateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ErrorPaymentCreates.
     */
    data: XOR<ErrorPaymentCreateUpdateManyMutationInput, ErrorPaymentCreateUncheckedUpdateManyInput>
    /**
     * Filter which ErrorPaymentCreates to update
     */
    where?: ErrorPaymentCreateWhereInput
  }


  /**
   * ErrorPaymentCreate upsert
   */
  export type ErrorPaymentCreateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * The filter to search for the ErrorPaymentCreate to update in case it exists.
     */
    where: ErrorPaymentCreateWhereUniqueInput
    /**
     * In case the ErrorPaymentCreate found by the `where` argument doesn't exist, create a new ErrorPaymentCreate with this data.
     */
    create: XOR<ErrorPaymentCreateCreateInput, ErrorPaymentCreateUncheckedCreateInput>
    /**
     * In case the ErrorPaymentCreate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ErrorPaymentCreateUpdateInput, ErrorPaymentCreateUncheckedUpdateInput>
  }


  /**
   * ErrorPaymentCreate delete
   */
  export type ErrorPaymentCreateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
    /**
     * Filter which ErrorPaymentCreate to delete.
     */
    where: ErrorPaymentCreateWhereUniqueInput
  }


  /**
   * ErrorPaymentCreate deleteMany
   */
  export type ErrorPaymentCreateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ErrorPaymentCreates to delete
     */
    where?: ErrorPaymentCreateWhereInput
  }


  /**
   * ErrorPaymentCreate without action
   */
  export type ErrorPaymentCreateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorPaymentCreate
     */
    select?: ErrorPaymentCreateSelect<ExtArgs> | null
  }



  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
    gift: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: bigint | null
    gift: bigint | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string | null
    activityType: string | null
    metadata: string | null
    card_uid: string | null
    type: string | null
    charge_source: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string | null
    activityType: string | null
    metadata: string | null
    card_uid: string | null
    type: string | null
    charge_source: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userUid: number
    regionUid: number
    created_at: number
    regionUserOwner: number
    method: number
    amount: number
    gift: number
    trade_no: number
    code_url: number
    invoiced_at: number
    remark: number
    message: number
    activityType: number
    metadata: number
    card_uid: number
    type: number
    charge_source: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    activityType?: true
    metadata?: true
    card_uid?: true
    type?: true
    charge_source?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    activityType?: true
    metadata?: true
    card_uid?: true
    type?: true
    charge_source?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    message?: true
    activityType?: true
    metadata?: true
    card_uid?: true
    type?: true
    charge_source?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    userUid: string
    regionUid: string
    created_at: Date
    regionUserOwner: string
    method: string
    amount: bigint
    gift: bigint | null
    trade_no: string
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    message: string
    activityType: string | null
    metadata: string | null
    card_uid: string | null
    type: string | null
    charge_source: string | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    message?: boolean
    activityType?: boolean
    metadata?: boolean
    card_uid?: boolean
    type?: boolean
    charge_source?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    message?: boolean
    activityType?: boolean
    metadata?: boolean
    card_uid?: boolean
    type?: boolean
    charge_source?: boolean
  }


  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      regionUid: string
      created_at: Date
      regionUserOwner: string
      method: string
      amount: bigint
      gift: bigint | null
      trade_no: string
      code_url: string | null
      invoiced_at: boolean | null
      remark: string | null
      message: string
      activityType: string | null
      metadata: string | null
      card_uid: string | null
      type: string | null
      charge_source: string | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }


  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly userUid: FieldRef<"Payment", 'String'>
    readonly regionUid: FieldRef<"Payment", 'String'>
    readonly created_at: FieldRef<"Payment", 'DateTime'>
    readonly regionUserOwner: FieldRef<"Payment", 'String'>
    readonly method: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'BigInt'>
    readonly gift: FieldRef<"Payment", 'BigInt'>
    readonly trade_no: FieldRef<"Payment", 'String'>
    readonly code_url: FieldRef<"Payment", 'String'>
    readonly invoiced_at: FieldRef<"Payment", 'Boolean'>
    readonly remark: FieldRef<"Payment", 'String'>
    readonly message: FieldRef<"Payment", 'String'>
    readonly activityType: FieldRef<"Payment", 'String'>
    readonly metadata: FieldRef<"Payment", 'String'>
    readonly card_uid: FieldRef<"Payment", 'String'>
    readonly type: FieldRef<"Payment", 'String'>
    readonly charge_source: FieldRef<"Payment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    uid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarUri: string | null
    nickname: string | null
    id: string | null
    name: string | null
    status: $Enums.UserStatus | null
  }

  export type UserMaxAggregateOutputType = {
    uid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarUri: string | null
    nickname: string | null
    id: string | null
    name: string | null
    status: $Enums.UserStatus | null
  }

  export type UserCountAggregateOutputType = {
    uid: number
    createdAt: number
    updatedAt: number
    avatarUri: number
    nickname: number
    id: number
    name: number
    status: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    uid?: true
    createdAt?: true
    updatedAt?: true
    avatarUri?: true
    nickname?: true
    id?: true
    name?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    uid?: true
    createdAt?: true
    updatedAt?: true
    avatarUri?: true
    nickname?: true
    id?: true
    name?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    uid?: true
    createdAt?: true
    updatedAt?: true
    avatarUri?: true
    nickname?: true
    id?: true
    name?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    uid: string
    createdAt: Date
    updatedAt: Date
    avatarUri: string
    nickname: string
    id: string
    name: string
    status: $Enums.UserStatus
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarUri?: boolean
    nickname?: boolean
    id?: boolean
    name?: boolean
    status?: boolean
    oauthProvider?: boolean | User$oauthProviderArgs<ExtArgs>
    userTasks?: boolean | User$userTasksArgs<ExtArgs>
    userInfo?: boolean | User$userInfoArgs<ExtArgs>
    workspaceUsage?: boolean | User$workspaceUsageArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    uid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarUri?: boolean
    nickname?: boolean
    id?: boolean
    name?: boolean
    status?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthProvider?: boolean | User$oauthProviderArgs<ExtArgs>
    userTasks?: boolean | User$userTasksArgs<ExtArgs>
    userInfo?: boolean | User$userInfoArgs<ExtArgs>
    workspaceUsage?: boolean | User$workspaceUsageArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      oauthProvider: Prisma.$OauthProviderPayload<ExtArgs>[]
      userTasks: Prisma.$UserTaskPayload<ExtArgs>[]
      userInfo: Prisma.$UserInfoPayload<ExtArgs> | null
      workspaceUsage: Prisma.$WorkspaceUsagePayload<ExtArgs>[]
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      uid: string
      createdAt: Date
      updatedAt: Date
      avatarUri: string
      nickname: string
      id: string
      name: string
      status: $Enums.UserStatus
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const userWithUidOnly = await prisma.user.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    oauthProvider<T extends User$oauthProviderArgs<ExtArgs> = {}>(args?: Subset<T, User$oauthProviderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthProviderPayload<ExtArgs>, T, 'findMany'> | Null>;

    userTasks<T extends User$userTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$userTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findMany'> | Null>;

    userInfo<T extends User$userInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$userInfoArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    workspaceUsage<T extends User$workspaceUsageArgs<ExtArgs> = {}>(args?: Subset<T, User$workspaceUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findMany'> | Null>;

    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly uid: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly avatarUri: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'UserStatus'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.oauthProvider
   */
  export type User$oauthProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthProvider
     */
    select?: OauthProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OauthProviderInclude<ExtArgs> | null
    where?: OauthProviderWhereInput
    orderBy?: OauthProviderOrderByWithRelationInput | OauthProviderOrderByWithRelationInput[]
    cursor?: OauthProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthProviderScalarFieldEnum | OauthProviderScalarFieldEnum[]
  }


  /**
   * User.userTasks
   */
  export type User$userTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    where?: UserTaskWhereInput
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    cursor?: UserTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTaskScalarFieldEnum | UserTaskScalarFieldEnum[]
  }


  /**
   * User.userInfo
   */
  export type User$userInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    where?: UserInfoWhereInput
  }


  /**
   * User.workspaceUsage
   */
  export type User$workspaceUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    where?: WorkspaceUsageWhereInput
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    cursor?: WorkspaceUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceUsageScalarFieldEnum | WorkspaceUsageScalarFieldEnum[]
  }


  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model InviteReward
   */

  export type AggregateInviteReward = {
    _count: InviteRewardCountAggregateOutputType | null
    _avg: InviteRewardAvgAggregateOutputType | null
    _sum: InviteRewardSumAggregateOutputType | null
    _min: InviteRewardMinAggregateOutputType | null
    _max: InviteRewardMaxAggregateOutputType | null
  }

  export type InviteRewardAvgAggregateOutputType = {
    payment_amount: number | null
    reward_amount: number | null
  }

  export type InviteRewardSumAggregateOutputType = {
    payment_amount: bigint | null
    reward_amount: bigint | null
  }

  export type InviteRewardMinAggregateOutputType = {
    payment_id: string | null
    userUid: string | null
    created_at: Date | null
    payment_amount: bigint | null
    reward_amount: bigint | null
    inviteFrom: string | null
  }

  export type InviteRewardMaxAggregateOutputType = {
    payment_id: string | null
    userUid: string | null
    created_at: Date | null
    payment_amount: bigint | null
    reward_amount: bigint | null
    inviteFrom: string | null
  }

  export type InviteRewardCountAggregateOutputType = {
    payment_id: number
    userUid: number
    created_at: number
    payment_amount: number
    reward_amount: number
    inviteFrom: number
    _all: number
  }


  export type InviteRewardAvgAggregateInputType = {
    payment_amount?: true
    reward_amount?: true
  }

  export type InviteRewardSumAggregateInputType = {
    payment_amount?: true
    reward_amount?: true
  }

  export type InviteRewardMinAggregateInputType = {
    payment_id?: true
    userUid?: true
    created_at?: true
    payment_amount?: true
    reward_amount?: true
    inviteFrom?: true
  }

  export type InviteRewardMaxAggregateInputType = {
    payment_id?: true
    userUid?: true
    created_at?: true
    payment_amount?: true
    reward_amount?: true
    inviteFrom?: true
  }

  export type InviteRewardCountAggregateInputType = {
    payment_id?: true
    userUid?: true
    created_at?: true
    payment_amount?: true
    reward_amount?: true
    inviteFrom?: true
    _all?: true
  }

  export type InviteRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InviteReward to aggregate.
     */
    where?: InviteRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteRewards to fetch.
     */
    orderBy?: InviteRewardOrderByWithRelationInput | InviteRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InviteRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InviteRewards
    **/
    _count?: true | InviteRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteRewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteRewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteRewardMaxAggregateInputType
  }

  export type GetInviteRewardAggregateType<T extends InviteRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateInviteReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInviteReward[P]>
      : GetScalarType<T[P], AggregateInviteReward[P]>
  }




  export type InviteRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteRewardWhereInput
    orderBy?: InviteRewardOrderByWithAggregationInput | InviteRewardOrderByWithAggregationInput[]
    by: InviteRewardScalarFieldEnum[] | InviteRewardScalarFieldEnum
    having?: InviteRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteRewardCountAggregateInputType | true
    _avg?: InviteRewardAvgAggregateInputType
    _sum?: InviteRewardSumAggregateInputType
    _min?: InviteRewardMinAggregateInputType
    _max?: InviteRewardMaxAggregateInputType
  }

  export type InviteRewardGroupByOutputType = {
    payment_id: string
    userUid: string
    created_at: Date
    payment_amount: bigint
    reward_amount: bigint
    inviteFrom: string
    _count: InviteRewardCountAggregateOutputType | null
    _avg: InviteRewardAvgAggregateOutputType | null
    _sum: InviteRewardSumAggregateOutputType | null
    _min: InviteRewardMinAggregateOutputType | null
    _max: InviteRewardMaxAggregateOutputType | null
  }

  type GetInviteRewardGroupByPayload<T extends InviteRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InviteRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteRewardGroupByOutputType[P]>
            : GetScalarType<T[P], InviteRewardGroupByOutputType[P]>
        }
      >
    >


  export type InviteRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    userUid?: boolean
    created_at?: boolean
    payment_amount?: boolean
    reward_amount?: boolean
    inviteFrom?: boolean
  }, ExtArgs["result"]["inviteReward"]>

  export type InviteRewardSelectScalar = {
    payment_id?: boolean
    userUid?: boolean
    created_at?: boolean
    payment_amount?: boolean
    reward_amount?: boolean
    inviteFrom?: boolean
  }


  export type $InviteRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InviteReward"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      payment_id: string
      userUid: string
      created_at: Date
      payment_amount: bigint
      reward_amount: bigint
      inviteFrom: string
    }, ExtArgs["result"]["inviteReward"]>
    composites: {}
  }


  type InviteRewardGetPayload<S extends boolean | null | undefined | InviteRewardDefaultArgs> = $Result.GetResult<Prisma.$InviteRewardPayload, S>

  type InviteRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InviteRewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InviteRewardCountAggregateInputType | true
    }

  export interface InviteRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InviteReward'], meta: { name: 'InviteReward' } }
    /**
     * Find zero or one InviteReward that matches the filter.
     * @param {InviteRewardFindUniqueArgs} args - Arguments to find a InviteReward
     * @example
     * // Get one InviteReward
     * const inviteReward = await prisma.inviteReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InviteRewardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardFindUniqueArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InviteReward that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InviteRewardFindUniqueOrThrowArgs} args - Arguments to find a InviteReward
     * @example
     * // Get one InviteReward
     * const inviteReward = await prisma.inviteReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InviteRewardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InviteReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardFindFirstArgs} args - Arguments to find a InviteReward
     * @example
     * // Get one InviteReward
     * const inviteReward = await prisma.inviteReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InviteRewardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardFindFirstArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InviteReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardFindFirstOrThrowArgs} args - Arguments to find a InviteReward
     * @example
     * // Get one InviteReward
     * const inviteReward = await prisma.inviteReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InviteRewardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InviteRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InviteRewards
     * const inviteRewards = await prisma.inviteReward.findMany()
     * 
     * // Get first 10 InviteRewards
     * const inviteRewards = await prisma.inviteReward.findMany({ take: 10 })
     * 
     * // Only select the `payment_id`
     * const inviteRewardWithPayment_idOnly = await prisma.inviteReward.findMany({ select: { payment_id: true } })
     * 
    **/
    findMany<T extends InviteRewardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InviteReward.
     * @param {InviteRewardCreateArgs} args - Arguments to create a InviteReward.
     * @example
     * // Create one InviteReward
     * const InviteReward = await prisma.inviteReward.create({
     *   data: {
     *     // ... data to create a InviteReward
     *   }
     * })
     * 
    **/
    create<T extends InviteRewardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardCreateArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InviteRewards.
     *     @param {InviteRewardCreateManyArgs} args - Arguments to create many InviteRewards.
     *     @example
     *     // Create many InviteRewards
     *     const inviteReward = await prisma.inviteReward.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InviteRewardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InviteReward.
     * @param {InviteRewardDeleteArgs} args - Arguments to delete one InviteReward.
     * @example
     * // Delete one InviteReward
     * const InviteReward = await prisma.inviteReward.delete({
     *   where: {
     *     // ... filter to delete one InviteReward
     *   }
     * })
     * 
    **/
    delete<T extends InviteRewardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardDeleteArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InviteReward.
     * @param {InviteRewardUpdateArgs} args - Arguments to update one InviteReward.
     * @example
     * // Update one InviteReward
     * const inviteReward = await prisma.inviteReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InviteRewardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardUpdateArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InviteRewards.
     * @param {InviteRewardDeleteManyArgs} args - Arguments to filter InviteRewards to delete.
     * @example
     * // Delete a few InviteRewards
     * const { count } = await prisma.inviteReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InviteRewardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InviteRewardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InviteRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InviteRewards
     * const inviteReward = await prisma.inviteReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InviteRewardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InviteReward.
     * @param {InviteRewardUpsertArgs} args - Arguments to update or create a InviteReward.
     * @example
     * // Update or create a InviteReward
     * const inviteReward = await prisma.inviteReward.upsert({
     *   create: {
     *     // ... data to create a InviteReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InviteReward we want to update
     *   }
     * })
    **/
    upsert<T extends InviteRewardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InviteRewardUpsertArgs<ExtArgs>>
    ): Prisma__InviteRewardClient<$Result.GetResult<Prisma.$InviteRewardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InviteRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardCountArgs} args - Arguments to filter InviteRewards to count.
     * @example
     * // Count the number of InviteRewards
     * const count = await prisma.inviteReward.count({
     *   where: {
     *     // ... the filter for the InviteRewards we want to count
     *   }
     * })
    **/
    count<T extends InviteRewardCountArgs>(
      args?: Subset<T, InviteRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InviteReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteRewardAggregateArgs>(args: Subset<T, InviteRewardAggregateArgs>): Prisma.PrismaPromise<GetInviteRewardAggregateType<T>>

    /**
     * Group by InviteReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteRewardGroupByArgs['orderBy'] }
        : { orderBy?: InviteRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InviteReward model
   */
  readonly fields: InviteRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InviteReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InviteRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InviteReward model
   */ 
  interface InviteRewardFieldRefs {
    readonly payment_id: FieldRef<"InviteReward", 'String'>
    readonly userUid: FieldRef<"InviteReward", 'String'>
    readonly created_at: FieldRef<"InviteReward", 'DateTime'>
    readonly payment_amount: FieldRef<"InviteReward", 'BigInt'>
    readonly reward_amount: FieldRef<"InviteReward", 'BigInt'>
    readonly inviteFrom: FieldRef<"InviteReward", 'String'>
  }
    

  // Custom InputTypes

  /**
   * InviteReward findUnique
   */
  export type InviteRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter, which InviteReward to fetch.
     */
    where: InviteRewardWhereUniqueInput
  }


  /**
   * InviteReward findUniqueOrThrow
   */
  export type InviteRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter, which InviteReward to fetch.
     */
    where: InviteRewardWhereUniqueInput
  }


  /**
   * InviteReward findFirst
   */
  export type InviteRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter, which InviteReward to fetch.
     */
    where?: InviteRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteRewards to fetch.
     */
    orderBy?: InviteRewardOrderByWithRelationInput | InviteRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InviteRewards.
     */
    cursor?: InviteRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InviteRewards.
     */
    distinct?: InviteRewardScalarFieldEnum | InviteRewardScalarFieldEnum[]
  }


  /**
   * InviteReward findFirstOrThrow
   */
  export type InviteRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter, which InviteReward to fetch.
     */
    where?: InviteRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteRewards to fetch.
     */
    orderBy?: InviteRewardOrderByWithRelationInput | InviteRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InviteRewards.
     */
    cursor?: InviteRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InviteRewards.
     */
    distinct?: InviteRewardScalarFieldEnum | InviteRewardScalarFieldEnum[]
  }


  /**
   * InviteReward findMany
   */
  export type InviteRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter, which InviteRewards to fetch.
     */
    where?: InviteRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteRewards to fetch.
     */
    orderBy?: InviteRewardOrderByWithRelationInput | InviteRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InviteRewards.
     */
    cursor?: InviteRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteRewards.
     */
    skip?: number
    distinct?: InviteRewardScalarFieldEnum | InviteRewardScalarFieldEnum[]
  }


  /**
   * InviteReward create
   */
  export type InviteRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * The data needed to create a InviteReward.
     */
    data: XOR<InviteRewardCreateInput, InviteRewardUncheckedCreateInput>
  }


  /**
   * InviteReward createMany
   */
  export type InviteRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InviteRewards.
     */
    data: InviteRewardCreateManyInput | InviteRewardCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InviteReward update
   */
  export type InviteRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * The data needed to update a InviteReward.
     */
    data: XOR<InviteRewardUpdateInput, InviteRewardUncheckedUpdateInput>
    /**
     * Choose, which InviteReward to update.
     */
    where: InviteRewardWhereUniqueInput
  }


  /**
   * InviteReward updateMany
   */
  export type InviteRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InviteRewards.
     */
    data: XOR<InviteRewardUpdateManyMutationInput, InviteRewardUncheckedUpdateManyInput>
    /**
     * Filter which InviteRewards to update
     */
    where?: InviteRewardWhereInput
  }


  /**
   * InviteReward upsert
   */
  export type InviteRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * The filter to search for the InviteReward to update in case it exists.
     */
    where: InviteRewardWhereUniqueInput
    /**
     * In case the InviteReward found by the `where` argument doesn't exist, create a new InviteReward with this data.
     */
    create: XOR<InviteRewardCreateInput, InviteRewardUncheckedCreateInput>
    /**
     * In case the InviteReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InviteRewardUpdateInput, InviteRewardUncheckedUpdateInput>
  }


  /**
   * InviteReward delete
   */
  export type InviteRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
    /**
     * Filter which InviteReward to delete.
     */
    where: InviteRewardWhereUniqueInput
  }


  /**
   * InviteReward deleteMany
   */
  export type InviteRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InviteRewards to delete
     */
    where?: InviteRewardWhereInput
  }


  /**
   * InviteReward without action
   */
  export type InviteRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteReward
     */
    select?: InviteRewardSelect<ExtArgs> | null
  }



  /**
   * Model UserSemChannel
   */

  export type AggregateUserSemChannel = {
    _count: UserSemChannelCountAggregateOutputType | null
    _min: UserSemChannelMinAggregateOutputType | null
    _max: UserSemChannelMaxAggregateOutputType | null
  }

  export type UserSemChannelMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    channel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSemChannelMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    channel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSemChannelCountAggregateOutputType = {
    id: number
    userUid: number
    channel: number
    createdAt: number
    updatedAt: number
    additionalInfo: number
    _all: number
  }


  export type UserSemChannelMinAggregateInputType = {
    id?: true
    userUid?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSemChannelMaxAggregateInputType = {
    id?: true
    userUid?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSemChannelCountAggregateInputType = {
    id?: true
    userUid?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
    additionalInfo?: true
    _all?: true
  }

  export type UserSemChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSemChannel to aggregate.
     */
    where?: UserSemChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSemChannels to fetch.
     */
    orderBy?: UserSemChannelOrderByWithRelationInput | UserSemChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSemChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSemChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSemChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSemChannels
    **/
    _count?: true | UserSemChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSemChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSemChannelMaxAggregateInputType
  }

  export type GetUserSemChannelAggregateType<T extends UserSemChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSemChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSemChannel[P]>
      : GetScalarType<T[P], AggregateUserSemChannel[P]>
  }




  export type UserSemChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSemChannelWhereInput
    orderBy?: UserSemChannelOrderByWithAggregationInput | UserSemChannelOrderByWithAggregationInput[]
    by: UserSemChannelScalarFieldEnum[] | UserSemChannelScalarFieldEnum
    having?: UserSemChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSemChannelCountAggregateInputType | true
    _min?: UserSemChannelMinAggregateInputType
    _max?: UserSemChannelMaxAggregateInputType
  }

  export type UserSemChannelGroupByOutputType = {
    id: string
    userUid: string
    channel: string
    createdAt: Date
    updatedAt: Date
    additionalInfo: JsonValue | null
    _count: UserSemChannelCountAggregateOutputType | null
    _min: UserSemChannelMinAggregateOutputType | null
    _max: UserSemChannelMaxAggregateOutputType | null
  }

  type GetUserSemChannelGroupByPayload<T extends UserSemChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSemChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSemChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSemChannelGroupByOutputType[P]>
            : GetScalarType<T[P], UserSemChannelGroupByOutputType[P]>
        }
      >
    >


  export type UserSemChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    channel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    additionalInfo?: boolean
  }, ExtArgs["result"]["userSemChannel"]>

  export type UserSemChannelSelectScalar = {
    id?: boolean
    userUid?: boolean
    channel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    additionalInfo?: boolean
  }


  export type $UserSemChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSemChannel"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      channel: string
      createdAt: Date
      updatedAt: Date
      additionalInfo: Prisma.JsonValue | null
    }, ExtArgs["result"]["userSemChannel"]>
    composites: {}
  }


  type UserSemChannelGetPayload<S extends boolean | null | undefined | UserSemChannelDefaultArgs> = $Result.GetResult<Prisma.$UserSemChannelPayload, S>

  type UserSemChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSemChannelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSemChannelCountAggregateInputType | true
    }

  export interface UserSemChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSemChannel'], meta: { name: 'UserSemChannel' } }
    /**
     * Find zero or one UserSemChannel that matches the filter.
     * @param {UserSemChannelFindUniqueArgs} args - Arguments to find a UserSemChannel
     * @example
     * // Get one UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserSemChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserSemChannel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserSemChannelFindUniqueOrThrowArgs} args - Arguments to find a UserSemChannel
     * @example
     * // Get one UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserSemChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserSemChannel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelFindFirstArgs} args - Arguments to find a UserSemChannel
     * @example
     * // Get one UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserSemChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelFindFirstArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserSemChannel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelFindFirstOrThrowArgs} args - Arguments to find a UserSemChannel
     * @example
     * // Get one UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserSemChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserSemChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSemChannels
     * const userSemChannels = await prisma.userSemChannel.findMany()
     * 
     * // Get first 10 UserSemChannels
     * const userSemChannels = await prisma.userSemChannel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSemChannelWithIdOnly = await prisma.userSemChannel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserSemChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserSemChannel.
     * @param {UserSemChannelCreateArgs} args - Arguments to create a UserSemChannel.
     * @example
     * // Create one UserSemChannel
     * const UserSemChannel = await prisma.userSemChannel.create({
     *   data: {
     *     // ... data to create a UserSemChannel
     *   }
     * })
     * 
    **/
    create<T extends UserSemChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelCreateArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserSemChannels.
     *     @param {UserSemChannelCreateManyArgs} args - Arguments to create many UserSemChannels.
     *     @example
     *     // Create many UserSemChannels
     *     const userSemChannel = await prisma.userSemChannel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserSemChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserSemChannel.
     * @param {UserSemChannelDeleteArgs} args - Arguments to delete one UserSemChannel.
     * @example
     * // Delete one UserSemChannel
     * const UserSemChannel = await prisma.userSemChannel.delete({
     *   where: {
     *     // ... filter to delete one UserSemChannel
     *   }
     * })
     * 
    **/
    delete<T extends UserSemChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelDeleteArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserSemChannel.
     * @param {UserSemChannelUpdateArgs} args - Arguments to update one UserSemChannel.
     * @example
     * // Update one UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserSemChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelUpdateArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserSemChannels.
     * @param {UserSemChannelDeleteManyArgs} args - Arguments to filter UserSemChannels to delete.
     * @example
     * // Delete a few UserSemChannels
     * const { count } = await prisma.userSemChannel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserSemChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSemChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSemChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSemChannels
     * const userSemChannel = await prisma.userSemChannel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserSemChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSemChannel.
     * @param {UserSemChannelUpsertArgs} args - Arguments to update or create a UserSemChannel.
     * @example
     * // Update or create a UserSemChannel
     * const userSemChannel = await prisma.userSemChannel.upsert({
     *   create: {
     *     // ... data to create a UserSemChannel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSemChannel we want to update
     *   }
     * })
    **/
    upsert<T extends UserSemChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserSemChannelUpsertArgs<ExtArgs>>
    ): Prisma__UserSemChannelClient<$Result.GetResult<Prisma.$UserSemChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserSemChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelCountArgs} args - Arguments to filter UserSemChannels to count.
     * @example
     * // Count the number of UserSemChannels
     * const count = await prisma.userSemChannel.count({
     *   where: {
     *     // ... the filter for the UserSemChannels we want to count
     *   }
     * })
    **/
    count<T extends UserSemChannelCountArgs>(
      args?: Subset<T, UserSemChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSemChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSemChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSemChannelAggregateArgs>(args: Subset<T, UserSemChannelAggregateArgs>): Prisma.PrismaPromise<GetUserSemChannelAggregateType<T>>

    /**
     * Group by UserSemChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSemChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSemChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSemChannelGroupByArgs['orderBy'] }
        : { orderBy?: UserSemChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSemChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSemChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSemChannel model
   */
  readonly fields: UserSemChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSemChannel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSemChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserSemChannel model
   */ 
  interface UserSemChannelFieldRefs {
    readonly id: FieldRef<"UserSemChannel", 'String'>
    readonly userUid: FieldRef<"UserSemChannel", 'String'>
    readonly channel: FieldRef<"UserSemChannel", 'String'>
    readonly createdAt: FieldRef<"UserSemChannel", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSemChannel", 'DateTime'>
    readonly additionalInfo: FieldRef<"UserSemChannel", 'Json'>
  }
    

  // Custom InputTypes

  /**
   * UserSemChannel findUnique
   */
  export type UserSemChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter, which UserSemChannel to fetch.
     */
    where: UserSemChannelWhereUniqueInput
  }


  /**
   * UserSemChannel findUniqueOrThrow
   */
  export type UserSemChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter, which UserSemChannel to fetch.
     */
    where: UserSemChannelWhereUniqueInput
  }


  /**
   * UserSemChannel findFirst
   */
  export type UserSemChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter, which UserSemChannel to fetch.
     */
    where?: UserSemChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSemChannels to fetch.
     */
    orderBy?: UserSemChannelOrderByWithRelationInput | UserSemChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSemChannels.
     */
    cursor?: UserSemChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSemChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSemChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSemChannels.
     */
    distinct?: UserSemChannelScalarFieldEnum | UserSemChannelScalarFieldEnum[]
  }


  /**
   * UserSemChannel findFirstOrThrow
   */
  export type UserSemChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter, which UserSemChannel to fetch.
     */
    where?: UserSemChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSemChannels to fetch.
     */
    orderBy?: UserSemChannelOrderByWithRelationInput | UserSemChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSemChannels.
     */
    cursor?: UserSemChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSemChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSemChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSemChannels.
     */
    distinct?: UserSemChannelScalarFieldEnum | UserSemChannelScalarFieldEnum[]
  }


  /**
   * UserSemChannel findMany
   */
  export type UserSemChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter, which UserSemChannels to fetch.
     */
    where?: UserSemChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSemChannels to fetch.
     */
    orderBy?: UserSemChannelOrderByWithRelationInput | UserSemChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSemChannels.
     */
    cursor?: UserSemChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSemChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSemChannels.
     */
    skip?: number
    distinct?: UserSemChannelScalarFieldEnum | UserSemChannelScalarFieldEnum[]
  }


  /**
   * UserSemChannel create
   */
  export type UserSemChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * The data needed to create a UserSemChannel.
     */
    data: XOR<UserSemChannelCreateInput, UserSemChannelUncheckedCreateInput>
  }


  /**
   * UserSemChannel createMany
   */
  export type UserSemChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSemChannels.
     */
    data: UserSemChannelCreateManyInput | UserSemChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserSemChannel update
   */
  export type UserSemChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * The data needed to update a UserSemChannel.
     */
    data: XOR<UserSemChannelUpdateInput, UserSemChannelUncheckedUpdateInput>
    /**
     * Choose, which UserSemChannel to update.
     */
    where: UserSemChannelWhereUniqueInput
  }


  /**
   * UserSemChannel updateMany
   */
  export type UserSemChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSemChannels.
     */
    data: XOR<UserSemChannelUpdateManyMutationInput, UserSemChannelUncheckedUpdateManyInput>
    /**
     * Filter which UserSemChannels to update
     */
    where?: UserSemChannelWhereInput
  }


  /**
   * UserSemChannel upsert
   */
  export type UserSemChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * The filter to search for the UserSemChannel to update in case it exists.
     */
    where: UserSemChannelWhereUniqueInput
    /**
     * In case the UserSemChannel found by the `where` argument doesn't exist, create a new UserSemChannel with this data.
     */
    create: XOR<UserSemChannelCreateInput, UserSemChannelUncheckedCreateInput>
    /**
     * In case the UserSemChannel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSemChannelUpdateInput, UserSemChannelUncheckedUpdateInput>
  }


  /**
   * UserSemChannel delete
   */
  export type UserSemChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
    /**
     * Filter which UserSemChannel to delete.
     */
    where: UserSemChannelWhereUniqueInput
  }


  /**
   * UserSemChannel deleteMany
   */
  export type UserSemChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSemChannels to delete
     */
    where?: UserSemChannelWhereInput
  }


  /**
   * UserSemChannel without action
   */
  export type UserSemChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSemChannel
     */
    select?: UserSemChannelSelect<ExtArgs> | null
  }



  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    reward: number | null
    order: number | null
  }

  export type TaskSumAggregateOutputType = {
    reward: bigint | null
    order: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    reward: bigint | null
    order: number | null
    isActive: boolean | null
    isNewUserTask: boolean | null
    taskType: $Enums.TaskType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    reward: bigint | null
    order: number | null
    isActive: boolean | null
    isNewUserTask: boolean | null
    taskType: $Enums.TaskType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    reward: number
    order: number
    isActive: number
    isNewUserTask: number
    taskType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    reward?: true
    order?: true
  }

  export type TaskSumAggregateInputType = {
    reward?: true
    order?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    reward?: true
    order?: true
    isActive?: true
    isNewUserTask?: true
    taskType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    reward?: true
    order?: true
    isActive?: true
    isNewUserTask?: true
    taskType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    reward?: true
    order?: true
    isActive?: true
    isNewUserTask?: true
    taskType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string
    reward: bigint
    order: number
    isActive: boolean
    isNewUserTask: boolean
    taskType: $Enums.TaskType
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    reward?: boolean
    order?: boolean
    isActive?: boolean
    isNewUserTask?: boolean
    taskType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userTasks?: boolean | Task$userTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    reward?: boolean
    order?: boolean
    isActive?: boolean
    isNewUserTask?: boolean
    taskType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTasks?: boolean | Task$userTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      userTasks: Prisma.$UserTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      reward: bigint
      order: number
      isActive: boolean
      isNewUserTask: boolean
      taskType: $Enums.TaskType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }


  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends TaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends TaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends TaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>
    ): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userTasks<T extends Task$userTasksArgs<ExtArgs> = {}>(args?: Subset<T, Task$userTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly reward: FieldRef<"Task", 'BigInt'>
    readonly order: FieldRef<"Task", 'Int'>
    readonly isActive: FieldRef<"Task", 'Boolean'>
    readonly isNewUserTask: FieldRef<"Task", 'Boolean'>
    readonly taskType: FieldRef<"Task", 'TaskType'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }


  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }


  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }


  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }


  /**
   * Task.userTasks
   */
  export type Task$userTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    where?: UserTaskWhereInput
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    cursor?: UserTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTaskScalarFieldEnum | UserTaskScalarFieldEnum[]
  }


  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
  }



  /**
   * Model UserTask
   */

  export type AggregateUserTask = {
    _count: UserTaskCountAggregateOutputType | null
    _min: UserTaskMinAggregateOutputType | null
    _max: UserTaskMaxAggregateOutputType | null
  }

  export type UserTaskMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    taskId: string | null
    status: $Enums.TaskStatus | null
    rewardStatus: $Enums.TaskStatus | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTaskMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    taskId: string | null
    status: $Enums.TaskStatus | null
    rewardStatus: $Enums.TaskStatus | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTaskCountAggregateOutputType = {
    id: number
    userUid: number
    taskId: number
    status: number
    rewardStatus: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTaskMinAggregateInputType = {
    id?: true
    userUid?: true
    taskId?: true
    status?: true
    rewardStatus?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTaskMaxAggregateInputType = {
    id?: true
    userUid?: true
    taskId?: true
    status?: true
    rewardStatus?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTaskCountAggregateInputType = {
    id?: true
    userUid?: true
    taskId?: true
    status?: true
    rewardStatus?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTask to aggregate.
     */
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     */
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTasks
    **/
    _count?: true | UserTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTaskMaxAggregateInputType
  }

  export type GetUserTaskAggregateType<T extends UserTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTask[P]>
      : GetScalarType<T[P], AggregateUserTask[P]>
  }




  export type UserTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTaskWhereInput
    orderBy?: UserTaskOrderByWithAggregationInput | UserTaskOrderByWithAggregationInput[]
    by: UserTaskScalarFieldEnum[] | UserTaskScalarFieldEnum
    having?: UserTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTaskCountAggregateInputType | true
    _min?: UserTaskMinAggregateInputType
    _max?: UserTaskMaxAggregateInputType
  }

  export type UserTaskGroupByOutputType = {
    id: string
    userUid: string
    taskId: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserTaskCountAggregateOutputType | null
    _min: UserTaskMinAggregateOutputType | null
    _max: UserTaskMaxAggregateOutputType | null
  }

  type GetUserTaskGroupByPayload<T extends UserTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTaskGroupByOutputType[P]>
            : GetScalarType<T[P], UserTaskGroupByOutputType[P]>
        }
      >
    >


  export type UserTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    taskId?: boolean
    status?: boolean
    rewardStatus?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTask"]>

  export type UserTaskSelectScalar = {
    id?: boolean
    userUid?: boolean
    taskId?: boolean
    status?: boolean
    rewardStatus?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }


  export type $UserTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTask"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      taskId: string
      status: $Enums.TaskStatus
      rewardStatus: $Enums.TaskStatus
      completedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userTask"]>
    composites: {}
  }


  type UserTaskGetPayload<S extends boolean | null | undefined | UserTaskDefaultArgs> = $Result.GetResult<Prisma.$UserTaskPayload, S>

  type UserTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserTaskCountAggregateInputType | true
    }

  export interface UserTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTask'], meta: { name: 'UserTask' } }
    /**
     * Find zero or one UserTask that matches the filter.
     * @param {UserTaskFindUniqueArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTaskFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskFindUniqueArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserTask that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserTaskFindUniqueOrThrowArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserTaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindFirstArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTaskFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskFindFirstArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindFirstOrThrowArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserTaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTasks
     * const userTasks = await prisma.userTask.findMany()
     * 
     * // Get first 10 UserTasks
     * const userTasks = await prisma.userTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTaskWithIdOnly = await prisma.userTask.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserTaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserTask.
     * @param {UserTaskCreateArgs} args - Arguments to create a UserTask.
     * @example
     * // Create one UserTask
     * const UserTask = await prisma.userTask.create({
     *   data: {
     *     // ... data to create a UserTask
     *   }
     * })
     * 
    **/
    create<T extends UserTaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskCreateArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserTasks.
     *     @param {UserTaskCreateManyArgs} args - Arguments to create many UserTasks.
     *     @example
     *     // Create many UserTasks
     *     const userTask = await prisma.userTask.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserTaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTask.
     * @param {UserTaskDeleteArgs} args - Arguments to delete one UserTask.
     * @example
     * // Delete one UserTask
     * const UserTask = await prisma.userTask.delete({
     *   where: {
     *     // ... filter to delete one UserTask
     *   }
     * })
     * 
    **/
    delete<T extends UserTaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskDeleteArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserTask.
     * @param {UserTaskUpdateArgs} args - Arguments to update one UserTask.
     * @example
     * // Update one UserTask
     * const userTask = await prisma.userTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskUpdateArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserTasks.
     * @param {UserTaskDeleteManyArgs} args - Arguments to filter UserTasks to delete.
     * @example
     * // Delete a few UserTasks
     * const { count } = await prisma.userTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTasks
     * const userTask = await prisma.userTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTask.
     * @param {UserTaskUpsertArgs} args - Arguments to update or create a UserTask.
     * @example
     * // Update or create a UserTask
     * const userTask = await prisma.userTask.upsert({
     *   create: {
     *     // ... data to create a UserTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTask we want to update
     *   }
     * })
    **/
    upsert<T extends UserTaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserTaskUpsertArgs<ExtArgs>>
    ): Prisma__UserTaskClient<$Result.GetResult<Prisma.$UserTaskPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskCountArgs} args - Arguments to filter UserTasks to count.
     * @example
     * // Count the number of UserTasks
     * const count = await prisma.userTask.count({
     *   where: {
     *     // ... the filter for the UserTasks we want to count
     *   }
     * })
    **/
    count<T extends UserTaskCountArgs>(
      args?: Subset<T, UserTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTaskAggregateArgs>(args: Subset<T, UserTaskAggregateArgs>): Prisma.PrismaPromise<GetUserTaskAggregateType<T>>

    /**
     * Group by UserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTaskGroupByArgs['orderBy'] }
        : { orderBy?: UserTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTask model
   */
  readonly fields: UserTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserTask model
   */ 
  interface UserTaskFieldRefs {
    readonly id: FieldRef<"UserTask", 'String'>
    readonly userUid: FieldRef<"UserTask", 'String'>
    readonly taskId: FieldRef<"UserTask", 'String'>
    readonly status: FieldRef<"UserTask", 'TaskStatus'>
    readonly rewardStatus: FieldRef<"UserTask", 'TaskStatus'>
    readonly completedAt: FieldRef<"UserTask", 'DateTime'>
    readonly createdAt: FieldRef<"UserTask", 'DateTime'>
    readonly updatedAt: FieldRef<"UserTask", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * UserTask findUnique
   */
  export type UserTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter, which UserTask to fetch.
     */
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask findUniqueOrThrow
   */
  export type UserTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter, which UserTask to fetch.
     */
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask findFirst
   */
  export type UserTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter, which UserTask to fetch.
     */
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     */
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTasks.
     */
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTasks.
     */
    distinct?: UserTaskScalarFieldEnum | UserTaskScalarFieldEnum[]
  }


  /**
   * UserTask findFirstOrThrow
   */
  export type UserTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter, which UserTask to fetch.
     */
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     */
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTasks.
     */
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTasks.
     */
    distinct?: UserTaskScalarFieldEnum | UserTaskScalarFieldEnum[]
  }


  /**
   * UserTask findMany
   */
  export type UserTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter, which UserTasks to fetch.
     */
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     */
    orderBy?: UserTaskOrderByWithRelationInput | UserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTasks.
     */
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     */
    skip?: number
    distinct?: UserTaskScalarFieldEnum | UserTaskScalarFieldEnum[]
  }


  /**
   * UserTask create
   */
  export type UserTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTask.
     */
    data: XOR<UserTaskCreateInput, UserTaskUncheckedCreateInput>
  }


  /**
   * UserTask createMany
   */
  export type UserTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTasks.
     */
    data: UserTaskCreateManyInput | UserTaskCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserTask update
   */
  export type UserTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTask.
     */
    data: XOR<UserTaskUpdateInput, UserTaskUncheckedUpdateInput>
    /**
     * Choose, which UserTask to update.
     */
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask updateMany
   */
  export type UserTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTasks.
     */
    data: XOR<UserTaskUpdateManyMutationInput, UserTaskUncheckedUpdateManyInput>
    /**
     * Filter which UserTasks to update
     */
    where?: UserTaskWhereInput
  }


  /**
   * UserTask upsert
   */
  export type UserTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTask to update in case it exists.
     */
    where: UserTaskWhereUniqueInput
    /**
     * In case the UserTask found by the `where` argument doesn't exist, create a new UserTask with this data.
     */
    create: XOR<UserTaskCreateInput, UserTaskUncheckedCreateInput>
    /**
     * In case the UserTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTaskUpdateInput, UserTaskUncheckedUpdateInput>
  }


  /**
   * UserTask delete
   */
  export type UserTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
    /**
     * Filter which UserTask to delete.
     */
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask deleteMany
   */
  export type UserTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTasks to delete
     */
    where?: UserTaskWhereInput
  }


  /**
   * UserTask without action
   */
  export type UserTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTask
     */
    select?: UserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTaskInclude<ExtArgs> | null
  }



  /**
   * Model CardInfo
   */

  export type AggregateCardInfo = {
    _count: CardInfoCountAggregateOutputType | null
    _min: CardInfoMinAggregateOutputType | null
    _max: CardInfoMaxAggregateOutputType | null
  }

  export type CardInfoMinAggregateOutputType = {
    id: string | null
    user_uid: string | null
    card_no: string | null
    card_brand: string | null
    card_token: string | null
    created_at: Date | null
    network_transaction_id: string | null
    default: boolean | null
    last_payment_status: string | null
  }

  export type CardInfoMaxAggregateOutputType = {
    id: string | null
    user_uid: string | null
    card_no: string | null
    card_brand: string | null
    card_token: string | null
    created_at: Date | null
    network_transaction_id: string | null
    default: boolean | null
    last_payment_status: string | null
  }

  export type CardInfoCountAggregateOutputType = {
    id: number
    user_uid: number
    card_no: number
    card_brand: number
    card_token: number
    created_at: number
    network_transaction_id: number
    default: number
    last_payment_status: number
    _all: number
  }


  export type CardInfoMinAggregateInputType = {
    id?: true
    user_uid?: true
    card_no?: true
    card_brand?: true
    card_token?: true
    created_at?: true
    network_transaction_id?: true
    default?: true
    last_payment_status?: true
  }

  export type CardInfoMaxAggregateInputType = {
    id?: true
    user_uid?: true
    card_no?: true
    card_brand?: true
    card_token?: true
    created_at?: true
    network_transaction_id?: true
    default?: true
    last_payment_status?: true
  }

  export type CardInfoCountAggregateInputType = {
    id?: true
    user_uid?: true
    card_no?: true
    card_brand?: true
    card_token?: true
    created_at?: true
    network_transaction_id?: true
    default?: true
    last_payment_status?: true
    _all?: true
  }

  export type CardInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardInfo to aggregate.
     */
    where?: CardInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardInfos to fetch.
     */
    orderBy?: CardInfoOrderByWithRelationInput | CardInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardInfos
    **/
    _count?: true | CardInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardInfoMaxAggregateInputType
  }

  export type GetCardInfoAggregateType<T extends CardInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateCardInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardInfo[P]>
      : GetScalarType<T[P], AggregateCardInfo[P]>
  }




  export type CardInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardInfoWhereInput
    orderBy?: CardInfoOrderByWithAggregationInput | CardInfoOrderByWithAggregationInput[]
    by: CardInfoScalarFieldEnum[] | CardInfoScalarFieldEnum
    having?: CardInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardInfoCountAggregateInputType | true
    _min?: CardInfoMinAggregateInputType
    _max?: CardInfoMaxAggregateInputType
  }

  export type CardInfoGroupByOutputType = {
    id: string
    user_uid: string
    card_no: string | null
    card_brand: string | null
    card_token: string | null
    created_at: Date | null
    network_transaction_id: string | null
    default: boolean | null
    last_payment_status: string | null
    _count: CardInfoCountAggregateOutputType | null
    _min: CardInfoMinAggregateOutputType | null
    _max: CardInfoMaxAggregateOutputType | null
  }

  type GetCardInfoGroupByPayload<T extends CardInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardInfoGroupByOutputType[P]>
            : GetScalarType<T[P], CardInfoGroupByOutputType[P]>
        }
      >
    >


  export type CardInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_uid?: boolean
    card_no?: boolean
    card_brand?: boolean
    card_token?: boolean
    created_at?: boolean
    network_transaction_id?: boolean
    default?: boolean
    last_payment_status?: boolean
  }, ExtArgs["result"]["cardInfo"]>

  export type CardInfoSelectScalar = {
    id?: boolean
    user_uid?: boolean
    card_no?: boolean
    card_brand?: boolean
    card_token?: boolean
    created_at?: boolean
    network_transaction_id?: boolean
    default?: boolean
    last_payment_status?: boolean
  }


  export type $CardInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardInfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_uid: string
      card_no: string | null
      card_brand: string | null
      card_token: string | null
      created_at: Date | null
      network_transaction_id: string | null
      default: boolean | null
      last_payment_status: string | null
    }, ExtArgs["result"]["cardInfo"]>
    composites: {}
  }


  type CardInfoGetPayload<S extends boolean | null | undefined | CardInfoDefaultArgs> = $Result.GetResult<Prisma.$CardInfoPayload, S>

  type CardInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardInfoCountAggregateInputType | true
    }

  export interface CardInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardInfo'], meta: { name: 'CardInfo' } }
    /**
     * Find zero or one CardInfo that matches the filter.
     * @param {CardInfoFindUniqueArgs} args - Arguments to find a CardInfo
     * @example
     * // Get one CardInfo
     * const cardInfo = await prisma.cardInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CardInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CardInfoFindUniqueOrThrowArgs} args - Arguments to find a CardInfo
     * @example
     * // Get one CardInfo
     * const cardInfo = await prisma.cardInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CardInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoFindFirstArgs} args - Arguments to find a CardInfo
     * @example
     * // Get one CardInfo
     * const cardInfo = await prisma.cardInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoFindFirstArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CardInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoFindFirstOrThrowArgs} args - Arguments to find a CardInfo
     * @example
     * // Get one CardInfo
     * const cardInfo = await prisma.cardInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CardInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardInfos
     * const cardInfos = await prisma.cardInfo.findMany()
     * 
     * // Get first 10 CardInfos
     * const cardInfos = await prisma.cardInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardInfoWithIdOnly = await prisma.cardInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CardInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CardInfo.
     * @param {CardInfoCreateArgs} args - Arguments to create a CardInfo.
     * @example
     * // Create one CardInfo
     * const CardInfo = await prisma.cardInfo.create({
     *   data: {
     *     // ... data to create a CardInfo
     *   }
     * })
     * 
    **/
    create<T extends CardInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoCreateArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CardInfos.
     *     @param {CardInfoCreateManyArgs} args - Arguments to create many CardInfos.
     *     @example
     *     // Create many CardInfos
     *     const cardInfo = await prisma.cardInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CardInfo.
     * @param {CardInfoDeleteArgs} args - Arguments to delete one CardInfo.
     * @example
     * // Delete one CardInfo
     * const CardInfo = await prisma.cardInfo.delete({
     *   where: {
     *     // ... filter to delete one CardInfo
     *   }
     * })
     * 
    **/
    delete<T extends CardInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoDeleteArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CardInfo.
     * @param {CardInfoUpdateArgs} args - Arguments to update one CardInfo.
     * @example
     * // Update one CardInfo
     * const cardInfo = await prisma.cardInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoUpdateArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CardInfos.
     * @param {CardInfoDeleteManyArgs} args - Arguments to filter CardInfos to delete.
     * @example
     * // Delete a few CardInfos
     * const { count } = await prisma.cardInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardInfos
     * const cardInfo = await prisma.cardInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardInfo.
     * @param {CardInfoUpsertArgs} args - Arguments to update or create a CardInfo.
     * @example
     * // Update or create a CardInfo
     * const cardInfo = await prisma.cardInfo.upsert({
     *   create: {
     *     // ... data to create a CardInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardInfo we want to update
     *   }
     * })
    **/
    upsert<T extends CardInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CardInfoUpsertArgs<ExtArgs>>
    ): Prisma__CardInfoClient<$Result.GetResult<Prisma.$CardInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CardInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoCountArgs} args - Arguments to filter CardInfos to count.
     * @example
     * // Count the number of CardInfos
     * const count = await prisma.cardInfo.count({
     *   where: {
     *     // ... the filter for the CardInfos we want to count
     *   }
     * })
    **/
    count<T extends CardInfoCountArgs>(
      args?: Subset<T, CardInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardInfoAggregateArgs>(args: Subset<T, CardInfoAggregateArgs>): Prisma.PrismaPromise<GetCardInfoAggregateType<T>>

    /**
     * Group by CardInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardInfoGroupByArgs['orderBy'] }
        : { orderBy?: CardInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardInfo model
   */
  readonly fields: CardInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CardInfo model
   */ 
  interface CardInfoFieldRefs {
    readonly id: FieldRef<"CardInfo", 'String'>
    readonly user_uid: FieldRef<"CardInfo", 'String'>
    readonly card_no: FieldRef<"CardInfo", 'String'>
    readonly card_brand: FieldRef<"CardInfo", 'String'>
    readonly card_token: FieldRef<"CardInfo", 'String'>
    readonly created_at: FieldRef<"CardInfo", 'DateTime'>
    readonly network_transaction_id: FieldRef<"CardInfo", 'String'>
    readonly default: FieldRef<"CardInfo", 'Boolean'>
    readonly last_payment_status: FieldRef<"CardInfo", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CardInfo findUnique
   */
  export type CardInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter, which CardInfo to fetch.
     */
    where: CardInfoWhereUniqueInput
  }


  /**
   * CardInfo findUniqueOrThrow
   */
  export type CardInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter, which CardInfo to fetch.
     */
    where: CardInfoWhereUniqueInput
  }


  /**
   * CardInfo findFirst
   */
  export type CardInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter, which CardInfo to fetch.
     */
    where?: CardInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardInfos to fetch.
     */
    orderBy?: CardInfoOrderByWithRelationInput | CardInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardInfos.
     */
    cursor?: CardInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardInfos.
     */
    distinct?: CardInfoScalarFieldEnum | CardInfoScalarFieldEnum[]
  }


  /**
   * CardInfo findFirstOrThrow
   */
  export type CardInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter, which CardInfo to fetch.
     */
    where?: CardInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardInfos to fetch.
     */
    orderBy?: CardInfoOrderByWithRelationInput | CardInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardInfos.
     */
    cursor?: CardInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardInfos.
     */
    distinct?: CardInfoScalarFieldEnum | CardInfoScalarFieldEnum[]
  }


  /**
   * CardInfo findMany
   */
  export type CardInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter, which CardInfos to fetch.
     */
    where?: CardInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardInfos to fetch.
     */
    orderBy?: CardInfoOrderByWithRelationInput | CardInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardInfos.
     */
    cursor?: CardInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardInfos.
     */
    skip?: number
    distinct?: CardInfoScalarFieldEnum | CardInfoScalarFieldEnum[]
  }


  /**
   * CardInfo create
   */
  export type CardInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * The data needed to create a CardInfo.
     */
    data: XOR<CardInfoCreateInput, CardInfoUncheckedCreateInput>
  }


  /**
   * CardInfo createMany
   */
  export type CardInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardInfos.
     */
    data: CardInfoCreateManyInput | CardInfoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CardInfo update
   */
  export type CardInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * The data needed to update a CardInfo.
     */
    data: XOR<CardInfoUpdateInput, CardInfoUncheckedUpdateInput>
    /**
     * Choose, which CardInfo to update.
     */
    where: CardInfoWhereUniqueInput
  }


  /**
   * CardInfo updateMany
   */
  export type CardInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardInfos.
     */
    data: XOR<CardInfoUpdateManyMutationInput, CardInfoUncheckedUpdateManyInput>
    /**
     * Filter which CardInfos to update
     */
    where?: CardInfoWhereInput
  }


  /**
   * CardInfo upsert
   */
  export type CardInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * The filter to search for the CardInfo to update in case it exists.
     */
    where: CardInfoWhereUniqueInput
    /**
     * In case the CardInfo found by the `where` argument doesn't exist, create a new CardInfo with this data.
     */
    create: XOR<CardInfoCreateInput, CardInfoUncheckedCreateInput>
    /**
     * In case the CardInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardInfoUpdateInput, CardInfoUncheckedUpdateInput>
  }


  /**
   * CardInfo delete
   */
  export type CardInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
    /**
     * Filter which CardInfo to delete.
     */
    where: CardInfoWhereUniqueInput
  }


  /**
   * CardInfo deleteMany
   */
  export type CardInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardInfos to delete
     */
    where?: CardInfoWhereInput
  }


  /**
   * CardInfo without action
   */
  export type CardInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardInfo
     */
    select?: CardInfoSelect<ExtArgs> | null
  }



  /**
   * Model Credits
   */

  export type AggregateCredits = {
    _count: CreditsCountAggregateOutputType | null
    _avg: CreditsAvgAggregateOutputType | null
    _sum: CreditsSumAggregateOutputType | null
    _min: CreditsMinAggregateOutputType | null
    _max: CreditsMaxAggregateOutputType | null
  }

  export type CreditsAvgAggregateOutputType = {
    amount: number | null
    used_amount: number | null
  }

  export type CreditsSumAggregateOutputType = {
    amount: bigint | null
    used_amount: bigint | null
  }

  export type CreditsMinAggregateOutputType = {
    id: string | null
    user_uid: string | null
    amount: bigint | null
    used_amount: bigint | null
    from_id: string | null
    from_type: string | null
    expire_at: Date | null
    created_at: Date | null
    start_at: Date | null
    status: string | null
  }

  export type CreditsMaxAggregateOutputType = {
    id: string | null
    user_uid: string | null
    amount: bigint | null
    used_amount: bigint | null
    from_id: string | null
    from_type: string | null
    expire_at: Date | null
    created_at: Date | null
    start_at: Date | null
    status: string | null
  }

  export type CreditsCountAggregateOutputType = {
    id: number
    user_uid: number
    amount: number
    used_amount: number
    from_id: number
    from_type: number
    expire_at: number
    created_at: number
    start_at: number
    status: number
    _all: number
  }


  export type CreditsAvgAggregateInputType = {
    amount?: true
    used_amount?: true
  }

  export type CreditsSumAggregateInputType = {
    amount?: true
    used_amount?: true
  }

  export type CreditsMinAggregateInputType = {
    id?: true
    user_uid?: true
    amount?: true
    used_amount?: true
    from_id?: true
    from_type?: true
    expire_at?: true
    created_at?: true
    start_at?: true
    status?: true
  }

  export type CreditsMaxAggregateInputType = {
    id?: true
    user_uid?: true
    amount?: true
    used_amount?: true
    from_id?: true
    from_type?: true
    expire_at?: true
    created_at?: true
    start_at?: true
    status?: true
  }

  export type CreditsCountAggregateInputType = {
    id?: true
    user_uid?: true
    amount?: true
    used_amount?: true
    from_id?: true
    from_type?: true
    expire_at?: true
    created_at?: true
    start_at?: true
    status?: true
    _all?: true
  }

  export type CreditsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credits to aggregate.
     */
    where?: CreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credits to fetch.
     */
    orderBy?: CreditsOrderByWithRelationInput | CreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credits
    **/
    _count?: true | CreditsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreditsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreditsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditsMaxAggregateInputType
  }

  export type GetCreditsAggregateType<T extends CreditsAggregateArgs> = {
        [P in keyof T & keyof AggregateCredits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredits[P]>
      : GetScalarType<T[P], AggregateCredits[P]>
  }




  export type CreditsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditsWhereInput
    orderBy?: CreditsOrderByWithAggregationInput | CreditsOrderByWithAggregationInput[]
    by: CreditsScalarFieldEnum[] | CreditsScalarFieldEnum
    having?: CreditsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditsCountAggregateInputType | true
    _avg?: CreditsAvgAggregateInputType
    _sum?: CreditsSumAggregateInputType
    _min?: CreditsMinAggregateInputType
    _max?: CreditsMaxAggregateInputType
  }

  export type CreditsGroupByOutputType = {
    id: string
    user_uid: string | null
    amount: bigint | null
    used_amount: bigint | null
    from_id: string | null
    from_type: string | null
    expire_at: Date | null
    created_at: Date | null
    start_at: Date | null
    status: string | null
    _count: CreditsCountAggregateOutputType | null
    _avg: CreditsAvgAggregateOutputType | null
    _sum: CreditsSumAggregateOutputType | null
    _min: CreditsMinAggregateOutputType | null
    _max: CreditsMaxAggregateOutputType | null
  }

  type GetCreditsGroupByPayload<T extends CreditsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditsGroupByOutputType[P]>
            : GetScalarType<T[P], CreditsGroupByOutputType[P]>
        }
      >
    >


  export type CreditsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_uid?: boolean
    amount?: boolean
    used_amount?: boolean
    from_id?: boolean
    from_type?: boolean
    expire_at?: boolean
    created_at?: boolean
    start_at?: boolean
    status?: boolean
  }, ExtArgs["result"]["credits"]>

  export type CreditsSelectScalar = {
    id?: boolean
    user_uid?: boolean
    amount?: boolean
    used_amount?: boolean
    from_id?: boolean
    from_type?: boolean
    expire_at?: boolean
    created_at?: boolean
    start_at?: boolean
    status?: boolean
  }


  export type $CreditsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Credits"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_uid: string | null
      amount: bigint | null
      used_amount: bigint | null
      from_id: string | null
      from_type: string | null
      expire_at: Date | null
      created_at: Date | null
      start_at: Date | null
      status: string | null
    }, ExtArgs["result"]["credits"]>
    composites: {}
  }


  type CreditsGetPayload<S extends boolean | null | undefined | CreditsDefaultArgs> = $Result.GetResult<Prisma.$CreditsPayload, S>

  type CreditsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreditsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CreditsCountAggregateInputType | true
    }

  export interface CreditsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Credits'], meta: { name: 'Credits' } }
    /**
     * Find zero or one Credits that matches the filter.
     * @param {CreditsFindUniqueArgs} args - Arguments to find a Credits
     * @example
     * // Get one Credits
     * const credits = await prisma.credits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CreditsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsFindUniqueArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Credits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CreditsFindUniqueOrThrowArgs} args - Arguments to find a Credits
     * @example
     * // Get one Credits
     * const credits = await prisma.credits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CreditsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Credits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsFindFirstArgs} args - Arguments to find a Credits
     * @example
     * // Get one Credits
     * const credits = await prisma.credits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CreditsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsFindFirstArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Credits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsFindFirstOrThrowArgs} args - Arguments to find a Credits
     * @example
     * // Get one Credits
     * const credits = await prisma.credits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CreditsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Credits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credits
     * const credits = await prisma.credits.findMany()
     * 
     * // Get first 10 Credits
     * const credits = await prisma.credits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditsWithIdOnly = await prisma.credits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CreditsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Credits.
     * @param {CreditsCreateArgs} args - Arguments to create a Credits.
     * @example
     * // Create one Credits
     * const Credits = await prisma.credits.create({
     *   data: {
     *     // ... data to create a Credits
     *   }
     * })
     * 
    **/
    create<T extends CreditsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsCreateArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Credits.
     *     @param {CreditsCreateManyArgs} args - Arguments to create many Credits.
     *     @example
     *     // Create many Credits
     *     const credits = await prisma.credits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CreditsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Credits.
     * @param {CreditsDeleteArgs} args - Arguments to delete one Credits.
     * @example
     * // Delete one Credits
     * const Credits = await prisma.credits.delete({
     *   where: {
     *     // ... filter to delete one Credits
     *   }
     * })
     * 
    **/
    delete<T extends CreditsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsDeleteArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Credits.
     * @param {CreditsUpdateArgs} args - Arguments to update one Credits.
     * @example
     * // Update one Credits
     * const credits = await prisma.credits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CreditsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsUpdateArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Credits.
     * @param {CreditsDeleteManyArgs} args - Arguments to filter Credits to delete.
     * @example
     * // Delete a few Credits
     * const { count } = await prisma.credits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CreditsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreditsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credits
     * const credits = await prisma.credits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CreditsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Credits.
     * @param {CreditsUpsertArgs} args - Arguments to update or create a Credits.
     * @example
     * // Update or create a Credits
     * const credits = await prisma.credits.upsert({
     *   create: {
     *     // ... data to create a Credits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credits we want to update
     *   }
     * })
    **/
    upsert<T extends CreditsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CreditsUpsertArgs<ExtArgs>>
    ): Prisma__CreditsClient<$Result.GetResult<Prisma.$CreditsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Credits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsCountArgs} args - Arguments to filter Credits to count.
     * @example
     * // Count the number of Credits
     * const count = await prisma.credits.count({
     *   where: {
     *     // ... the filter for the Credits we want to count
     *   }
     * })
    **/
    count<T extends CreditsCountArgs>(
      args?: Subset<T, CreditsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditsAggregateArgs>(args: Subset<T, CreditsAggregateArgs>): Prisma.PrismaPromise<GetCreditsAggregateType<T>>

    /**
     * Group by Credits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditsGroupByArgs['orderBy'] }
        : { orderBy?: CreditsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Credits model
   */
  readonly fields: CreditsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Credits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Credits model
   */ 
  interface CreditsFieldRefs {
    readonly id: FieldRef<"Credits", 'String'>
    readonly user_uid: FieldRef<"Credits", 'String'>
    readonly amount: FieldRef<"Credits", 'BigInt'>
    readonly used_amount: FieldRef<"Credits", 'BigInt'>
    readonly from_id: FieldRef<"Credits", 'String'>
    readonly from_type: FieldRef<"Credits", 'String'>
    readonly expire_at: FieldRef<"Credits", 'DateTime'>
    readonly created_at: FieldRef<"Credits", 'DateTime'>
    readonly start_at: FieldRef<"Credits", 'DateTime'>
    readonly status: FieldRef<"Credits", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Credits findUnique
   */
  export type CreditsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter, which Credits to fetch.
     */
    where: CreditsWhereUniqueInput
  }


  /**
   * Credits findUniqueOrThrow
   */
  export type CreditsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter, which Credits to fetch.
     */
    where: CreditsWhereUniqueInput
  }


  /**
   * Credits findFirst
   */
  export type CreditsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter, which Credits to fetch.
     */
    where?: CreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credits to fetch.
     */
    orderBy?: CreditsOrderByWithRelationInput | CreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credits.
     */
    cursor?: CreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credits.
     */
    distinct?: CreditsScalarFieldEnum | CreditsScalarFieldEnum[]
  }


  /**
   * Credits findFirstOrThrow
   */
  export type CreditsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter, which Credits to fetch.
     */
    where?: CreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credits to fetch.
     */
    orderBy?: CreditsOrderByWithRelationInput | CreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credits.
     */
    cursor?: CreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credits.
     */
    distinct?: CreditsScalarFieldEnum | CreditsScalarFieldEnum[]
  }


  /**
   * Credits findMany
   */
  export type CreditsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter, which Credits to fetch.
     */
    where?: CreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credits to fetch.
     */
    orderBy?: CreditsOrderByWithRelationInput | CreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credits.
     */
    cursor?: CreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credits.
     */
    skip?: number
    distinct?: CreditsScalarFieldEnum | CreditsScalarFieldEnum[]
  }


  /**
   * Credits create
   */
  export type CreditsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * The data needed to create a Credits.
     */
    data?: XOR<CreditsCreateInput, CreditsUncheckedCreateInput>
  }


  /**
   * Credits createMany
   */
  export type CreditsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Credits.
     */
    data: CreditsCreateManyInput | CreditsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Credits update
   */
  export type CreditsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * The data needed to update a Credits.
     */
    data: XOR<CreditsUpdateInput, CreditsUncheckedUpdateInput>
    /**
     * Choose, which Credits to update.
     */
    where: CreditsWhereUniqueInput
  }


  /**
   * Credits updateMany
   */
  export type CreditsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Credits.
     */
    data: XOR<CreditsUpdateManyMutationInput, CreditsUncheckedUpdateManyInput>
    /**
     * Filter which Credits to update
     */
    where?: CreditsWhereInput
  }


  /**
   * Credits upsert
   */
  export type CreditsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * The filter to search for the Credits to update in case it exists.
     */
    where: CreditsWhereUniqueInput
    /**
     * In case the Credits found by the `where` argument doesn't exist, create a new Credits with this data.
     */
    create: XOR<CreditsCreateInput, CreditsUncheckedCreateInput>
    /**
     * In case the Credits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditsUpdateInput, CreditsUncheckedUpdateInput>
  }


  /**
   * Credits delete
   */
  export type CreditsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
    /**
     * Filter which Credits to delete.
     */
    where: CreditsWhereUniqueInput
  }


  /**
   * Credits deleteMany
   */
  export type CreditsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credits to delete
     */
    where?: CreditsWhereInput
  }


  /**
   * Credits without action
   */
  export type CreditsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credits
     */
    select?: CreditsSelect<ExtArgs> | null
  }



  /**
   * Model InvoicePayment
   */

  export type AggregateInvoicePayment = {
    _count: InvoicePaymentCountAggregateOutputType | null
    _avg: InvoicePaymentAvgAggregateOutputType | null
    _sum: InvoicePaymentSumAggregateOutputType | null
    _min: InvoicePaymentMinAggregateOutputType | null
    _max: InvoicePaymentMaxAggregateOutputType | null
  }

  export type InvoicePaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type InvoicePaymentSumAggregateOutputType = {
    amount: bigint | null
  }

  export type InvoicePaymentMinAggregateOutputType = {
    invoice_id: string | null
    payment_id: string | null
    amount: bigint | null
  }

  export type InvoicePaymentMaxAggregateOutputType = {
    invoice_id: string | null
    payment_id: string | null
    amount: bigint | null
  }

  export type InvoicePaymentCountAggregateOutputType = {
    invoice_id: number
    payment_id: number
    amount: number
    _all: number
  }


  export type InvoicePaymentAvgAggregateInputType = {
    amount?: true
  }

  export type InvoicePaymentSumAggregateInputType = {
    amount?: true
  }

  export type InvoicePaymentMinAggregateInputType = {
    invoice_id?: true
    payment_id?: true
    amount?: true
  }

  export type InvoicePaymentMaxAggregateInputType = {
    invoice_id?: true
    payment_id?: true
    amount?: true
  }

  export type InvoicePaymentCountAggregateInputType = {
    invoice_id?: true
    payment_id?: true
    amount?: true
    _all?: true
  }

  export type InvoicePaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoicePayment to aggregate.
     */
    where?: InvoicePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoicePayments to fetch.
     */
    orderBy?: InvoicePaymentOrderByWithRelationInput | InvoicePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoicePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoicePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoicePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoicePayments
    **/
    _count?: true | InvoicePaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoicePaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoicePaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoicePaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoicePaymentMaxAggregateInputType
  }

  export type GetInvoicePaymentAggregateType<T extends InvoicePaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoicePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoicePayment[P]>
      : GetScalarType<T[P], AggregateInvoicePayment[P]>
  }




  export type InvoicePaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoicePaymentWhereInput
    orderBy?: InvoicePaymentOrderByWithAggregationInput | InvoicePaymentOrderByWithAggregationInput[]
    by: InvoicePaymentScalarFieldEnum[] | InvoicePaymentScalarFieldEnum
    having?: InvoicePaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoicePaymentCountAggregateInputType | true
    _avg?: InvoicePaymentAvgAggregateInputType
    _sum?: InvoicePaymentSumAggregateInputType
    _min?: InvoicePaymentMinAggregateInputType
    _max?: InvoicePaymentMaxAggregateInputType
  }

  export type InvoicePaymentGroupByOutputType = {
    invoice_id: string | null
    payment_id: string
    amount: bigint
    _count: InvoicePaymentCountAggregateOutputType | null
    _avg: InvoicePaymentAvgAggregateOutputType | null
    _sum: InvoicePaymentSumAggregateOutputType | null
    _min: InvoicePaymentMinAggregateOutputType | null
    _max: InvoicePaymentMaxAggregateOutputType | null
  }

  type GetInvoicePaymentGroupByPayload<T extends InvoicePaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoicePaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoicePaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoicePaymentGroupByOutputType[P]>
            : GetScalarType<T[P], InvoicePaymentGroupByOutputType[P]>
        }
      >
    >


  export type InvoicePaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    invoice_id?: boolean
    payment_id?: boolean
    amount?: boolean
  }, ExtArgs["result"]["invoicePayment"]>

  export type InvoicePaymentSelectScalar = {
    invoice_id?: boolean
    payment_id?: boolean
    amount?: boolean
  }


  export type $InvoicePaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoicePayment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      invoice_id: string | null
      payment_id: string
      amount: bigint
    }, ExtArgs["result"]["invoicePayment"]>
    composites: {}
  }


  type InvoicePaymentGetPayload<S extends boolean | null | undefined | InvoicePaymentDefaultArgs> = $Result.GetResult<Prisma.$InvoicePaymentPayload, S>

  type InvoicePaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvoicePaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvoicePaymentCountAggregateInputType | true
    }

  export interface InvoicePaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoicePayment'], meta: { name: 'InvoicePayment' } }
    /**
     * Find zero or one InvoicePayment that matches the filter.
     * @param {InvoicePaymentFindUniqueArgs} args - Arguments to find a InvoicePayment
     * @example
     * // Get one InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoicePaymentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentFindUniqueArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvoicePayment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoicePaymentFindUniqueOrThrowArgs} args - Arguments to find a InvoicePayment
     * @example
     * // Get one InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoicePaymentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvoicePayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentFindFirstArgs} args - Arguments to find a InvoicePayment
     * @example
     * // Get one InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoicePaymentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentFindFirstArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvoicePayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentFindFirstOrThrowArgs} args - Arguments to find a InvoicePayment
     * @example
     * // Get one InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoicePaymentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvoicePayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoicePayments
     * const invoicePayments = await prisma.invoicePayment.findMany()
     * 
     * // Get first 10 InvoicePayments
     * const invoicePayments = await prisma.invoicePayment.findMany({ take: 10 })
     * 
     * // Only select the `invoice_id`
     * const invoicePaymentWithInvoice_idOnly = await prisma.invoicePayment.findMany({ select: { invoice_id: true } })
     * 
    **/
    findMany<T extends InvoicePaymentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvoicePayment.
     * @param {InvoicePaymentCreateArgs} args - Arguments to create a InvoicePayment.
     * @example
     * // Create one InvoicePayment
     * const InvoicePayment = await prisma.invoicePayment.create({
     *   data: {
     *     // ... data to create a InvoicePayment
     *   }
     * })
     * 
    **/
    create<T extends InvoicePaymentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentCreateArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvoicePayments.
     *     @param {InvoicePaymentCreateManyArgs} args - Arguments to create many InvoicePayments.
     *     @example
     *     // Create many InvoicePayments
     *     const invoicePayment = await prisma.invoicePayment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoicePaymentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvoicePayment.
     * @param {InvoicePaymentDeleteArgs} args - Arguments to delete one InvoicePayment.
     * @example
     * // Delete one InvoicePayment
     * const InvoicePayment = await prisma.invoicePayment.delete({
     *   where: {
     *     // ... filter to delete one InvoicePayment
     *   }
     * })
     * 
    **/
    delete<T extends InvoicePaymentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentDeleteArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvoicePayment.
     * @param {InvoicePaymentUpdateArgs} args - Arguments to update one InvoicePayment.
     * @example
     * // Update one InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoicePaymentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentUpdateArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvoicePayments.
     * @param {InvoicePaymentDeleteManyArgs} args - Arguments to filter InvoicePayments to delete.
     * @example
     * // Delete a few InvoicePayments
     * const { count } = await prisma.invoicePayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoicePaymentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoicePaymentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoicePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoicePayments
     * const invoicePayment = await prisma.invoicePayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoicePaymentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoicePayment.
     * @param {InvoicePaymentUpsertArgs} args - Arguments to update or create a InvoicePayment.
     * @example
     * // Update or create a InvoicePayment
     * const invoicePayment = await prisma.invoicePayment.upsert({
     *   create: {
     *     // ... data to create a InvoicePayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoicePayment we want to update
     *   }
     * })
    **/
    upsert<T extends InvoicePaymentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvoicePaymentUpsertArgs<ExtArgs>>
    ): Prisma__InvoicePaymentClient<$Result.GetResult<Prisma.$InvoicePaymentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvoicePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentCountArgs} args - Arguments to filter InvoicePayments to count.
     * @example
     * // Count the number of InvoicePayments
     * const count = await prisma.invoicePayment.count({
     *   where: {
     *     // ... the filter for the InvoicePayments we want to count
     *   }
     * })
    **/
    count<T extends InvoicePaymentCountArgs>(
      args?: Subset<T, InvoicePaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoicePaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoicePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoicePaymentAggregateArgs>(args: Subset<T, InvoicePaymentAggregateArgs>): Prisma.PrismaPromise<GetInvoicePaymentAggregateType<T>>

    /**
     * Group by InvoicePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoicePaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoicePaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoicePaymentGroupByArgs['orderBy'] }
        : { orderBy?: InvoicePaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoicePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoicePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoicePayment model
   */
  readonly fields: InvoicePaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoicePayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoicePaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvoicePayment model
   */ 
  interface InvoicePaymentFieldRefs {
    readonly invoice_id: FieldRef<"InvoicePayment", 'String'>
    readonly payment_id: FieldRef<"InvoicePayment", 'String'>
    readonly amount: FieldRef<"InvoicePayment", 'BigInt'>
  }
    

  // Custom InputTypes

  /**
   * InvoicePayment findUnique
   */
  export type InvoicePaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter, which InvoicePayment to fetch.
     */
    where: InvoicePaymentWhereUniqueInput
  }


  /**
   * InvoicePayment findUniqueOrThrow
   */
  export type InvoicePaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter, which InvoicePayment to fetch.
     */
    where: InvoicePaymentWhereUniqueInput
  }


  /**
   * InvoicePayment findFirst
   */
  export type InvoicePaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter, which InvoicePayment to fetch.
     */
    where?: InvoicePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoicePayments to fetch.
     */
    orderBy?: InvoicePaymentOrderByWithRelationInput | InvoicePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoicePayments.
     */
    cursor?: InvoicePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoicePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoicePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoicePayments.
     */
    distinct?: InvoicePaymentScalarFieldEnum | InvoicePaymentScalarFieldEnum[]
  }


  /**
   * InvoicePayment findFirstOrThrow
   */
  export type InvoicePaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter, which InvoicePayment to fetch.
     */
    where?: InvoicePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoicePayments to fetch.
     */
    orderBy?: InvoicePaymentOrderByWithRelationInput | InvoicePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoicePayments.
     */
    cursor?: InvoicePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoicePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoicePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoicePayments.
     */
    distinct?: InvoicePaymentScalarFieldEnum | InvoicePaymentScalarFieldEnum[]
  }


  /**
   * InvoicePayment findMany
   */
  export type InvoicePaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter, which InvoicePayments to fetch.
     */
    where?: InvoicePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoicePayments to fetch.
     */
    orderBy?: InvoicePaymentOrderByWithRelationInput | InvoicePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoicePayments.
     */
    cursor?: InvoicePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoicePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoicePayments.
     */
    skip?: number
    distinct?: InvoicePaymentScalarFieldEnum | InvoicePaymentScalarFieldEnum[]
  }


  /**
   * InvoicePayment create
   */
  export type InvoicePaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * The data needed to create a InvoicePayment.
     */
    data: XOR<InvoicePaymentCreateInput, InvoicePaymentUncheckedCreateInput>
  }


  /**
   * InvoicePayment createMany
   */
  export type InvoicePaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoicePayments.
     */
    data: InvoicePaymentCreateManyInput | InvoicePaymentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvoicePayment update
   */
  export type InvoicePaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * The data needed to update a InvoicePayment.
     */
    data: XOR<InvoicePaymentUpdateInput, InvoicePaymentUncheckedUpdateInput>
    /**
     * Choose, which InvoicePayment to update.
     */
    where: InvoicePaymentWhereUniqueInput
  }


  /**
   * InvoicePayment updateMany
   */
  export type InvoicePaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoicePayments.
     */
    data: XOR<InvoicePaymentUpdateManyMutationInput, InvoicePaymentUncheckedUpdateManyInput>
    /**
     * Filter which InvoicePayments to update
     */
    where?: InvoicePaymentWhereInput
  }


  /**
   * InvoicePayment upsert
   */
  export type InvoicePaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * The filter to search for the InvoicePayment to update in case it exists.
     */
    where: InvoicePaymentWhereUniqueInput
    /**
     * In case the InvoicePayment found by the `where` argument doesn't exist, create a new InvoicePayment with this data.
     */
    create: XOR<InvoicePaymentCreateInput, InvoicePaymentUncheckedCreateInput>
    /**
     * In case the InvoicePayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoicePaymentUpdateInput, InvoicePaymentUncheckedUpdateInput>
  }


  /**
   * InvoicePayment delete
   */
  export type InvoicePaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
    /**
     * Filter which InvoicePayment to delete.
     */
    where: InvoicePaymentWhereUniqueInput
  }


  /**
   * InvoicePayment deleteMany
   */
  export type InvoicePaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoicePayments to delete
     */
    where?: InvoicePaymentWhereInput
  }


  /**
   * InvoicePayment without action
   */
  export type InvoicePaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoicePayment
     */
    select?: InvoicePaymentSelect<ExtArgs> | null
  }



  /**
   * Model PaymentOrder
   */

  export type AggregatePaymentOrder = {
    _count: PaymentOrderCountAggregateOutputType | null
    _avg: PaymentOrderAvgAggregateOutputType | null
    _sum: PaymentOrderSumAggregateOutputType | null
    _min: PaymentOrderMinAggregateOutputType | null
    _max: PaymentOrderMaxAggregateOutputType | null
  }

  export type PaymentOrderAvgAggregateOutputType = {
    amount: number | null
    gift: number | null
  }

  export type PaymentOrderSumAggregateOutputType = {
    amount: bigint | null
    gift: bigint | null
  }

  export type PaymentOrderMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    activityType: string | null
    message: string | null
    card_uid: string | null
    type: string | null
    charge_source: string | null
    status: string | null
  }

  export type PaymentOrderMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    regionUid: string | null
    created_at: Date | null
    regionUserOwner: string | null
    method: string | null
    amount: bigint | null
    gift: bigint | null
    trade_no: string | null
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    activityType: string | null
    message: string | null
    card_uid: string | null
    type: string | null
    charge_source: string | null
    status: string | null
  }

  export type PaymentOrderCountAggregateOutputType = {
    id: number
    userUid: number
    regionUid: number
    created_at: number
    regionUserOwner: number
    method: number
    amount: number
    gift: number
    trade_no: number
    code_url: number
    invoiced_at: number
    remark: number
    activityType: number
    message: number
    card_uid: number
    type: number
    charge_source: number
    status: number
    _all: number
  }


  export type PaymentOrderAvgAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type PaymentOrderSumAggregateInputType = {
    amount?: true
    gift?: true
  }

  export type PaymentOrderMinAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    activityType?: true
    message?: true
    card_uid?: true
    type?: true
    charge_source?: true
    status?: true
  }

  export type PaymentOrderMaxAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    activityType?: true
    message?: true
    card_uid?: true
    type?: true
    charge_source?: true
    status?: true
  }

  export type PaymentOrderCountAggregateInputType = {
    id?: true
    userUid?: true
    regionUid?: true
    created_at?: true
    regionUserOwner?: true
    method?: true
    amount?: true
    gift?: true
    trade_no?: true
    code_url?: true
    invoiced_at?: true
    remark?: true
    activityType?: true
    message?: true
    card_uid?: true
    type?: true
    charge_source?: true
    status?: true
    _all?: true
  }

  export type PaymentOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentOrder to aggregate.
     */
    where?: PaymentOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentOrders to fetch.
     */
    orderBy?: PaymentOrderOrderByWithRelationInput | PaymentOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentOrders
    **/
    _count?: true | PaymentOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentOrderMaxAggregateInputType
  }

  export type GetPaymentOrderAggregateType<T extends PaymentOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentOrder[P]>
      : GetScalarType<T[P], AggregatePaymentOrder[P]>
  }




  export type PaymentOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentOrderWhereInput
    orderBy?: PaymentOrderOrderByWithAggregationInput | PaymentOrderOrderByWithAggregationInput[]
    by: PaymentOrderScalarFieldEnum[] | PaymentOrderScalarFieldEnum
    having?: PaymentOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentOrderCountAggregateInputType | true
    _avg?: PaymentOrderAvgAggregateInputType
    _sum?: PaymentOrderSumAggregateInputType
    _min?: PaymentOrderMinAggregateInputType
    _max?: PaymentOrderMaxAggregateInputType
  }

  export type PaymentOrderGroupByOutputType = {
    id: string
    userUid: string
    regionUid: string
    created_at: Date | null
    regionUserOwner: string
    method: string
    amount: bigint
    gift: bigint | null
    trade_no: string
    code_url: string | null
    invoiced_at: boolean | null
    remark: string | null
    activityType: string | null
    message: string
    card_uid: string | null
    type: string | null
    charge_source: string | null
    status: string
    _count: PaymentOrderCountAggregateOutputType | null
    _avg: PaymentOrderAvgAggregateOutputType | null
    _sum: PaymentOrderSumAggregateOutputType | null
    _min: PaymentOrderMinAggregateOutputType | null
    _max: PaymentOrderMaxAggregateOutputType | null
  }

  type GetPaymentOrderGroupByPayload<T extends PaymentOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentOrderGroupByOutputType[P]>
        }
      >
    >


  export type PaymentOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    activityType?: boolean
    message?: boolean
    card_uid?: boolean
    type?: boolean
    charge_source?: boolean
    status?: boolean
  }, ExtArgs["result"]["paymentOrder"]>

  export type PaymentOrderSelectScalar = {
    id?: boolean
    userUid?: boolean
    regionUid?: boolean
    created_at?: boolean
    regionUserOwner?: boolean
    method?: boolean
    amount?: boolean
    gift?: boolean
    trade_no?: boolean
    code_url?: boolean
    invoiced_at?: boolean
    remark?: boolean
    activityType?: boolean
    message?: boolean
    card_uid?: boolean
    type?: boolean
    charge_source?: boolean
    status?: boolean
  }


  export type $PaymentOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentOrder"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      regionUid: string
      created_at: Date | null
      regionUserOwner: string
      method: string
      amount: bigint
      gift: bigint | null
      trade_no: string
      code_url: string | null
      invoiced_at: boolean | null
      remark: string | null
      activityType: string | null
      message: string
      card_uid: string | null
      type: string | null
      charge_source: string | null
      status: string
    }, ExtArgs["result"]["paymentOrder"]>
    composites: {}
  }


  type PaymentOrderGetPayload<S extends boolean | null | undefined | PaymentOrderDefaultArgs> = $Result.GetResult<Prisma.$PaymentOrderPayload, S>

  type PaymentOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentOrderCountAggregateInputType | true
    }

  export interface PaymentOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentOrder'], meta: { name: 'PaymentOrder' } }
    /**
     * Find zero or one PaymentOrder that matches the filter.
     * @param {PaymentOrderFindUniqueArgs} args - Arguments to find a PaymentOrder
     * @example
     * // Get one PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentOrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PaymentOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentOrderFindUniqueOrThrowArgs} args - Arguments to find a PaymentOrder
     * @example
     * // Get one PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PaymentOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderFindFirstArgs} args - Arguments to find a PaymentOrder
     * @example
     * // Get one PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentOrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PaymentOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderFindFirstOrThrowArgs} args - Arguments to find a PaymentOrder
     * @example
     * // Get one PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PaymentOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentOrders
     * const paymentOrders = await prisma.paymentOrder.findMany()
     * 
     * // Get first 10 PaymentOrders
     * const paymentOrders = await prisma.paymentOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentOrderWithIdOnly = await prisma.paymentOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PaymentOrder.
     * @param {PaymentOrderCreateArgs} args - Arguments to create a PaymentOrder.
     * @example
     * // Create one PaymentOrder
     * const PaymentOrder = await prisma.paymentOrder.create({
     *   data: {
     *     // ... data to create a PaymentOrder
     *   }
     * })
     * 
    **/
    create<T extends PaymentOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderCreateArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PaymentOrders.
     *     @param {PaymentOrderCreateManyArgs} args - Arguments to create many PaymentOrders.
     *     @example
     *     // Create many PaymentOrders
     *     const paymentOrder = await prisma.paymentOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentOrder.
     * @param {PaymentOrderDeleteArgs} args - Arguments to delete one PaymentOrder.
     * @example
     * // Delete one PaymentOrder
     * const PaymentOrder = await prisma.paymentOrder.delete({
     *   where: {
     *     // ... filter to delete one PaymentOrder
     *   }
     * })
     * 
    **/
    delete<T extends PaymentOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderDeleteArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PaymentOrder.
     * @param {PaymentOrderUpdateArgs} args - Arguments to update one PaymentOrder.
     * @example
     * // Update one PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderUpdateArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PaymentOrders.
     * @param {PaymentOrderDeleteManyArgs} args - Arguments to filter PaymentOrders to delete.
     * @example
     * // Delete a few PaymentOrders
     * const { count } = await prisma.paymentOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentOrders
     * const paymentOrder = await prisma.paymentOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentOrder.
     * @param {PaymentOrderUpsertArgs} args - Arguments to update or create a PaymentOrder.
     * @example
     * // Update or create a PaymentOrder
     * const paymentOrder = await prisma.paymentOrder.upsert({
     *   create: {
     *     // ... data to create a PaymentOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentOrder we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentOrderUpsertArgs<ExtArgs>>
    ): Prisma__PaymentOrderClient<$Result.GetResult<Prisma.$PaymentOrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PaymentOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderCountArgs} args - Arguments to filter PaymentOrders to count.
     * @example
     * // Count the number of PaymentOrders
     * const count = await prisma.paymentOrder.count({
     *   where: {
     *     // ... the filter for the PaymentOrders we want to count
     *   }
     * })
    **/
    count<T extends PaymentOrderCountArgs>(
      args?: Subset<T, PaymentOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentOrderAggregateArgs>(args: Subset<T, PaymentOrderAggregateArgs>): Prisma.PrismaPromise<GetPaymentOrderAggregateType<T>>

    /**
     * Group by PaymentOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentOrderGroupByArgs['orderBy'] }
        : { orderBy?: PaymentOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentOrder model
   */
  readonly fields: PaymentOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PaymentOrder model
   */ 
  interface PaymentOrderFieldRefs {
    readonly id: FieldRef<"PaymentOrder", 'String'>
    readonly userUid: FieldRef<"PaymentOrder", 'String'>
    readonly regionUid: FieldRef<"PaymentOrder", 'String'>
    readonly created_at: FieldRef<"PaymentOrder", 'DateTime'>
    readonly regionUserOwner: FieldRef<"PaymentOrder", 'String'>
    readonly method: FieldRef<"PaymentOrder", 'String'>
    readonly amount: FieldRef<"PaymentOrder", 'BigInt'>
    readonly gift: FieldRef<"PaymentOrder", 'BigInt'>
    readonly trade_no: FieldRef<"PaymentOrder", 'String'>
    readonly code_url: FieldRef<"PaymentOrder", 'String'>
    readonly invoiced_at: FieldRef<"PaymentOrder", 'Boolean'>
    readonly remark: FieldRef<"PaymentOrder", 'String'>
    readonly activityType: FieldRef<"PaymentOrder", 'String'>
    readonly message: FieldRef<"PaymentOrder", 'String'>
    readonly card_uid: FieldRef<"PaymentOrder", 'String'>
    readonly type: FieldRef<"PaymentOrder", 'String'>
    readonly charge_source: FieldRef<"PaymentOrder", 'String'>
    readonly status: FieldRef<"PaymentOrder", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PaymentOrder findUnique
   */
  export type PaymentOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter, which PaymentOrder to fetch.
     */
    where: PaymentOrderWhereUniqueInput
  }


  /**
   * PaymentOrder findUniqueOrThrow
   */
  export type PaymentOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter, which PaymentOrder to fetch.
     */
    where: PaymentOrderWhereUniqueInput
  }


  /**
   * PaymentOrder findFirst
   */
  export type PaymentOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter, which PaymentOrder to fetch.
     */
    where?: PaymentOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentOrders to fetch.
     */
    orderBy?: PaymentOrderOrderByWithRelationInput | PaymentOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentOrders.
     */
    cursor?: PaymentOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentOrders.
     */
    distinct?: PaymentOrderScalarFieldEnum | PaymentOrderScalarFieldEnum[]
  }


  /**
   * PaymentOrder findFirstOrThrow
   */
  export type PaymentOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter, which PaymentOrder to fetch.
     */
    where?: PaymentOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentOrders to fetch.
     */
    orderBy?: PaymentOrderOrderByWithRelationInput | PaymentOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentOrders.
     */
    cursor?: PaymentOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentOrders.
     */
    distinct?: PaymentOrderScalarFieldEnum | PaymentOrderScalarFieldEnum[]
  }


  /**
   * PaymentOrder findMany
   */
  export type PaymentOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter, which PaymentOrders to fetch.
     */
    where?: PaymentOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentOrders to fetch.
     */
    orderBy?: PaymentOrderOrderByWithRelationInput | PaymentOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentOrders.
     */
    cursor?: PaymentOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentOrders.
     */
    skip?: number
    distinct?: PaymentOrderScalarFieldEnum | PaymentOrderScalarFieldEnum[]
  }


  /**
   * PaymentOrder create
   */
  export type PaymentOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * The data needed to create a PaymentOrder.
     */
    data: XOR<PaymentOrderCreateInput, PaymentOrderUncheckedCreateInput>
  }


  /**
   * PaymentOrder createMany
   */
  export type PaymentOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentOrders.
     */
    data: PaymentOrderCreateManyInput | PaymentOrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PaymentOrder update
   */
  export type PaymentOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * The data needed to update a PaymentOrder.
     */
    data: XOR<PaymentOrderUpdateInput, PaymentOrderUncheckedUpdateInput>
    /**
     * Choose, which PaymentOrder to update.
     */
    where: PaymentOrderWhereUniqueInput
  }


  /**
   * PaymentOrder updateMany
   */
  export type PaymentOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentOrders.
     */
    data: XOR<PaymentOrderUpdateManyMutationInput, PaymentOrderUncheckedUpdateManyInput>
    /**
     * Filter which PaymentOrders to update
     */
    where?: PaymentOrderWhereInput
  }


  /**
   * PaymentOrder upsert
   */
  export type PaymentOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * The filter to search for the PaymentOrder to update in case it exists.
     */
    where: PaymentOrderWhereUniqueInput
    /**
     * In case the PaymentOrder found by the `where` argument doesn't exist, create a new PaymentOrder with this data.
     */
    create: XOR<PaymentOrderCreateInput, PaymentOrderUncheckedCreateInput>
    /**
     * In case the PaymentOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentOrderUpdateInput, PaymentOrderUncheckedUpdateInput>
  }


  /**
   * PaymentOrder delete
   */
  export type PaymentOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
    /**
     * Filter which PaymentOrder to delete.
     */
    where: PaymentOrderWhereUniqueInput
  }


  /**
   * PaymentOrder deleteMany
   */
  export type PaymentOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentOrders to delete
     */
    where?: PaymentOrderWhereInput
  }


  /**
   * PaymentOrder without action
   */
  export type PaymentOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentOrder
     */
    select?: PaymentOrderSelect<ExtArgs> | null
  }



  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    plan_id: string | null
    plan_name: string | null
    user_uid: string | null
    status: string | null
    start_at: Date | null
    update_at: Date | null
    expire_at: Date | null
    card_id: string | null
    next_cycle_date: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    plan_id: string | null
    plan_name: string | null
    user_uid: string | null
    status: string | null
    start_at: Date | null
    update_at: Date | null
    expire_at: Date | null
    card_id: string | null
    next_cycle_date: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    plan_id: number
    plan_name: number
    user_uid: number
    status: number
    start_at: number
    update_at: number
    expire_at: number
    card_id: number
    next_cycle_date: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    plan_id?: true
    plan_name?: true
    user_uid?: true
    status?: true
    start_at?: true
    update_at?: true
    expire_at?: true
    card_id?: true
    next_cycle_date?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    plan_id?: true
    plan_name?: true
    user_uid?: true
    status?: true
    start_at?: true
    update_at?: true
    expire_at?: true
    card_id?: true
    next_cycle_date?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    plan_id?: true
    plan_name?: true
    user_uid?: true
    status?: true
    start_at?: true
    update_at?: true
    expire_at?: true
    card_id?: true
    next_cycle_date?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    plan_id: string
    plan_name: string | null
    user_uid: string
    status: string | null
    start_at: Date | null
    update_at: Date | null
    expire_at: Date | null
    card_id: string | null
    next_cycle_date: Date | null
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plan_id?: boolean
    plan_name?: boolean
    user_uid?: boolean
    status?: boolean
    start_at?: boolean
    update_at?: boolean
    expire_at?: boolean
    card_id?: boolean
    next_cycle_date?: boolean
    subscriptionPlan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    plan_id?: boolean
    plan_name?: boolean
    user_uid?: boolean
    status?: boolean
    start_at?: boolean
    update_at?: boolean
    expire_at?: boolean
    card_id?: boolean
    next_cycle_date?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptionPlan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      subscriptionPlan: Prisma.$SubscriptionPlanPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plan_id: string
      plan_name: string | null
      user_uid: string
      status: string | null
      start_at: Date | null
      update_at: Date | null
      expire_at: Date | null
      card_id: string | null
      next_cycle_date: Date | null
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }


  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
    **/
    create<T extends SubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subscriptions.
     *     @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     *     @example
     *     // Create many Subscriptions
     *     const subscription = await prisma.subscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
    **/
    delete<T extends SubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
    **/
    upsert<T extends SubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subscriptionPlan<T extends SubscriptionPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlanDefaultArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly plan_id: FieldRef<"Subscription", 'String'>
    readonly plan_name: FieldRef<"Subscription", 'String'>
    readonly user_uid: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly start_at: FieldRef<"Subscription", 'DateTime'>
    readonly update_at: FieldRef<"Subscription", 'DateTime'>
    readonly expire_at: FieldRef<"Subscription", 'DateTime'>
    readonly card_id: FieldRef<"Subscription", 'String'>
    readonly next_cycle_date: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }


  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }


  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }


  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }


  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model SubscriptionPlan
   */

  export type AggregateSubscriptionPlan = {
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  export type SubscriptionPlanAvgAggregateOutputType = {
    amount: number | null
    gift_amount: number | null
    max_seats: number | null
    max_workspaces: number | null
  }

  export type SubscriptionPlanSumAggregateOutputType = {
    amount: bigint | null
    gift_amount: bigint | null
    max_seats: bigint | null
    max_workspaces: bigint | null
  }

  export type SubscriptionPlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    amount: bigint | null
    gift_amount: bigint | null
    period: string | null
    max_seats: bigint | null
    max_workspaces: bigint | null
    max_resources: string | null
    created_at: Date | null
    updated_at: Date | null
    most_popular: boolean | null
  }

  export type SubscriptionPlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    amount: bigint | null
    gift_amount: bigint | null
    period: string | null
    max_seats: bigint | null
    max_workspaces: bigint | null
    max_resources: string | null
    created_at: Date | null
    updated_at: Date | null
    most_popular: boolean | null
  }

  export type SubscriptionPlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    amount: number
    gift_amount: number
    period: number
    upgrade_plan_list: number
    downgrade_plan_list: number
    max_seats: number
    max_workspaces: number
    max_resources: number
    created_at: number
    updated_at: number
    most_popular: number
    _all: number
  }


  export type SubscriptionPlanAvgAggregateInputType = {
    amount?: true
    gift_amount?: true
    max_seats?: true
    max_workspaces?: true
  }

  export type SubscriptionPlanSumAggregateInputType = {
    amount?: true
    gift_amount?: true
    max_seats?: true
    max_workspaces?: true
  }

  export type SubscriptionPlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    gift_amount?: true
    period?: true
    max_seats?: true
    max_workspaces?: true
    max_resources?: true
    created_at?: true
    updated_at?: true
    most_popular?: true
  }

  export type SubscriptionPlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    gift_amount?: true
    period?: true
    max_seats?: true
    max_workspaces?: true
    max_resources?: true
    created_at?: true
    updated_at?: true
    most_popular?: true
  }

  export type SubscriptionPlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    gift_amount?: true
    period?: true
    upgrade_plan_list?: true
    downgrade_plan_list?: true
    max_seats?: true
    max_workspaces?: true
    max_resources?: true
    created_at?: true
    updated_at?: true
    most_popular?: true
    _all?: true
  }

  export type SubscriptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlan to aggregate.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPlans
    **/
    _count?: true | SubscriptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type GetSubscriptionPlanAggregateType<T extends SubscriptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
      : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
  }




  export type SubscriptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPlanWhereInput
    orderBy?: SubscriptionPlanOrderByWithAggregationInput | SubscriptionPlanOrderByWithAggregationInput[]
    by: SubscriptionPlanScalarFieldEnum[] | SubscriptionPlanScalarFieldEnum
    having?: SubscriptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPlanCountAggregateInputType | true
    _avg?: SubscriptionPlanAvgAggregateInputType
    _sum?: SubscriptionPlanSumAggregateInputType
    _min?: SubscriptionPlanMinAggregateInputType
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type SubscriptionPlanGroupByOutputType = {
    id: string
    name: string
    description: string | null
    amount: bigint | null
    gift_amount: bigint | null
    period: string | null
    upgrade_plan_list: string[]
    downgrade_plan_list: string[]
    max_seats: bigint
    max_workspaces: bigint
    max_resources: string | null
    created_at: Date | null
    updated_at: Date | null
    most_popular: boolean | null
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  type GetSubscriptionPlanGroupByPayload<T extends SubscriptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    gift_amount?: boolean
    period?: boolean
    upgrade_plan_list?: boolean
    downgrade_plan_list?: boolean
    max_seats?: boolean
    max_workspaces?: boolean
    max_resources?: boolean
    created_at?: boolean
    updated_at?: boolean
    most_popular?: boolean
    Subscription?: boolean | SubscriptionPlan$SubscriptionArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    gift_amount?: boolean
    period?: boolean
    upgrade_plan_list?: boolean
    downgrade_plan_list?: boolean
    max_seats?: boolean
    max_workspaces?: boolean
    max_resources?: boolean
    created_at?: boolean
    updated_at?: boolean
    most_popular?: boolean
  }

  export type SubscriptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subscription?: boolean | SubscriptionPlan$SubscriptionArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubscriptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPlan"
    objects: {
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      amount: bigint | null
      gift_amount: bigint | null
      period: string | null
      upgrade_plan_list: string[]
      downgrade_plan_list: string[]
      max_seats: bigint
      max_workspaces: bigint
      max_resources: string | null
      created_at: Date | null
      updated_at: Date | null
      most_popular: boolean | null
    }, ExtArgs["result"]["subscriptionPlan"]>
    composites: {}
  }


  type SubscriptionPlanGetPayload<S extends boolean | null | undefined | SubscriptionPlanDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPlanPayload, S>

  type SubscriptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionPlanCountAggregateInputType | true
    }

  export interface SubscriptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPlan'], meta: { name: 'SubscriptionPlan' } }
    /**
     * Find zero or one SubscriptionPlan that matches the filter.
     * @param {SubscriptionPlanFindUniqueArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubscriptionPlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanFindUniqueArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubscriptionPlan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubscriptionPlanFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubscriptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubscriptionPlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanFindFirstArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubscriptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubscriptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
     * 
     * // Get first 10 SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubscriptionPlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubscriptionPlan.
     * @param {SubscriptionPlanCreateArgs} args - Arguments to create a SubscriptionPlan.
     * @example
     * // Create one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.create({
     *   data: {
     *     // ... data to create a SubscriptionPlan
     *   }
     * })
     * 
    **/
    create<T extends SubscriptionPlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanCreateArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubscriptionPlans.
     *     @param {SubscriptionPlanCreateManyArgs} args - Arguments to create many SubscriptionPlans.
     *     @example
     *     // Create many SubscriptionPlans
     *     const subscriptionPlan = await prisma.subscriptionPlan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubscriptionPlanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubscriptionPlan.
     * @param {SubscriptionPlanDeleteArgs} args - Arguments to delete one SubscriptionPlan.
     * @example
     * // Delete one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPlan
     *   }
     * })
     * 
    **/
    delete<T extends SubscriptionPlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanDeleteArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubscriptionPlan.
     * @param {SubscriptionPlanUpdateArgs} args - Arguments to update one SubscriptionPlan.
     * @example
     * // Update one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscriptionPlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanUpdateArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubscriptionPlans.
     * @param {SubscriptionPlanDeleteManyArgs} args - Arguments to filter SubscriptionPlans to delete.
     * @example
     * // Delete a few SubscriptionPlans
     * const { count } = await prisma.subscriptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscriptionPlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionPlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscriptionPlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubscriptionPlan.
     * @param {SubscriptionPlanUpsertArgs} args - Arguments to update or create a SubscriptionPlan.
     * @example
     * // Update or create a SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPlan we want to update
     *   }
     * })
    **/
    upsert<T extends SubscriptionPlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionPlanUpsertArgs<ExtArgs>>
    ): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanCountArgs} args - Arguments to filter SubscriptionPlans to count.
     * @example
     * // Count the number of SubscriptionPlans
     * const count = await prisma.subscriptionPlan.count({
     *   where: {
     *     // ... the filter for the SubscriptionPlans we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPlanCountArgs>(
      args?: Subset<T, SubscriptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPlanAggregateArgs>(args: Subset<T, SubscriptionPlanAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPlanAggregateType<T>>

    /**
     * Group by SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPlan model
   */
  readonly fields: SubscriptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Subscription<T extends SubscriptionPlan$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlan$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubscriptionPlan model
   */ 
  interface SubscriptionPlanFieldRefs {
    readonly id: FieldRef<"SubscriptionPlan", 'String'>
    readonly name: FieldRef<"SubscriptionPlan", 'String'>
    readonly description: FieldRef<"SubscriptionPlan", 'String'>
    readonly amount: FieldRef<"SubscriptionPlan", 'BigInt'>
    readonly gift_amount: FieldRef<"SubscriptionPlan", 'BigInt'>
    readonly period: FieldRef<"SubscriptionPlan", 'String'>
    readonly upgrade_plan_list: FieldRef<"SubscriptionPlan", 'String[]'>
    readonly downgrade_plan_list: FieldRef<"SubscriptionPlan", 'String[]'>
    readonly max_seats: FieldRef<"SubscriptionPlan", 'BigInt'>
    readonly max_workspaces: FieldRef<"SubscriptionPlan", 'BigInt'>
    readonly max_resources: FieldRef<"SubscriptionPlan", 'String'>
    readonly created_at: FieldRef<"SubscriptionPlan", 'DateTime'>
    readonly updated_at: FieldRef<"SubscriptionPlan", 'DateTime'>
    readonly most_popular: FieldRef<"SubscriptionPlan", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * SubscriptionPlan findUnique
   */
  export type SubscriptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }


  /**
   * SubscriptionPlan findUniqueOrThrow
   */
  export type SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }


  /**
   * SubscriptionPlan findFirst
   */
  export type SubscriptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }


  /**
   * SubscriptionPlan findFirstOrThrow
   */
  export type SubscriptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }


  /**
   * SubscriptionPlan findMany
   */
  export type SubscriptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlans to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }


  /**
   * SubscriptionPlan create
   */
  export type SubscriptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
  }


  /**
   * SubscriptionPlan createMany
   */
  export type SubscriptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubscriptionPlan update
   */
  export type SubscriptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPlan to update.
     */
    where: SubscriptionPlanWhereUniqueInput
  }


  /**
   * SubscriptionPlan updateMany
   */
  export type SubscriptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
  }


  /**
   * SubscriptionPlan upsert
   */
  export type SubscriptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPlan to update in case it exists.
     */
    where: SubscriptionPlanWhereUniqueInput
    /**
     * In case the SubscriptionPlan found by the `where` argument doesn't exist, create a new SubscriptionPlan with this data.
     */
    create: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
    /**
     * In case the SubscriptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
  }


  /**
   * SubscriptionPlan delete
   */
  export type SubscriptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPlan to delete.
     */
    where: SubscriptionPlanWhereUniqueInput
  }


  /**
   * SubscriptionPlan deleteMany
   */
  export type SubscriptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlans to delete
     */
    where?: SubscriptionPlanWhereInput
  }


  /**
   * SubscriptionPlan.Subscription
   */
  export type SubscriptionPlan$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * SubscriptionPlan without action
   */
  export type SubscriptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
  }



  /**
   * Model UserInfo
   */

  export type AggregateUserInfo = {
    _count: UserInfoCountAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  export type UserInfoMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    firstname: string | null
    lastname: string | null
    signUpRegionUid: string | null
    isInited: boolean | null
    enSubEmail: boolean | null
  }

  export type UserInfoMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    firstname: string | null
    lastname: string | null
    signUpRegionUid: string | null
    isInited: boolean | null
    enSubEmail: boolean | null
  }

  export type UserInfoCountAggregateOutputType = {
    id: number
    userUid: number
    firstname: number
    lastname: number
    signUpRegionUid: number
    isInited: number
    enSubEmail: number
    _all: number
  }


  export type UserInfoMinAggregateInputType = {
    id?: true
    userUid?: true
    firstname?: true
    lastname?: true
    signUpRegionUid?: true
    isInited?: true
    enSubEmail?: true
  }

  export type UserInfoMaxAggregateInputType = {
    id?: true
    userUid?: true
    firstname?: true
    lastname?: true
    signUpRegionUid?: true
    isInited?: true
    enSubEmail?: true
  }

  export type UserInfoCountAggregateInputType = {
    id?: true
    userUid?: true
    firstname?: true
    lastname?: true
    signUpRegionUid?: true
    isInited?: true
    enSubEmail?: true
    _all?: true
  }

  export type UserInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfo to aggregate.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInfos
    **/
    _count?: true | UserInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInfoMaxAggregateInputType
  }

  export type GetUserInfoAggregateType<T extends UserInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInfo[P]>
      : GetScalarType<T[P], AggregateUserInfo[P]>
  }




  export type UserInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInfoWhereInput
    orderBy?: UserInfoOrderByWithAggregationInput | UserInfoOrderByWithAggregationInput[]
    by: UserInfoScalarFieldEnum[] | UserInfoScalarFieldEnum
    having?: UserInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInfoCountAggregateInputType | true
    _min?: UserInfoMinAggregateInputType
    _max?: UserInfoMaxAggregateInputType
  }

  export type UserInfoGroupByOutputType = {
    id: string
    userUid: string
    firstname: string
    lastname: string
    signUpRegionUid: string
    isInited: boolean
    enSubEmail: boolean
    _count: UserInfoCountAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  type GetUserInfoGroupByPayload<T extends UserInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
            : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
        }
      >
    >


  export type UserInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    firstname?: boolean
    lastname?: boolean
    signUpRegionUid?: boolean
    isInited?: boolean
    enSubEmail?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInfo"]>

  export type UserInfoSelectScalar = {
    id?: boolean
    userUid?: boolean
    firstname?: boolean
    lastname?: boolean
    signUpRegionUid?: boolean
    isInited?: boolean
    enSubEmail?: boolean
  }

  export type UserInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      firstname: string
      lastname: string
      signUpRegionUid: string
      isInited: boolean
      enSubEmail: boolean
    }, ExtArgs["result"]["userInfo"]>
    composites: {}
  }


  type UserInfoGetPayload<S extends boolean | null | undefined | UserInfoDefaultArgs> = $Result.GetResult<Prisma.$UserInfoPayload, S>

  type UserInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInfoCountAggregateInputType | true
    }

  export interface UserInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInfo'], meta: { name: 'UserInfo' } }
    /**
     * Find zero or one UserInfo that matches the filter.
     * @param {UserInfoFindUniqueArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserInfoFindUniqueOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindFirstArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInfos
     * const userInfos = await prisma.userInfo.findMany()
     * 
     * // Get first 10 UserInfos
     * const userInfos = await prisma.userInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInfoWithIdOnly = await prisma.userInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserInfo.
     * @param {UserInfoCreateArgs} args - Arguments to create a UserInfo.
     * @example
     * // Create one UserInfo
     * const UserInfo = await prisma.userInfo.create({
     *   data: {
     *     // ... data to create a UserInfo
     *   }
     * })
     * 
    **/
    create<T extends UserInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoCreateArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserInfos.
     *     @param {UserInfoCreateManyArgs} args - Arguments to create many UserInfos.
     *     @example
     *     // Create many UserInfos
     *     const userInfo = await prisma.userInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserInfo.
     * @param {UserInfoDeleteArgs} args - Arguments to delete one UserInfo.
     * @example
     * // Delete one UserInfo
     * const UserInfo = await prisma.userInfo.delete({
     *   where: {
     *     // ... filter to delete one UserInfo
     *   }
     * })
     * 
    **/
    delete<T extends UserInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoDeleteArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserInfo.
     * @param {UserInfoUpdateArgs} args - Arguments to update one UserInfo.
     * @example
     * // Update one UserInfo
     * const userInfo = await prisma.userInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpdateArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserInfos.
     * @param {UserInfoDeleteManyArgs} args - Arguments to filter UserInfos to delete.
     * @example
     * // Delete a few UserInfos
     * const { count } = await prisma.userInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInfos
     * const userInfo = await prisma.userInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInfo.
     * @param {UserInfoUpsertArgs} args - Arguments to update or create a UserInfo.
     * @example
     * // Update or create a UserInfo
     * const userInfo = await prisma.userInfo.upsert({
     *   create: {
     *     // ... data to create a UserInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInfo we want to update
     *   }
     * })
    **/
    upsert<T extends UserInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpsertArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoCountArgs} args - Arguments to filter UserInfos to count.
     * @example
     * // Count the number of UserInfos
     * const count = await prisma.userInfo.count({
     *   where: {
     *     // ... the filter for the UserInfos we want to count
     *   }
     * })
    **/
    count<T extends UserInfoCountArgs>(
      args?: Subset<T, UserInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInfoAggregateArgs>(args: Subset<T, UserInfoAggregateArgs>): Prisma.PrismaPromise<GetUserInfoAggregateType<T>>

    /**
     * Group by UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInfoGroupByArgs['orderBy'] }
        : { orderBy?: UserInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInfo model
   */
  readonly fields: UserInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserInfo model
   */ 
  interface UserInfoFieldRefs {
    readonly id: FieldRef<"UserInfo", 'String'>
    readonly userUid: FieldRef<"UserInfo", 'String'>
    readonly firstname: FieldRef<"UserInfo", 'String'>
    readonly lastname: FieldRef<"UserInfo", 'String'>
    readonly signUpRegionUid: FieldRef<"UserInfo", 'String'>
    readonly isInited: FieldRef<"UserInfo", 'Boolean'>
    readonly enSubEmail: FieldRef<"UserInfo", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * UserInfo findUnique
   */
  export type UserInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }


  /**
   * UserInfo findUniqueOrThrow
   */
  export type UserInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }


  /**
   * UserInfo findFirst
   */
  export type UserInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }


  /**
   * UserInfo findFirstOrThrow
   */
  export type UserInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }


  /**
   * UserInfo findMany
   */
  export type UserInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfos to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }


  /**
   * UserInfo create
   */
  export type UserInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInfo.
     */
    data: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
  }


  /**
   * UserInfo createMany
   */
  export type UserInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInfos.
     */
    data: UserInfoCreateManyInput | UserInfoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserInfo update
   */
  export type UserInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInfo.
     */
    data: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
    /**
     * Choose, which UserInfo to update.
     */
    where: UserInfoWhereUniqueInput
  }


  /**
   * UserInfo updateMany
   */
  export type UserInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInfos.
     */
    data: XOR<UserInfoUpdateManyMutationInput, UserInfoUncheckedUpdateManyInput>
    /**
     * Filter which UserInfos to update
     */
    where?: UserInfoWhereInput
  }


  /**
   * UserInfo upsert
   */
  export type UserInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInfo to update in case it exists.
     */
    where: UserInfoWhereUniqueInput
    /**
     * In case the UserInfo found by the `where` argument doesn't exist, create a new UserInfo with this data.
     */
    create: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
    /**
     * In case the UserInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
  }


  /**
   * UserInfo delete
   */
  export type UserInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter which UserInfo to delete.
     */
    where: UserInfoWhereUniqueInput
  }


  /**
   * UserInfo deleteMany
   */
  export type UserInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfos to delete
     */
    where?: UserInfoWhereInput
  }


  /**
   * UserInfo without action
   */
  export type UserInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInfoInclude<ExtArgs> | null
  }



  /**
   * Model WorkspaceUsage
   */

  export type AggregateWorkspaceUsage = {
    _count: WorkspaceUsageCountAggregateOutputType | null
    _avg: WorkspaceUsageAvgAggregateOutputType | null
    _sum: WorkspaceUsageSumAggregateOutputType | null
    _min: WorkspaceUsageMinAggregateOutputType | null
    _max: WorkspaceUsageMaxAggregateOutputType | null
  }

  export type WorkspaceUsageAvgAggregateOutputType = {
    seat: number | null
  }

  export type WorkspaceUsageSumAggregateOutputType = {
    seat: number | null
  }

  export type WorkspaceUsageMinAggregateOutputType = {
    id: string | null
    userUid: string | null
    workspaceUid: string | null
    regionUid: string | null
    seat: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceUsageMaxAggregateOutputType = {
    id: string | null
    userUid: string | null
    workspaceUid: string | null
    regionUid: string | null
    seat: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceUsageCountAggregateOutputType = {
    id: number
    userUid: number
    workspaceUid: number
    regionUid: number
    seat: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceUsageAvgAggregateInputType = {
    seat?: true
  }

  export type WorkspaceUsageSumAggregateInputType = {
    seat?: true
  }

  export type WorkspaceUsageMinAggregateInputType = {
    id?: true
    userUid?: true
    workspaceUid?: true
    regionUid?: true
    seat?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceUsageMaxAggregateInputType = {
    id?: true
    userUid?: true
    workspaceUid?: true
    regionUid?: true
    seat?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceUsageCountAggregateInputType = {
    id?: true
    userUid?: true
    workspaceUid?: true
    regionUid?: true
    seat?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUsage to aggregate.
     */
    where?: WorkspaceUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsages to fetch.
     */
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceUsages
    **/
    _count?: true | WorkspaceUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspaceUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspaceUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceUsageMaxAggregateInputType
  }

  export type GetWorkspaceUsageAggregateType<T extends WorkspaceUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceUsage[P]>
      : GetScalarType<T[P], AggregateWorkspaceUsage[P]>
  }




  export type WorkspaceUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUsageWhereInput
    orderBy?: WorkspaceUsageOrderByWithAggregationInput | WorkspaceUsageOrderByWithAggregationInput[]
    by: WorkspaceUsageScalarFieldEnum[] | WorkspaceUsageScalarFieldEnum
    having?: WorkspaceUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceUsageCountAggregateInputType | true
    _avg?: WorkspaceUsageAvgAggregateInputType
    _sum?: WorkspaceUsageSumAggregateInputType
    _min?: WorkspaceUsageMinAggregateInputType
    _max?: WorkspaceUsageMaxAggregateInputType
  }

  export type WorkspaceUsageGroupByOutputType = {
    id: string
    userUid: string
    workspaceUid: string
    regionUid: string
    seat: number
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceUsageCountAggregateOutputType | null
    _avg: WorkspaceUsageAvgAggregateOutputType | null
    _sum: WorkspaceUsageSumAggregateOutputType | null
    _min: WorkspaceUsageMinAggregateOutputType | null
    _max: WorkspaceUsageMaxAggregateOutputType | null
  }

  type GetWorkspaceUsageGroupByPayload<T extends WorkspaceUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceUsageGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceUsageGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userUid?: boolean
    workspaceUid?: boolean
    regionUid?: boolean
    seat?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceUsage"]>

  export type WorkspaceUsageSelectScalar = {
    id?: boolean
    userUid?: boolean
    workspaceUid?: boolean
    regionUid?: boolean
    seat?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $WorkspaceUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceUsage"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userUid: string
      workspaceUid: string
      regionUid: string
      seat: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceUsage"]>
    composites: {}
  }


  type WorkspaceUsageGetPayload<S extends boolean | null | undefined | WorkspaceUsageDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceUsagePayload, S>

  type WorkspaceUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkspaceUsageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkspaceUsageCountAggregateInputType | true
    }

  export interface WorkspaceUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceUsage'], meta: { name: 'WorkspaceUsage' } }
    /**
     * Find zero or one WorkspaceUsage that matches the filter.
     * @param {WorkspaceUsageFindUniqueArgs} args - Arguments to find a WorkspaceUsage
     * @example
     * // Get one WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkspaceUsageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkspaceUsage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkspaceUsageFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceUsage
     * @example
     * // Get one WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkspaceUsageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkspaceUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageFindFirstArgs} args - Arguments to find a WorkspaceUsage
     * @example
     * // Get one WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkspaceUsageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageFindFirstArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkspaceUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageFindFirstOrThrowArgs} args - Arguments to find a WorkspaceUsage
     * @example
     * // Get one WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkspaceUsageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkspaceUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceUsages
     * const workspaceUsages = await prisma.workspaceUsage.findMany()
     * 
     * // Get first 10 WorkspaceUsages
     * const workspaceUsages = await prisma.workspaceUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceUsageWithIdOnly = await prisma.workspaceUsage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkspaceUsageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkspaceUsage.
     * @param {WorkspaceUsageCreateArgs} args - Arguments to create a WorkspaceUsage.
     * @example
     * // Create one WorkspaceUsage
     * const WorkspaceUsage = await prisma.workspaceUsage.create({
     *   data: {
     *     // ... data to create a WorkspaceUsage
     *   }
     * })
     * 
    **/
    create<T extends WorkspaceUsageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageCreateArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkspaceUsages.
     *     @param {WorkspaceUsageCreateManyArgs} args - Arguments to create many WorkspaceUsages.
     *     @example
     *     // Create many WorkspaceUsages
     *     const workspaceUsage = await prisma.workspaceUsage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkspaceUsageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkspaceUsage.
     * @param {WorkspaceUsageDeleteArgs} args - Arguments to delete one WorkspaceUsage.
     * @example
     * // Delete one WorkspaceUsage
     * const WorkspaceUsage = await prisma.workspaceUsage.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceUsage
     *   }
     * })
     * 
    **/
    delete<T extends WorkspaceUsageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageDeleteArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkspaceUsage.
     * @param {WorkspaceUsageUpdateArgs} args - Arguments to update one WorkspaceUsage.
     * @example
     * // Update one WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkspaceUsageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageUpdateArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkspaceUsages.
     * @param {WorkspaceUsageDeleteManyArgs} args - Arguments to filter WorkspaceUsages to delete.
     * @example
     * // Delete a few WorkspaceUsages
     * const { count } = await prisma.workspaceUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkspaceUsageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkspaceUsageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceUsages
     * const workspaceUsage = await prisma.workspaceUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkspaceUsageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkspaceUsage.
     * @param {WorkspaceUsageUpsertArgs} args - Arguments to update or create a WorkspaceUsage.
     * @example
     * // Update or create a WorkspaceUsage
     * const workspaceUsage = await prisma.workspaceUsage.upsert({
     *   create: {
     *     // ... data to create a WorkspaceUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceUsage we want to update
     *   }
     * })
    **/
    upsert<T extends WorkspaceUsageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkspaceUsageUpsertArgs<ExtArgs>>
    ): Prisma__WorkspaceUsageClient<$Result.GetResult<Prisma.$WorkspaceUsagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkspaceUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageCountArgs} args - Arguments to filter WorkspaceUsages to count.
     * @example
     * // Count the number of WorkspaceUsages
     * const count = await prisma.workspaceUsage.count({
     *   where: {
     *     // ... the filter for the WorkspaceUsages we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceUsageCountArgs>(
      args?: Subset<T, WorkspaceUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceUsageAggregateArgs>(args: Subset<T, WorkspaceUsageAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceUsageAggregateType<T>>

    /**
     * Group by WorkspaceUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceUsageGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceUsage model
   */
  readonly fields: WorkspaceUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkspaceUsage model
   */ 
  interface WorkspaceUsageFieldRefs {
    readonly id: FieldRef<"WorkspaceUsage", 'String'>
    readonly userUid: FieldRef<"WorkspaceUsage", 'String'>
    readonly workspaceUid: FieldRef<"WorkspaceUsage", 'String'>
    readonly regionUid: FieldRef<"WorkspaceUsage", 'String'>
    readonly seat: FieldRef<"WorkspaceUsage", 'Int'>
    readonly createdAt: FieldRef<"WorkspaceUsage", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceUsage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * WorkspaceUsage findUnique
   */
  export type WorkspaceUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsage to fetch.
     */
    where: WorkspaceUsageWhereUniqueInput
  }


  /**
   * WorkspaceUsage findUniqueOrThrow
   */
  export type WorkspaceUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsage to fetch.
     */
    where: WorkspaceUsageWhereUniqueInput
  }


  /**
   * WorkspaceUsage findFirst
   */
  export type WorkspaceUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsage to fetch.
     */
    where?: WorkspaceUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsages to fetch.
     */
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUsages.
     */
    cursor?: WorkspaceUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUsages.
     */
    distinct?: WorkspaceUsageScalarFieldEnum | WorkspaceUsageScalarFieldEnum[]
  }


  /**
   * WorkspaceUsage findFirstOrThrow
   */
  export type WorkspaceUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsage to fetch.
     */
    where?: WorkspaceUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsages to fetch.
     */
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUsages.
     */
    cursor?: WorkspaceUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUsages.
     */
    distinct?: WorkspaceUsageScalarFieldEnum | WorkspaceUsageScalarFieldEnum[]
  }


  /**
   * WorkspaceUsage findMany
   */
  export type WorkspaceUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsages to fetch.
     */
    where?: WorkspaceUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsages to fetch.
     */
    orderBy?: WorkspaceUsageOrderByWithRelationInput | WorkspaceUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceUsages.
     */
    cursor?: WorkspaceUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsages.
     */
    skip?: number
    distinct?: WorkspaceUsageScalarFieldEnum | WorkspaceUsageScalarFieldEnum[]
  }


  /**
   * WorkspaceUsage create
   */
  export type WorkspaceUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceUsage.
     */
    data: XOR<WorkspaceUsageCreateInput, WorkspaceUsageUncheckedCreateInput>
  }


  /**
   * WorkspaceUsage createMany
   */
  export type WorkspaceUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceUsages.
     */
    data: WorkspaceUsageCreateManyInput | WorkspaceUsageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WorkspaceUsage update
   */
  export type WorkspaceUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceUsage.
     */
    data: XOR<WorkspaceUsageUpdateInput, WorkspaceUsageUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceUsage to update.
     */
    where: WorkspaceUsageWhereUniqueInput
  }


  /**
   * WorkspaceUsage updateMany
   */
  export type WorkspaceUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceUsages.
     */
    data: XOR<WorkspaceUsageUpdateManyMutationInput, WorkspaceUsageUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceUsages to update
     */
    where?: WorkspaceUsageWhereInput
  }


  /**
   * WorkspaceUsage upsert
   */
  export type WorkspaceUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceUsage to update in case it exists.
     */
    where: WorkspaceUsageWhereUniqueInput
    /**
     * In case the WorkspaceUsage found by the `where` argument doesn't exist, create a new WorkspaceUsage with this data.
     */
    create: XOR<WorkspaceUsageCreateInput, WorkspaceUsageUncheckedCreateInput>
    /**
     * In case the WorkspaceUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUsageUpdateInput, WorkspaceUsageUncheckedUpdateInput>
  }


  /**
   * WorkspaceUsage delete
   */
  export type WorkspaceUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceUsage to delete.
     */
    where: WorkspaceUsageWhereUniqueInput
  }


  /**
   * WorkspaceUsage deleteMany
   */
  export type WorkspaceUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUsages to delete
     */
    where?: WorkspaceUsageWhereInput
  }


  /**
   * WorkspaceUsage without action
   */
  export type WorkspaceUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUsage
     */
    select?: WorkspaceUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkspaceUsageInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OauthProviderScalarFieldEnum: {
    uid: 'uid',
    userUid: 'userUid',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    providerType: 'providerType',
    providerId: 'providerId',
    password: 'password'
  };

  export type OauthProviderScalarFieldEnum = (typeof OauthProviderScalarFieldEnum)[keyof typeof OauthProviderScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    uid: 'uid',
    displayName: 'displayName',
    location: 'location',
    domain: 'domain',
    description: 'description'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    userUid: 'userUid',
    activityBonus: 'activityBonus',
    encryptBalance: 'encryptBalance',
    encryptDeductionBalance: 'encryptDeductionBalance',
    created_at: 'created_at',
    create_region_id: 'create_region_id',
    balance: 'balance',
    deduction_balance: 'deduction_balance'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AccountTransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    deduction_balance: 'deduction_balance',
    balance: 'balance',
    message: 'message',
    created_at: 'created_at',
    updated_at: 'updated_at',
    billing_id: 'billing_id',
    userUid: 'userUid',
    balance_before: 'balance_before',
    deduction_balance_before: 'deduction_balance_before',
    region: 'region',
    deduction_credit: 'deduction_credit',
    billing_id_list: 'billing_id_list',
    credit_id_list: 'credit_id_list'
  };

  export type AccountTransactionScalarFieldEnum = (typeof AccountTransactionScalarFieldEnum)[keyof typeof AccountTransactionScalarFieldEnum]


  export const ErrorPaymentCreateScalarFieldEnum: {
    userUid: 'userUid',
    regionUid: 'regionUid',
    created_at: 'created_at',
    regionUserOwner: 'regionUserOwner',
    method: 'method',
    amount: 'amount',
    gift: 'gift',
    trade_no: 'trade_no',
    code_url: 'code_url',
    invoiced_at: 'invoiced_at',
    remark: 'remark',
    message: 'message',
    create_time: 'create_time'
  };

  export type ErrorPaymentCreateScalarFieldEnum = (typeof ErrorPaymentCreateScalarFieldEnum)[keyof typeof ErrorPaymentCreateScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    regionUid: 'regionUid',
    created_at: 'created_at',
    regionUserOwner: 'regionUserOwner',
    method: 'method',
    amount: 'amount',
    gift: 'gift',
    trade_no: 'trade_no',
    code_url: 'code_url',
    invoiced_at: 'invoiced_at',
    remark: 'remark',
    message: 'message',
    activityType: 'activityType',
    metadata: 'metadata',
    card_uid: 'card_uid',
    type: 'type',
    charge_source: 'charge_source'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    uid: 'uid',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    avatarUri: 'avatarUri',
    nickname: 'nickname',
    id: 'id',
    name: 'name',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InviteRewardScalarFieldEnum: {
    payment_id: 'payment_id',
    userUid: 'userUid',
    created_at: 'created_at',
    payment_amount: 'payment_amount',
    reward_amount: 'reward_amount',
    inviteFrom: 'inviteFrom'
  };

  export type InviteRewardScalarFieldEnum = (typeof InviteRewardScalarFieldEnum)[keyof typeof InviteRewardScalarFieldEnum]


  export const UserSemChannelScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    channel: 'channel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    additionalInfo: 'additionalInfo'
  };

  export type UserSemChannelScalarFieldEnum = (typeof UserSemChannelScalarFieldEnum)[keyof typeof UserSemChannelScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    reward: 'reward',
    order: 'order',
    isActive: 'isActive',
    isNewUserTask: 'isNewUserTask',
    taskType: 'taskType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const UserTaskScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    taskId: 'taskId',
    status: 'status',
    rewardStatus: 'rewardStatus',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTaskScalarFieldEnum = (typeof UserTaskScalarFieldEnum)[keyof typeof UserTaskScalarFieldEnum]


  export const CardInfoScalarFieldEnum: {
    id: 'id',
    user_uid: 'user_uid',
    card_no: 'card_no',
    card_brand: 'card_brand',
    card_token: 'card_token',
    created_at: 'created_at',
    network_transaction_id: 'network_transaction_id',
    default: 'default',
    last_payment_status: 'last_payment_status'
  };

  export type CardInfoScalarFieldEnum = (typeof CardInfoScalarFieldEnum)[keyof typeof CardInfoScalarFieldEnum]


  export const CreditsScalarFieldEnum: {
    id: 'id',
    user_uid: 'user_uid',
    amount: 'amount',
    used_amount: 'used_amount',
    from_id: 'from_id',
    from_type: 'from_type',
    expire_at: 'expire_at',
    created_at: 'created_at',
    start_at: 'start_at',
    status: 'status'
  };

  export type CreditsScalarFieldEnum = (typeof CreditsScalarFieldEnum)[keyof typeof CreditsScalarFieldEnum]


  export const InvoicePaymentScalarFieldEnum: {
    invoice_id: 'invoice_id',
    payment_id: 'payment_id',
    amount: 'amount'
  };

  export type InvoicePaymentScalarFieldEnum = (typeof InvoicePaymentScalarFieldEnum)[keyof typeof InvoicePaymentScalarFieldEnum]


  export const PaymentOrderScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    regionUid: 'regionUid',
    created_at: 'created_at',
    regionUserOwner: 'regionUserOwner',
    method: 'method',
    amount: 'amount',
    gift: 'gift',
    trade_no: 'trade_no',
    code_url: 'code_url',
    invoiced_at: 'invoiced_at',
    remark: 'remark',
    activityType: 'activityType',
    message: 'message',
    card_uid: 'card_uid',
    type: 'type',
    charge_source: 'charge_source',
    status: 'status'
  };

  export type PaymentOrderScalarFieldEnum = (typeof PaymentOrderScalarFieldEnum)[keyof typeof PaymentOrderScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    plan_id: 'plan_id',
    plan_name: 'plan_name',
    user_uid: 'user_uid',
    status: 'status',
    start_at: 'start_at',
    update_at: 'update_at',
    expire_at: 'expire_at',
    card_id: 'card_id',
    next_cycle_date: 'next_cycle_date'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const SubscriptionPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    amount: 'amount',
    gift_amount: 'gift_amount',
    period: 'period',
    upgrade_plan_list: 'upgrade_plan_list',
    downgrade_plan_list: 'downgrade_plan_list',
    max_seats: 'max_seats',
    max_workspaces: 'max_workspaces',
    max_resources: 'max_resources',
    created_at: 'created_at',
    updated_at: 'updated_at',
    most_popular: 'most_popular'
  };

  export type SubscriptionPlanScalarFieldEnum = (typeof SubscriptionPlanScalarFieldEnum)[keyof typeof SubscriptionPlanScalarFieldEnum]


  export const UserInfoScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    firstname: 'firstname',
    lastname: 'lastname',
    signUpRegionUid: 'signUpRegionUid',
    isInited: 'isInited',
    enSubEmail: 'enSubEmail'
  };

  export type UserInfoScalarFieldEnum = (typeof UserInfoScalarFieldEnum)[keyof typeof UserInfoScalarFieldEnum]


  export const WorkspaceUsageScalarFieldEnum: {
    id: 'id',
    userUid: 'userUid',
    workspaceUid: 'workspaceUid',
    regionUid: 'regionUid',
    seat: 'seat',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceUsageScalarFieldEnum = (typeof WorkspaceUsageScalarFieldEnum)[keyof typeof WorkspaceUsageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ProviderType'
   */
  export type EnumProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProviderType'>
    


  /**
   * Reference to a field of type 'ProviderType[]'
   */
  export type ListEnumProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProviderType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TaskType'
   */
  export type EnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType'>
    


  /**
   * Reference to a field of type 'TaskType[]'
   */
  export type ListEnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type OauthProviderWhereInput = {
    AND?: OauthProviderWhereInput | OauthProviderWhereInput[]
    OR?: OauthProviderWhereInput[]
    NOT?: OauthProviderWhereInput | OauthProviderWhereInput[]
    uid?: UuidFilter<"OauthProvider"> | string
    userUid?: UuidFilter<"OauthProvider"> | string
    createdAt?: DateTimeFilter<"OauthProvider"> | Date | string
    updatedAt?: DateTimeFilter<"OauthProvider"> | Date | string
    providerType?: EnumProviderTypeFilter<"OauthProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"OauthProvider"> | string
    password?: StringNullableFilter<"OauthProvider"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OauthProviderOrderByWithRelationInput = {
    uid?: SortOrder
    userUid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    password?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OauthProviderWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    providerId_providerType?: OauthProviderProviderIdProviderTypeCompoundUniqueInput
    AND?: OauthProviderWhereInput | OauthProviderWhereInput[]
    OR?: OauthProviderWhereInput[]
    NOT?: OauthProviderWhereInput | OauthProviderWhereInput[]
    userUid?: UuidFilter<"OauthProvider"> | string
    createdAt?: DateTimeFilter<"OauthProvider"> | Date | string
    updatedAt?: DateTimeFilter<"OauthProvider"> | Date | string
    providerType?: EnumProviderTypeFilter<"OauthProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"OauthProvider"> | string
    password?: StringNullableFilter<"OauthProvider"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "uid" | "providerId_providerType">

  export type OauthProviderOrderByWithAggregationInput = {
    uid?: SortOrder
    userUid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: OauthProviderCountOrderByAggregateInput
    _max?: OauthProviderMaxOrderByAggregateInput
    _min?: OauthProviderMinOrderByAggregateInput
  }

  export type OauthProviderScalarWhereWithAggregatesInput = {
    AND?: OauthProviderScalarWhereWithAggregatesInput | OauthProviderScalarWhereWithAggregatesInput[]
    OR?: OauthProviderScalarWhereWithAggregatesInput[]
    NOT?: OauthProviderScalarWhereWithAggregatesInput | OauthProviderScalarWhereWithAggregatesInput[]
    uid?: UuidWithAggregatesFilter<"OauthProvider"> | string
    userUid?: UuidWithAggregatesFilter<"OauthProvider"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OauthProvider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OauthProvider"> | Date | string
    providerType?: EnumProviderTypeWithAggregatesFilter<"OauthProvider"> | $Enums.ProviderType
    providerId?: StringWithAggregatesFilter<"OauthProvider"> | string
    password?: StringNullableWithAggregatesFilter<"OauthProvider"> | string | null
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    uid?: UuidFilter<"Region"> | string
    displayName?: StringFilter<"Region"> | string
    location?: StringFilter<"Region"> | string
    domain?: StringFilter<"Region"> | string
    description?: StringNullableFilter<"Region"> | string | null
    WorkspaceUsage?: WorkspaceUsageListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    uid?: SortOrder
    displayName?: SortOrder
    location?: SortOrder
    domain?: SortOrder
    description?: SortOrderInput | SortOrder
    WorkspaceUsage?: WorkspaceUsageOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    displayName?: StringFilter<"Region"> | string
    location?: StringFilter<"Region"> | string
    domain?: StringFilter<"Region"> | string
    description?: StringNullableFilter<"Region"> | string | null
    WorkspaceUsage?: WorkspaceUsageListRelationFilter
  }, "uid">

  export type RegionOrderByWithAggregationInput = {
    uid?: SortOrder
    displayName?: SortOrder
    location?: SortOrder
    domain?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    uid?: UuidWithAggregatesFilter<"Region"> | string
    displayName?: StringWithAggregatesFilter<"Region"> | string
    location?: StringWithAggregatesFilter<"Region"> | string
    domain?: StringWithAggregatesFilter<"Region"> | string
    description?: StringNullableWithAggregatesFilter<"Region"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userUid?: UuidFilter<"Account"> | string
    activityBonus?: BigIntFilter<"Account"> | bigint | number
    encryptBalance?: StringFilter<"Account"> | string
    encryptDeductionBalance?: StringFilter<"Account"> | string
    created_at?: DateTimeFilter<"Account"> | Date | string
    create_region_id?: StringFilter<"Account"> | string
    balance?: BigIntNullableFilter<"Account"> | bigint | number | null
    deduction_balance?: BigIntNullableFilter<"Account"> | bigint | number | null
  }

  export type AccountOrderByWithRelationInput = {
    userUid?: SortOrder
    activityBonus?: SortOrder
    encryptBalance?: SortOrder
    encryptDeductionBalance?: SortOrder
    created_at?: SortOrder
    create_region_id?: SortOrder
    balance?: SortOrderInput | SortOrder
    deduction_balance?: SortOrderInput | SortOrder
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    userUid?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    activityBonus?: BigIntFilter<"Account"> | bigint | number
    encryptBalance?: StringFilter<"Account"> | string
    encryptDeductionBalance?: StringFilter<"Account"> | string
    created_at?: DateTimeFilter<"Account"> | Date | string
    create_region_id?: StringFilter<"Account"> | string
    balance?: BigIntNullableFilter<"Account"> | bigint | number | null
    deduction_balance?: BigIntNullableFilter<"Account"> | bigint | number | null
  }, "userUid">

  export type AccountOrderByWithAggregationInput = {
    userUid?: SortOrder
    activityBonus?: SortOrder
    encryptBalance?: SortOrder
    encryptDeductionBalance?: SortOrder
    created_at?: SortOrder
    create_region_id?: SortOrder
    balance?: SortOrderInput | SortOrder
    deduction_balance?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    userUid?: UuidWithAggregatesFilter<"Account"> | string
    activityBonus?: BigIntWithAggregatesFilter<"Account"> | bigint | number
    encryptBalance?: StringWithAggregatesFilter<"Account"> | string
    encryptDeductionBalance?: StringWithAggregatesFilter<"Account"> | string
    created_at?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    create_region_id?: StringWithAggregatesFilter<"Account"> | string
    balance?: BigIntNullableWithAggregatesFilter<"Account"> | bigint | number | null
    deduction_balance?: BigIntNullableWithAggregatesFilter<"Account"> | bigint | number | null
  }

  export type AccountTransactionWhereInput = {
    AND?: AccountTransactionWhereInput | AccountTransactionWhereInput[]
    OR?: AccountTransactionWhereInput[]
    NOT?: AccountTransactionWhereInput | AccountTransactionWhereInput[]
    id?: UuidFilter<"AccountTransaction"> | string
    type?: StringFilter<"AccountTransaction"> | string
    deduction_balance?: BigIntFilter<"AccountTransaction"> | bigint | number
    balance?: BigIntFilter<"AccountTransaction"> | bigint | number
    message?: StringNullableFilter<"AccountTransaction"> | string | null
    created_at?: DateTimeFilter<"AccountTransaction"> | Date | string
    updated_at?: DateTimeFilter<"AccountTransaction"> | Date | string
    billing_id?: UuidFilter<"AccountTransaction"> | string
    userUid?: UuidFilter<"AccountTransaction"> | string
    balance_before?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    deduction_balance_before?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    region?: UuidNullableFilter<"AccountTransaction"> | string | null
    deduction_credit?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    billing_id_list?: StringNullableListFilter<"AccountTransaction">
    credit_id_list?: StringNullableListFilter<"AccountTransaction">
  }

  export type AccountTransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    deduction_balance?: SortOrder
    balance?: SortOrder
    message?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    billing_id?: SortOrder
    userUid?: SortOrder
    balance_before?: SortOrderInput | SortOrder
    deduction_balance_before?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    deduction_credit?: SortOrderInput | SortOrder
    billing_id_list?: SortOrder
    credit_id_list?: SortOrder
  }

  export type AccountTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountTransactionWhereInput | AccountTransactionWhereInput[]
    OR?: AccountTransactionWhereInput[]
    NOT?: AccountTransactionWhereInput | AccountTransactionWhereInput[]
    type?: StringFilter<"AccountTransaction"> | string
    deduction_balance?: BigIntFilter<"AccountTransaction"> | bigint | number
    balance?: BigIntFilter<"AccountTransaction"> | bigint | number
    message?: StringNullableFilter<"AccountTransaction"> | string | null
    created_at?: DateTimeFilter<"AccountTransaction"> | Date | string
    updated_at?: DateTimeFilter<"AccountTransaction"> | Date | string
    billing_id?: UuidFilter<"AccountTransaction"> | string
    userUid?: UuidFilter<"AccountTransaction"> | string
    balance_before?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    deduction_balance_before?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    region?: UuidNullableFilter<"AccountTransaction"> | string | null
    deduction_credit?: BigIntNullableFilter<"AccountTransaction"> | bigint | number | null
    billing_id_list?: StringNullableListFilter<"AccountTransaction">
    credit_id_list?: StringNullableListFilter<"AccountTransaction">
  }, "id">

  export type AccountTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    deduction_balance?: SortOrder
    balance?: SortOrder
    message?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    billing_id?: SortOrder
    userUid?: SortOrder
    balance_before?: SortOrderInput | SortOrder
    deduction_balance_before?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    deduction_credit?: SortOrderInput | SortOrder
    billing_id_list?: SortOrder
    credit_id_list?: SortOrder
    _count?: AccountTransactionCountOrderByAggregateInput
    _avg?: AccountTransactionAvgOrderByAggregateInput
    _max?: AccountTransactionMaxOrderByAggregateInput
    _min?: AccountTransactionMinOrderByAggregateInput
    _sum?: AccountTransactionSumOrderByAggregateInput
  }

  export type AccountTransactionScalarWhereWithAggregatesInput = {
    AND?: AccountTransactionScalarWhereWithAggregatesInput | AccountTransactionScalarWhereWithAggregatesInput[]
    OR?: AccountTransactionScalarWhereWithAggregatesInput[]
    NOT?: AccountTransactionScalarWhereWithAggregatesInput | AccountTransactionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AccountTransaction"> | string
    type?: StringWithAggregatesFilter<"AccountTransaction"> | string
    deduction_balance?: BigIntWithAggregatesFilter<"AccountTransaction"> | bigint | number
    balance?: BigIntWithAggregatesFilter<"AccountTransaction"> | bigint | number
    message?: StringNullableWithAggregatesFilter<"AccountTransaction"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"AccountTransaction"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"AccountTransaction"> | Date | string
    billing_id?: UuidWithAggregatesFilter<"AccountTransaction"> | string
    userUid?: UuidWithAggregatesFilter<"AccountTransaction"> | string
    balance_before?: BigIntNullableWithAggregatesFilter<"AccountTransaction"> | bigint | number | null
    deduction_balance_before?: BigIntNullableWithAggregatesFilter<"AccountTransaction"> | bigint | number | null
    region?: UuidNullableWithAggregatesFilter<"AccountTransaction"> | string | null
    deduction_credit?: BigIntNullableWithAggregatesFilter<"AccountTransaction"> | bigint | number | null
    billing_id_list?: StringNullableListFilter<"AccountTransaction">
    credit_id_list?: StringNullableListFilter<"AccountTransaction">
  }

  export type ErrorPaymentCreateWhereInput = {
    AND?: ErrorPaymentCreateWhereInput | ErrorPaymentCreateWhereInput[]
    OR?: ErrorPaymentCreateWhereInput[]
    NOT?: ErrorPaymentCreateWhereInput | ErrorPaymentCreateWhereInput[]
    userUid?: UuidFilter<"ErrorPaymentCreate"> | string
    regionUid?: UuidFilter<"ErrorPaymentCreate"> | string
    created_at?: DateTimeFilter<"ErrorPaymentCreate"> | Date | string
    regionUserOwner?: StringFilter<"ErrorPaymentCreate"> | string
    method?: StringFilter<"ErrorPaymentCreate"> | string
    amount?: BigIntFilter<"ErrorPaymentCreate"> | bigint | number
    gift?: BigIntNullableFilter<"ErrorPaymentCreate"> | bigint | number | null
    trade_no?: StringFilter<"ErrorPaymentCreate"> | string
    code_url?: StringNullableFilter<"ErrorPaymentCreate"> | string | null
    invoiced_at?: BoolNullableFilter<"ErrorPaymentCreate"> | boolean | null
    remark?: StringNullableFilter<"ErrorPaymentCreate"> | string | null
    message?: StringFilter<"ErrorPaymentCreate"> | string
    create_time?: DateTimeFilter<"ErrorPaymentCreate"> | Date | string
  }

  export type ErrorPaymentCreateOrderByWithRelationInput = {
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    message?: SortOrder
    create_time?: SortOrder
  }

  export type ErrorPaymentCreateWhereUniqueInput = Prisma.AtLeast<{
    trade_no?: string
    AND?: ErrorPaymentCreateWhereInput | ErrorPaymentCreateWhereInput[]
    OR?: ErrorPaymentCreateWhereInput[]
    NOT?: ErrorPaymentCreateWhereInput | ErrorPaymentCreateWhereInput[]
    userUid?: UuidFilter<"ErrorPaymentCreate"> | string
    regionUid?: UuidFilter<"ErrorPaymentCreate"> | string
    created_at?: DateTimeFilter<"ErrorPaymentCreate"> | Date | string
    regionUserOwner?: StringFilter<"ErrorPaymentCreate"> | string
    method?: StringFilter<"ErrorPaymentCreate"> | string
    amount?: BigIntFilter<"ErrorPaymentCreate"> | bigint | number
    gift?: BigIntNullableFilter<"ErrorPaymentCreate"> | bigint | number | null
    code_url?: StringNullableFilter<"ErrorPaymentCreate"> | string | null
    invoiced_at?: BoolNullableFilter<"ErrorPaymentCreate"> | boolean | null
    remark?: StringNullableFilter<"ErrorPaymentCreate"> | string | null
    message?: StringFilter<"ErrorPaymentCreate"> | string
    create_time?: DateTimeFilter<"ErrorPaymentCreate"> | Date | string
  }, "trade_no">

  export type ErrorPaymentCreateOrderByWithAggregationInput = {
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    message?: SortOrder
    create_time?: SortOrder
    _count?: ErrorPaymentCreateCountOrderByAggregateInput
    _avg?: ErrorPaymentCreateAvgOrderByAggregateInput
    _max?: ErrorPaymentCreateMaxOrderByAggregateInput
    _min?: ErrorPaymentCreateMinOrderByAggregateInput
    _sum?: ErrorPaymentCreateSumOrderByAggregateInput
  }

  export type ErrorPaymentCreateScalarWhereWithAggregatesInput = {
    AND?: ErrorPaymentCreateScalarWhereWithAggregatesInput | ErrorPaymentCreateScalarWhereWithAggregatesInput[]
    OR?: ErrorPaymentCreateScalarWhereWithAggregatesInput[]
    NOT?: ErrorPaymentCreateScalarWhereWithAggregatesInput | ErrorPaymentCreateScalarWhereWithAggregatesInput[]
    userUid?: UuidWithAggregatesFilter<"ErrorPaymentCreate"> | string
    regionUid?: UuidWithAggregatesFilter<"ErrorPaymentCreate"> | string
    created_at?: DateTimeWithAggregatesFilter<"ErrorPaymentCreate"> | Date | string
    regionUserOwner?: StringWithAggregatesFilter<"ErrorPaymentCreate"> | string
    method?: StringWithAggregatesFilter<"ErrorPaymentCreate"> | string
    amount?: BigIntWithAggregatesFilter<"ErrorPaymentCreate"> | bigint | number
    gift?: BigIntNullableWithAggregatesFilter<"ErrorPaymentCreate"> | bigint | number | null
    trade_no?: StringWithAggregatesFilter<"ErrorPaymentCreate"> | string
    code_url?: StringNullableWithAggregatesFilter<"ErrorPaymentCreate"> | string | null
    invoiced_at?: BoolNullableWithAggregatesFilter<"ErrorPaymentCreate"> | boolean | null
    remark?: StringNullableWithAggregatesFilter<"ErrorPaymentCreate"> | string | null
    message?: StringWithAggregatesFilter<"ErrorPaymentCreate"> | string
    create_time?: DateTimeWithAggregatesFilter<"ErrorPaymentCreate"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    userUid?: UuidFilter<"Payment"> | string
    regionUid?: UuidFilter<"Payment"> | string
    created_at?: DateTimeFilter<"Payment"> | Date | string
    regionUserOwner?: StringFilter<"Payment"> | string
    method?: StringFilter<"Payment"> | string
    amount?: BigIntFilter<"Payment"> | bigint | number
    gift?: BigIntNullableFilter<"Payment"> | bigint | number | null
    trade_no?: StringFilter<"Payment"> | string
    code_url?: StringNullableFilter<"Payment"> | string | null
    invoiced_at?: BoolNullableFilter<"Payment"> | boolean | null
    remark?: StringNullableFilter<"Payment"> | string | null
    message?: StringFilter<"Payment"> | string
    activityType?: StringNullableFilter<"Payment"> | string | null
    metadata?: StringNullableFilter<"Payment"> | string | null
    card_uid?: UuidNullableFilter<"Payment"> | string | null
    type?: StringNullableFilter<"Payment"> | string | null
    charge_source?: StringNullableFilter<"Payment"> | string | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    message?: SortOrder
    activityType?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    card_uid?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    charge_source?: SortOrderInput | SortOrder
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trade_no?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    userUid?: UuidFilter<"Payment"> | string
    regionUid?: UuidFilter<"Payment"> | string
    created_at?: DateTimeFilter<"Payment"> | Date | string
    regionUserOwner?: StringFilter<"Payment"> | string
    method?: StringFilter<"Payment"> | string
    amount?: BigIntFilter<"Payment"> | bigint | number
    gift?: BigIntNullableFilter<"Payment"> | bigint | number | null
    code_url?: StringNullableFilter<"Payment"> | string | null
    invoiced_at?: BoolNullableFilter<"Payment"> | boolean | null
    remark?: StringNullableFilter<"Payment"> | string | null
    message?: StringFilter<"Payment"> | string
    activityType?: StringNullableFilter<"Payment"> | string | null
    metadata?: StringNullableFilter<"Payment"> | string | null
    card_uid?: UuidNullableFilter<"Payment"> | string | null
    type?: StringNullableFilter<"Payment"> | string | null
    charge_source?: StringNullableFilter<"Payment"> | string | null
  }, "id" | "trade_no">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    message?: SortOrder
    activityType?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    card_uid?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    charge_source?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    userUid?: UuidWithAggregatesFilter<"Payment"> | string
    regionUid?: UuidWithAggregatesFilter<"Payment"> | string
    created_at?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    regionUserOwner?: StringWithAggregatesFilter<"Payment"> | string
    method?: StringWithAggregatesFilter<"Payment"> | string
    amount?: BigIntWithAggregatesFilter<"Payment"> | bigint | number
    gift?: BigIntNullableWithAggregatesFilter<"Payment"> | bigint | number | null
    trade_no?: StringWithAggregatesFilter<"Payment"> | string
    code_url?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    invoiced_at?: BoolNullableWithAggregatesFilter<"Payment"> | boolean | null
    remark?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    message?: StringWithAggregatesFilter<"Payment"> | string
    activityType?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    card_uid?: UuidNullableWithAggregatesFilter<"Payment"> | string | null
    type?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    charge_source?: StringNullableWithAggregatesFilter<"Payment"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    uid?: UuidFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarUri?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    oauthProvider?: OauthProviderListRelationFilter
    userTasks?: UserTaskListRelationFilter
    userInfo?: XOR<UserInfoNullableRelationFilter, UserInfoWhereInput> | null
    workspaceUsage?: WorkspaceUsageListRelationFilter
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarUri?: SortOrder
    nickname?: SortOrder
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    oauthProvider?: OauthProviderOrderByRelationAggregateInput
    userTasks?: UserTaskOrderByRelationAggregateInput
    userInfo?: UserInfoOrderByWithRelationInput
    workspaceUsage?: WorkspaceUsageOrderByRelationAggregateInput
    subscription?: SubscriptionOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    id?: string
    name?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarUri?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    oauthProvider?: OauthProviderListRelationFilter
    userTasks?: UserTaskListRelationFilter
    userInfo?: XOR<UserInfoNullableRelationFilter, UserInfoWhereInput> | null
    workspaceUsage?: WorkspaceUsageListRelationFilter
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
  }, "uid" | "id" | "name">

  export type UserOrderByWithAggregationInput = {
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarUri?: SortOrder
    nickname?: SortOrder
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    uid?: UuidWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    avatarUri?: StringWithAggregatesFilter<"User"> | string
    nickname?: StringWithAggregatesFilter<"User"> | string
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
  }

  export type InviteRewardWhereInput = {
    AND?: InviteRewardWhereInput | InviteRewardWhereInput[]
    OR?: InviteRewardWhereInput[]
    NOT?: InviteRewardWhereInput | InviteRewardWhereInput[]
    payment_id?: StringFilter<"InviteReward"> | string
    userUid?: UuidFilter<"InviteReward"> | string
    created_at?: DateTimeFilter<"InviteReward"> | Date | string
    payment_amount?: BigIntFilter<"InviteReward"> | bigint | number
    reward_amount?: BigIntFilter<"InviteReward"> | bigint | number
    inviteFrom?: UuidFilter<"InviteReward"> | string
  }

  export type InviteRewardOrderByWithRelationInput = {
    payment_id?: SortOrder
    userUid?: SortOrder
    created_at?: SortOrder
    payment_amount?: SortOrder
    reward_amount?: SortOrder
    inviteFrom?: SortOrder
  }

  export type InviteRewardWhereUniqueInput = Prisma.AtLeast<{
    payment_id?: string
    AND?: InviteRewardWhereInput | InviteRewardWhereInput[]
    OR?: InviteRewardWhereInput[]
    NOT?: InviteRewardWhereInput | InviteRewardWhereInput[]
    userUid?: UuidFilter<"InviteReward"> | string
    created_at?: DateTimeFilter<"InviteReward"> | Date | string
    payment_amount?: BigIntFilter<"InviteReward"> | bigint | number
    reward_amount?: BigIntFilter<"InviteReward"> | bigint | number
    inviteFrom?: UuidFilter<"InviteReward"> | string
  }, "payment_id">

  export type InviteRewardOrderByWithAggregationInput = {
    payment_id?: SortOrder
    userUid?: SortOrder
    created_at?: SortOrder
    payment_amount?: SortOrder
    reward_amount?: SortOrder
    inviteFrom?: SortOrder
    _count?: InviteRewardCountOrderByAggregateInput
    _avg?: InviteRewardAvgOrderByAggregateInput
    _max?: InviteRewardMaxOrderByAggregateInput
    _min?: InviteRewardMinOrderByAggregateInput
    _sum?: InviteRewardSumOrderByAggregateInput
  }

  export type InviteRewardScalarWhereWithAggregatesInput = {
    AND?: InviteRewardScalarWhereWithAggregatesInput | InviteRewardScalarWhereWithAggregatesInput[]
    OR?: InviteRewardScalarWhereWithAggregatesInput[]
    NOT?: InviteRewardScalarWhereWithAggregatesInput | InviteRewardScalarWhereWithAggregatesInput[]
    payment_id?: StringWithAggregatesFilter<"InviteReward"> | string
    userUid?: UuidWithAggregatesFilter<"InviteReward"> | string
    created_at?: DateTimeWithAggregatesFilter<"InviteReward"> | Date | string
    payment_amount?: BigIntWithAggregatesFilter<"InviteReward"> | bigint | number
    reward_amount?: BigIntWithAggregatesFilter<"InviteReward"> | bigint | number
    inviteFrom?: UuidWithAggregatesFilter<"InviteReward"> | string
  }

  export type UserSemChannelWhereInput = {
    AND?: UserSemChannelWhereInput | UserSemChannelWhereInput[]
    OR?: UserSemChannelWhereInput[]
    NOT?: UserSemChannelWhereInput | UserSemChannelWhereInput[]
    id?: UuidFilter<"UserSemChannel"> | string
    userUid?: UuidFilter<"UserSemChannel"> | string
    channel?: StringFilter<"UserSemChannel"> | string
    createdAt?: DateTimeFilter<"UserSemChannel"> | Date | string
    updatedAt?: DateTimeFilter<"UserSemChannel"> | Date | string
    additionalInfo?: JsonNullableFilter<"UserSemChannel">
  }

  export type UserSemChannelOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
  }

  export type UserSemChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userUid?: string
    AND?: UserSemChannelWhereInput | UserSemChannelWhereInput[]
    OR?: UserSemChannelWhereInput[]
    NOT?: UserSemChannelWhereInput | UserSemChannelWhereInput[]
    channel?: StringFilter<"UserSemChannel"> | string
    createdAt?: DateTimeFilter<"UserSemChannel"> | Date | string
    updatedAt?: DateTimeFilter<"UserSemChannel"> | Date | string
    additionalInfo?: JsonNullableFilter<"UserSemChannel">
  }, "id" | "userUid">

  export type UserSemChannelOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    _count?: UserSemChannelCountOrderByAggregateInput
    _max?: UserSemChannelMaxOrderByAggregateInput
    _min?: UserSemChannelMinOrderByAggregateInput
  }

  export type UserSemChannelScalarWhereWithAggregatesInput = {
    AND?: UserSemChannelScalarWhereWithAggregatesInput | UserSemChannelScalarWhereWithAggregatesInput[]
    OR?: UserSemChannelScalarWhereWithAggregatesInput[]
    NOT?: UserSemChannelScalarWhereWithAggregatesInput | UserSemChannelScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserSemChannel"> | string
    userUid?: UuidWithAggregatesFilter<"UserSemChannel"> | string
    channel?: StringWithAggregatesFilter<"UserSemChannel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSemChannel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSemChannel"> | Date | string
    additionalInfo?: JsonNullableWithAggregatesFilter<"UserSemChannel">
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: UuidFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    reward?: BigIntFilter<"Task"> | bigint | number
    order?: IntFilter<"Task"> | number
    isActive?: BoolFilter<"Task"> | boolean
    isNewUserTask?: BoolFilter<"Task"> | boolean
    taskType?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    userTasks?: UserTaskListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    reward?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    isNewUserTask?: SortOrder
    taskType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userTasks?: UserTaskOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    reward?: BigIntFilter<"Task"> | bigint | number
    order?: IntFilter<"Task"> | number
    isActive?: BoolFilter<"Task"> | boolean
    isNewUserTask?: BoolFilter<"Task"> | boolean
    taskType?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    userTasks?: UserTaskListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    reward?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    isNewUserTask?: SortOrder
    taskType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringWithAggregatesFilter<"Task"> | string
    reward?: BigIntWithAggregatesFilter<"Task"> | bigint | number
    order?: IntWithAggregatesFilter<"Task"> | number
    isActive?: BoolWithAggregatesFilter<"Task"> | boolean
    isNewUserTask?: BoolWithAggregatesFilter<"Task"> | boolean
    taskType?: EnumTaskTypeWithAggregatesFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type UserTaskWhereInput = {
    AND?: UserTaskWhereInput | UserTaskWhereInput[]
    OR?: UserTaskWhereInput[]
    NOT?: UserTaskWhereInput | UserTaskWhereInput[]
    id?: UuidFilter<"UserTask"> | string
    userUid?: UuidFilter<"UserTask"> | string
    taskId?: UuidFilter<"UserTask"> | string
    status?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    completedAt?: DateTimeFilter<"UserTask"> | Date | string
    createdAt?: DateTimeFilter<"UserTask"> | Date | string
    updatedAt?: DateTimeFilter<"UserTask"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskRelationFilter, TaskWhereInput>
  }

  export type UserTaskOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    taskId?: SortOrder
    status?: SortOrder
    rewardStatus?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type UserTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userUid_taskId?: UserTaskUserUidTaskIdCompoundUniqueInput
    AND?: UserTaskWhereInput | UserTaskWhereInput[]
    OR?: UserTaskWhereInput[]
    NOT?: UserTaskWhereInput | UserTaskWhereInput[]
    userUid?: UuidFilter<"UserTask"> | string
    taskId?: UuidFilter<"UserTask"> | string
    status?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    completedAt?: DateTimeFilter<"UserTask"> | Date | string
    createdAt?: DateTimeFilter<"UserTask"> | Date | string
    updatedAt?: DateTimeFilter<"UserTask"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskRelationFilter, TaskWhereInput>
  }, "id" | "userUid_taskId">

  export type UserTaskOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    taskId?: SortOrder
    status?: SortOrder
    rewardStatus?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTaskCountOrderByAggregateInput
    _max?: UserTaskMaxOrderByAggregateInput
    _min?: UserTaskMinOrderByAggregateInput
  }

  export type UserTaskScalarWhereWithAggregatesInput = {
    AND?: UserTaskScalarWhereWithAggregatesInput | UserTaskScalarWhereWithAggregatesInput[]
    OR?: UserTaskScalarWhereWithAggregatesInput[]
    NOT?: UserTaskScalarWhereWithAggregatesInput | UserTaskScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserTask"> | string
    userUid?: UuidWithAggregatesFilter<"UserTask"> | string
    taskId?: UuidWithAggregatesFilter<"UserTask"> | string
    status?: EnumTaskStatusWithAggregatesFilter<"UserTask"> | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusWithAggregatesFilter<"UserTask"> | $Enums.TaskStatus
    completedAt?: DateTimeWithAggregatesFilter<"UserTask"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserTask"> | Date | string
  }

  export type CardInfoWhereInput = {
    AND?: CardInfoWhereInput | CardInfoWhereInput[]
    OR?: CardInfoWhereInput[]
    NOT?: CardInfoWhereInput | CardInfoWhereInput[]
    id?: UuidFilter<"CardInfo"> | string
    user_uid?: UuidFilter<"CardInfo"> | string
    card_no?: StringNullableFilter<"CardInfo"> | string | null
    card_brand?: StringNullableFilter<"CardInfo"> | string | null
    card_token?: StringNullableFilter<"CardInfo"> | string | null
    created_at?: DateTimeNullableFilter<"CardInfo"> | Date | string | null
    network_transaction_id?: StringNullableFilter<"CardInfo"> | string | null
    default?: BoolNullableFilter<"CardInfo"> | boolean | null
    last_payment_status?: StringNullableFilter<"CardInfo"> | string | null
  }

  export type CardInfoOrderByWithRelationInput = {
    id?: SortOrder
    user_uid?: SortOrder
    card_no?: SortOrderInput | SortOrder
    card_brand?: SortOrderInput | SortOrder
    card_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    network_transaction_id?: SortOrderInput | SortOrder
    default?: SortOrderInput | SortOrder
    last_payment_status?: SortOrderInput | SortOrder
  }

  export type CardInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    card_token?: string
    AND?: CardInfoWhereInput | CardInfoWhereInput[]
    OR?: CardInfoWhereInput[]
    NOT?: CardInfoWhereInput | CardInfoWhereInput[]
    user_uid?: UuidFilter<"CardInfo"> | string
    card_no?: StringNullableFilter<"CardInfo"> | string | null
    card_brand?: StringNullableFilter<"CardInfo"> | string | null
    created_at?: DateTimeNullableFilter<"CardInfo"> | Date | string | null
    network_transaction_id?: StringNullableFilter<"CardInfo"> | string | null
    default?: BoolNullableFilter<"CardInfo"> | boolean | null
    last_payment_status?: StringNullableFilter<"CardInfo"> | string | null
  }, "id" | "card_token">

  export type CardInfoOrderByWithAggregationInput = {
    id?: SortOrder
    user_uid?: SortOrder
    card_no?: SortOrderInput | SortOrder
    card_brand?: SortOrderInput | SortOrder
    card_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    network_transaction_id?: SortOrderInput | SortOrder
    default?: SortOrderInput | SortOrder
    last_payment_status?: SortOrderInput | SortOrder
    _count?: CardInfoCountOrderByAggregateInput
    _max?: CardInfoMaxOrderByAggregateInput
    _min?: CardInfoMinOrderByAggregateInput
  }

  export type CardInfoScalarWhereWithAggregatesInput = {
    AND?: CardInfoScalarWhereWithAggregatesInput | CardInfoScalarWhereWithAggregatesInput[]
    OR?: CardInfoScalarWhereWithAggregatesInput[]
    NOT?: CardInfoScalarWhereWithAggregatesInput | CardInfoScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CardInfo"> | string
    user_uid?: UuidWithAggregatesFilter<"CardInfo"> | string
    card_no?: StringNullableWithAggregatesFilter<"CardInfo"> | string | null
    card_brand?: StringNullableWithAggregatesFilter<"CardInfo"> | string | null
    card_token?: StringNullableWithAggregatesFilter<"CardInfo"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"CardInfo"> | Date | string | null
    network_transaction_id?: StringNullableWithAggregatesFilter<"CardInfo"> | string | null
    default?: BoolNullableWithAggregatesFilter<"CardInfo"> | boolean | null
    last_payment_status?: StringNullableWithAggregatesFilter<"CardInfo"> | string | null
  }

  export type CreditsWhereInput = {
    AND?: CreditsWhereInput | CreditsWhereInput[]
    OR?: CreditsWhereInput[]
    NOT?: CreditsWhereInput | CreditsWhereInput[]
    id?: UuidFilter<"Credits"> | string
    user_uid?: UuidNullableFilter<"Credits"> | string | null
    amount?: BigIntNullableFilter<"Credits"> | bigint | number | null
    used_amount?: BigIntNullableFilter<"Credits"> | bigint | number | null
    from_id?: StringNullableFilter<"Credits"> | string | null
    from_type?: StringNullableFilter<"Credits"> | string | null
    expire_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    created_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    start_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    status?: StringNullableFilter<"Credits"> | string | null
  }

  export type CreditsOrderByWithRelationInput = {
    id?: SortOrder
    user_uid?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    used_amount?: SortOrderInput | SortOrder
    from_id?: SortOrderInput | SortOrder
    from_type?: SortOrderInput | SortOrder
    expire_at?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    start_at?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
  }

  export type CreditsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CreditsWhereInput | CreditsWhereInput[]
    OR?: CreditsWhereInput[]
    NOT?: CreditsWhereInput | CreditsWhereInput[]
    user_uid?: UuidNullableFilter<"Credits"> | string | null
    amount?: BigIntNullableFilter<"Credits"> | bigint | number | null
    used_amount?: BigIntNullableFilter<"Credits"> | bigint | number | null
    from_id?: StringNullableFilter<"Credits"> | string | null
    from_type?: StringNullableFilter<"Credits"> | string | null
    expire_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    created_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    start_at?: DateTimeNullableFilter<"Credits"> | Date | string | null
    status?: StringNullableFilter<"Credits"> | string | null
  }, "id">

  export type CreditsOrderByWithAggregationInput = {
    id?: SortOrder
    user_uid?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    used_amount?: SortOrderInput | SortOrder
    from_id?: SortOrderInput | SortOrder
    from_type?: SortOrderInput | SortOrder
    expire_at?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    start_at?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: CreditsCountOrderByAggregateInput
    _avg?: CreditsAvgOrderByAggregateInput
    _max?: CreditsMaxOrderByAggregateInput
    _min?: CreditsMinOrderByAggregateInput
    _sum?: CreditsSumOrderByAggregateInput
  }

  export type CreditsScalarWhereWithAggregatesInput = {
    AND?: CreditsScalarWhereWithAggregatesInput | CreditsScalarWhereWithAggregatesInput[]
    OR?: CreditsScalarWhereWithAggregatesInput[]
    NOT?: CreditsScalarWhereWithAggregatesInput | CreditsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Credits"> | string
    user_uid?: UuidNullableWithAggregatesFilter<"Credits"> | string | null
    amount?: BigIntNullableWithAggregatesFilter<"Credits"> | bigint | number | null
    used_amount?: BigIntNullableWithAggregatesFilter<"Credits"> | bigint | number | null
    from_id?: StringNullableWithAggregatesFilter<"Credits"> | string | null
    from_type?: StringNullableWithAggregatesFilter<"Credits"> | string | null
    expire_at?: DateTimeNullableWithAggregatesFilter<"Credits"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"Credits"> | Date | string | null
    start_at?: DateTimeNullableWithAggregatesFilter<"Credits"> | Date | string | null
    status?: StringNullableWithAggregatesFilter<"Credits"> | string | null
  }

  export type InvoicePaymentWhereInput = {
    AND?: InvoicePaymentWhereInput | InvoicePaymentWhereInput[]
    OR?: InvoicePaymentWhereInput[]
    NOT?: InvoicePaymentWhereInput | InvoicePaymentWhereInput[]
    invoice_id?: StringNullableFilter<"InvoicePayment"> | string | null
    payment_id?: StringFilter<"InvoicePayment"> | string
    amount?: BigIntFilter<"InvoicePayment"> | bigint | number
  }

  export type InvoicePaymentOrderByWithRelationInput = {
    invoice_id?: SortOrderInput | SortOrder
    payment_id?: SortOrder
    amount?: SortOrder
  }

  export type InvoicePaymentWhereUniqueInput = Prisma.AtLeast<{
    payment_id?: string
    AND?: InvoicePaymentWhereInput | InvoicePaymentWhereInput[]
    OR?: InvoicePaymentWhereInput[]
    NOT?: InvoicePaymentWhereInput | InvoicePaymentWhereInput[]
    invoice_id?: StringNullableFilter<"InvoicePayment"> | string | null
    amount?: BigIntFilter<"InvoicePayment"> | bigint | number
  }, "payment_id">

  export type InvoicePaymentOrderByWithAggregationInput = {
    invoice_id?: SortOrderInput | SortOrder
    payment_id?: SortOrder
    amount?: SortOrder
    _count?: InvoicePaymentCountOrderByAggregateInput
    _avg?: InvoicePaymentAvgOrderByAggregateInput
    _max?: InvoicePaymentMaxOrderByAggregateInput
    _min?: InvoicePaymentMinOrderByAggregateInput
    _sum?: InvoicePaymentSumOrderByAggregateInput
  }

  export type InvoicePaymentScalarWhereWithAggregatesInput = {
    AND?: InvoicePaymentScalarWhereWithAggregatesInput | InvoicePaymentScalarWhereWithAggregatesInput[]
    OR?: InvoicePaymentScalarWhereWithAggregatesInput[]
    NOT?: InvoicePaymentScalarWhereWithAggregatesInput | InvoicePaymentScalarWhereWithAggregatesInput[]
    invoice_id?: StringNullableWithAggregatesFilter<"InvoicePayment"> | string | null
    payment_id?: StringWithAggregatesFilter<"InvoicePayment"> | string
    amount?: BigIntWithAggregatesFilter<"InvoicePayment"> | bigint | number
  }

  export type PaymentOrderWhereInput = {
    AND?: PaymentOrderWhereInput | PaymentOrderWhereInput[]
    OR?: PaymentOrderWhereInput[]
    NOT?: PaymentOrderWhereInput | PaymentOrderWhereInput[]
    id?: StringFilter<"PaymentOrder"> | string
    userUid?: UuidFilter<"PaymentOrder"> | string
    regionUid?: UuidFilter<"PaymentOrder"> | string
    created_at?: DateTimeNullableFilter<"PaymentOrder"> | Date | string | null
    regionUserOwner?: StringFilter<"PaymentOrder"> | string
    method?: StringFilter<"PaymentOrder"> | string
    amount?: BigIntFilter<"PaymentOrder"> | bigint | number
    gift?: BigIntNullableFilter<"PaymentOrder"> | bigint | number | null
    trade_no?: StringFilter<"PaymentOrder"> | string
    code_url?: StringNullableFilter<"PaymentOrder"> | string | null
    invoiced_at?: BoolNullableFilter<"PaymentOrder"> | boolean | null
    remark?: StringNullableFilter<"PaymentOrder"> | string | null
    activityType?: StringNullableFilter<"PaymentOrder"> | string | null
    message?: StringFilter<"PaymentOrder"> | string
    card_uid?: UuidNullableFilter<"PaymentOrder"> | string | null
    type?: StringNullableFilter<"PaymentOrder"> | string | null
    charge_source?: StringNullableFilter<"PaymentOrder"> | string | null
    status?: StringFilter<"PaymentOrder"> | string
  }

  export type PaymentOrderOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrderInput | SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    activityType?: SortOrderInput | SortOrder
    message?: SortOrder
    card_uid?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    charge_source?: SortOrderInput | SortOrder
    status?: SortOrder
  }

  export type PaymentOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trade_no?: string
    AND?: PaymentOrderWhereInput | PaymentOrderWhereInput[]
    OR?: PaymentOrderWhereInput[]
    NOT?: PaymentOrderWhereInput | PaymentOrderWhereInput[]
    userUid?: UuidFilter<"PaymentOrder"> | string
    regionUid?: UuidFilter<"PaymentOrder"> | string
    created_at?: DateTimeNullableFilter<"PaymentOrder"> | Date | string | null
    regionUserOwner?: StringFilter<"PaymentOrder"> | string
    method?: StringFilter<"PaymentOrder"> | string
    amount?: BigIntFilter<"PaymentOrder"> | bigint | number
    gift?: BigIntNullableFilter<"PaymentOrder"> | bigint | number | null
    code_url?: StringNullableFilter<"PaymentOrder"> | string | null
    invoiced_at?: BoolNullableFilter<"PaymentOrder"> | boolean | null
    remark?: StringNullableFilter<"PaymentOrder"> | string | null
    activityType?: StringNullableFilter<"PaymentOrder"> | string | null
    message?: StringFilter<"PaymentOrder"> | string
    card_uid?: UuidNullableFilter<"PaymentOrder"> | string | null
    type?: StringNullableFilter<"PaymentOrder"> | string | null
    charge_source?: StringNullableFilter<"PaymentOrder"> | string | null
    status?: StringFilter<"PaymentOrder"> | string
  }, "id" | "trade_no">

  export type PaymentOrderOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrderInput | SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrderInput | SortOrder
    trade_no?: SortOrder
    code_url?: SortOrderInput | SortOrder
    invoiced_at?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    activityType?: SortOrderInput | SortOrder
    message?: SortOrder
    card_uid?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    charge_source?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: PaymentOrderCountOrderByAggregateInput
    _avg?: PaymentOrderAvgOrderByAggregateInput
    _max?: PaymentOrderMaxOrderByAggregateInput
    _min?: PaymentOrderMinOrderByAggregateInput
    _sum?: PaymentOrderSumOrderByAggregateInput
  }

  export type PaymentOrderScalarWhereWithAggregatesInput = {
    AND?: PaymentOrderScalarWhereWithAggregatesInput | PaymentOrderScalarWhereWithAggregatesInput[]
    OR?: PaymentOrderScalarWhereWithAggregatesInput[]
    NOT?: PaymentOrderScalarWhereWithAggregatesInput | PaymentOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentOrder"> | string
    userUid?: UuidWithAggregatesFilter<"PaymentOrder"> | string
    regionUid?: UuidWithAggregatesFilter<"PaymentOrder"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"PaymentOrder"> | Date | string | null
    regionUserOwner?: StringWithAggregatesFilter<"PaymentOrder"> | string
    method?: StringWithAggregatesFilter<"PaymentOrder"> | string
    amount?: BigIntWithAggregatesFilter<"PaymentOrder"> | bigint | number
    gift?: BigIntNullableWithAggregatesFilter<"PaymentOrder"> | bigint | number | null
    trade_no?: StringWithAggregatesFilter<"PaymentOrder"> | string
    code_url?: StringNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    invoiced_at?: BoolNullableWithAggregatesFilter<"PaymentOrder"> | boolean | null
    remark?: StringNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    activityType?: StringNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    message?: StringWithAggregatesFilter<"PaymentOrder"> | string
    card_uid?: UuidNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    type?: StringNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    charge_source?: StringNullableWithAggregatesFilter<"PaymentOrder"> | string | null
    status?: StringWithAggregatesFilter<"PaymentOrder"> | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: UuidFilter<"Subscription"> | string
    plan_id?: UuidFilter<"Subscription"> | string
    plan_name?: StringNullableFilter<"Subscription"> | string | null
    user_uid?: UuidFilter<"Subscription"> | string
    status?: StringNullableFilter<"Subscription"> | string | null
    start_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    update_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    expire_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    card_id?: UuidNullableFilter<"Subscription"> | string | null
    next_cycle_date?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    subscriptionPlan?: XOR<SubscriptionPlanRelationFilter, SubscriptionPlanWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    plan_id?: SortOrder
    plan_name?: SortOrderInput | SortOrder
    user_uid?: SortOrder
    status?: SortOrderInput | SortOrder
    start_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    expire_at?: SortOrderInput | SortOrder
    card_id?: SortOrderInput | SortOrder
    next_cycle_date?: SortOrderInput | SortOrder
    subscriptionPlan?: SubscriptionPlanOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_uid?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    plan_id?: UuidFilter<"Subscription"> | string
    plan_name?: StringNullableFilter<"Subscription"> | string | null
    status?: StringNullableFilter<"Subscription"> | string | null
    start_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    update_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    expire_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    card_id?: UuidNullableFilter<"Subscription"> | string | null
    next_cycle_date?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    subscriptionPlan?: XOR<SubscriptionPlanRelationFilter, SubscriptionPlanWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_uid">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    plan_id?: SortOrder
    plan_name?: SortOrderInput | SortOrder
    user_uid?: SortOrder
    status?: SortOrderInput | SortOrder
    start_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    expire_at?: SortOrderInput | SortOrder
    card_id?: SortOrderInput | SortOrder
    next_cycle_date?: SortOrderInput | SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Subscription"> | string
    plan_id?: UuidWithAggregatesFilter<"Subscription"> | string
    plan_name?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    user_uid?: UuidWithAggregatesFilter<"Subscription"> | string
    status?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    start_at?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    update_at?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    expire_at?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    card_id?: UuidNullableWithAggregatesFilter<"Subscription"> | string | null
    next_cycle_date?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
  }

  export type SubscriptionPlanWhereInput = {
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    id?: UuidFilter<"SubscriptionPlan"> | string
    name?: StringFilter<"SubscriptionPlan"> | string
    description?: StringNullableFilter<"SubscriptionPlan"> | string | null
    amount?: BigIntNullableFilter<"SubscriptionPlan"> | bigint | number | null
    gift_amount?: BigIntNullableFilter<"SubscriptionPlan"> | bigint | number | null
    period?: StringNullableFilter<"SubscriptionPlan"> | string | null
    upgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    downgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    max_seats?: BigIntFilter<"SubscriptionPlan"> | bigint | number
    max_workspaces?: BigIntFilter<"SubscriptionPlan"> | bigint | number
    max_resources?: StringNullableFilter<"SubscriptionPlan"> | string | null
    created_at?: DateTimeNullableFilter<"SubscriptionPlan"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"SubscriptionPlan"> | Date | string | null
    most_popular?: BoolNullableFilter<"SubscriptionPlan"> | boolean | null
    Subscription?: SubscriptionListRelationFilter
  }

  export type SubscriptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    gift_amount?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    upgrade_plan_list?: SortOrder
    downgrade_plan_list?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
    max_resources?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    most_popular?: SortOrderInput | SortOrder
    Subscription?: SubscriptionOrderByRelationAggregateInput
  }

  export type SubscriptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    description?: StringNullableFilter<"SubscriptionPlan"> | string | null
    amount?: BigIntNullableFilter<"SubscriptionPlan"> | bigint | number | null
    gift_amount?: BigIntNullableFilter<"SubscriptionPlan"> | bigint | number | null
    period?: StringNullableFilter<"SubscriptionPlan"> | string | null
    upgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    downgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    max_seats?: BigIntFilter<"SubscriptionPlan"> | bigint | number
    max_workspaces?: BigIntFilter<"SubscriptionPlan"> | bigint | number
    max_resources?: StringNullableFilter<"SubscriptionPlan"> | string | null
    created_at?: DateTimeNullableFilter<"SubscriptionPlan"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"SubscriptionPlan"> | Date | string | null
    most_popular?: BoolNullableFilter<"SubscriptionPlan"> | boolean | null
    Subscription?: SubscriptionListRelationFilter
  }, "id" | "name">

  export type SubscriptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    gift_amount?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    upgrade_plan_list?: SortOrder
    downgrade_plan_list?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
    max_resources?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    most_popular?: SortOrderInput | SortOrder
    _count?: SubscriptionPlanCountOrderByAggregateInput
    _avg?: SubscriptionPlanAvgOrderByAggregateInput
    _max?: SubscriptionPlanMaxOrderByAggregateInput
    _min?: SubscriptionPlanMinOrderByAggregateInput
    _sum?: SubscriptionPlanSumOrderByAggregateInput
  }

  export type SubscriptionPlanScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPlanScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SubscriptionPlan"> | string
    name?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    description?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    amount?: BigIntNullableWithAggregatesFilter<"SubscriptionPlan"> | bigint | number | null
    gift_amount?: BigIntNullableWithAggregatesFilter<"SubscriptionPlan"> | bigint | number | null
    period?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    upgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    downgrade_plan_list?: StringNullableListFilter<"SubscriptionPlan">
    max_seats?: BigIntWithAggregatesFilter<"SubscriptionPlan"> | bigint | number
    max_workspaces?: BigIntWithAggregatesFilter<"SubscriptionPlan"> | bigint | number
    max_resources?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"SubscriptionPlan"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"SubscriptionPlan"> | Date | string | null
    most_popular?: BoolNullableWithAggregatesFilter<"SubscriptionPlan"> | boolean | null
  }

  export type UserInfoWhereInput = {
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    id?: UuidFilter<"UserInfo"> | string
    userUid?: UuidFilter<"UserInfo"> | string
    firstname?: StringFilter<"UserInfo"> | string
    lastname?: StringFilter<"UserInfo"> | string
    signUpRegionUid?: UuidFilter<"UserInfo"> | string
    isInited?: BoolFilter<"UserInfo"> | boolean
    enSubEmail?: BoolFilter<"UserInfo"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserInfoOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    signUpRegionUid?: SortOrder
    isInited?: SortOrder
    enSubEmail?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userUid?: string
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    firstname?: StringFilter<"UserInfo"> | string
    lastname?: StringFilter<"UserInfo"> | string
    signUpRegionUid?: UuidFilter<"UserInfo"> | string
    isInited?: BoolFilter<"UserInfo"> | boolean
    enSubEmail?: BoolFilter<"UserInfo"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userUid">

  export type UserInfoOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    signUpRegionUid?: SortOrder
    isInited?: SortOrder
    enSubEmail?: SortOrder
    _count?: UserInfoCountOrderByAggregateInput
    _max?: UserInfoMaxOrderByAggregateInput
    _min?: UserInfoMinOrderByAggregateInput
  }

  export type UserInfoScalarWhereWithAggregatesInput = {
    AND?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    OR?: UserInfoScalarWhereWithAggregatesInput[]
    NOT?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserInfo"> | string
    userUid?: UuidWithAggregatesFilter<"UserInfo"> | string
    firstname?: StringWithAggregatesFilter<"UserInfo"> | string
    lastname?: StringWithAggregatesFilter<"UserInfo"> | string
    signUpRegionUid?: UuidWithAggregatesFilter<"UserInfo"> | string
    isInited?: BoolWithAggregatesFilter<"UserInfo"> | boolean
    enSubEmail?: BoolWithAggregatesFilter<"UserInfo"> | boolean
  }

  export type WorkspaceUsageWhereInput = {
    AND?: WorkspaceUsageWhereInput | WorkspaceUsageWhereInput[]
    OR?: WorkspaceUsageWhereInput[]
    NOT?: WorkspaceUsageWhereInput | WorkspaceUsageWhereInput[]
    id?: UuidFilter<"WorkspaceUsage"> | string
    userUid?: UuidFilter<"WorkspaceUsage"> | string
    workspaceUid?: UuidFilter<"WorkspaceUsage"> | string
    regionUid?: UuidFilter<"WorkspaceUsage"> | string
    seat?: IntFilter<"WorkspaceUsage"> | number
    createdAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WorkspaceUsageOrderByWithRelationInput = {
    id?: SortOrder
    userUid?: SortOrder
    workspaceUid?: SortOrder
    regionUid?: SortOrder
    seat?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WorkspaceUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    regionUid_userUid_workspaceUid?: WorkspaceUsageRegionUidUserUidWorkspaceUidCompoundUniqueInput
    AND?: WorkspaceUsageWhereInput | WorkspaceUsageWhereInput[]
    OR?: WorkspaceUsageWhereInput[]
    NOT?: WorkspaceUsageWhereInput | WorkspaceUsageWhereInput[]
    userUid?: UuidFilter<"WorkspaceUsage"> | string
    workspaceUid?: UuidFilter<"WorkspaceUsage"> | string
    regionUid?: UuidFilter<"WorkspaceUsage"> | string
    seat?: IntFilter<"WorkspaceUsage"> | number
    createdAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "regionUid_userUid_workspaceUid">

  export type WorkspaceUsageOrderByWithAggregationInput = {
    id?: SortOrder
    userUid?: SortOrder
    workspaceUid?: SortOrder
    regionUid?: SortOrder
    seat?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceUsageCountOrderByAggregateInput
    _avg?: WorkspaceUsageAvgOrderByAggregateInput
    _max?: WorkspaceUsageMaxOrderByAggregateInput
    _min?: WorkspaceUsageMinOrderByAggregateInput
    _sum?: WorkspaceUsageSumOrderByAggregateInput
  }

  export type WorkspaceUsageScalarWhereWithAggregatesInput = {
    AND?: WorkspaceUsageScalarWhereWithAggregatesInput | WorkspaceUsageScalarWhereWithAggregatesInput[]
    OR?: WorkspaceUsageScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceUsageScalarWhereWithAggregatesInput | WorkspaceUsageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"WorkspaceUsage"> | string
    userUid?: UuidWithAggregatesFilter<"WorkspaceUsage"> | string
    workspaceUid?: UuidWithAggregatesFilter<"WorkspaceUsage"> | string
    regionUid?: UuidWithAggregatesFilter<"WorkspaceUsage"> | string
    seat?: IntWithAggregatesFilter<"WorkspaceUsage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceUsage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceUsage"> | Date | string
  }

  export type OauthProviderCreateInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
    user: UserCreateNestedOneWithoutOauthProviderInput
  }

  export type OauthProviderUncheckedCreateInput = {
    uid?: string
    userUid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
  }

  export type OauthProviderUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOauthProviderNestedInput
  }

  export type OauthProviderUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OauthProviderCreateManyInput = {
    uid?: string
    userUid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
  }

  export type OauthProviderUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OauthProviderUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionCreateInput = {
    uid?: string
    displayName: string
    location: string
    domain: string
    description?: string | null
    WorkspaceUsage?: WorkspaceUsageCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    uid?: string
    displayName: string
    location: string
    domain: string
    description?: string | null
    WorkspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    WorkspaceUsage?: WorkspaceUsageUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    WorkspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    uid?: string
    displayName: string
    location: string
    domain: string
    description?: string | null
  }

  export type RegionUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    userUid?: string
    activityBonus: bigint | number
    encryptBalance: string
    encryptDeductionBalance: string
    created_at?: Date | string
    create_region_id: string
    balance?: bigint | number | null
    deduction_balance?: bigint | number | null
  }

  export type AccountUncheckedCreateInput = {
    userUid?: string
    activityBonus: bigint | number
    encryptBalance: string
    encryptDeductionBalance: string
    created_at?: Date | string
    create_region_id: string
    balance?: bigint | number | null
    deduction_balance?: bigint | number | null
  }

  export type AccountUpdateInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    activityBonus?: BigIntFieldUpdateOperationsInput | bigint | number
    encryptBalance?: StringFieldUpdateOperationsInput | string
    encryptDeductionBalance?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    create_region_id?: StringFieldUpdateOperationsInput | string
    balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type AccountUncheckedUpdateInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    activityBonus?: BigIntFieldUpdateOperationsInput | bigint | number
    encryptBalance?: StringFieldUpdateOperationsInput | string
    encryptDeductionBalance?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    create_region_id?: StringFieldUpdateOperationsInput | string
    balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type AccountCreateManyInput = {
    userUid?: string
    activityBonus: bigint | number
    encryptBalance: string
    encryptDeductionBalance: string
    created_at?: Date | string
    create_region_id: string
    balance?: bigint | number | null
    deduction_balance?: bigint | number | null
  }

  export type AccountUpdateManyMutationInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    activityBonus?: BigIntFieldUpdateOperationsInput | bigint | number
    encryptBalance?: StringFieldUpdateOperationsInput | string
    encryptDeductionBalance?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    create_region_id?: StringFieldUpdateOperationsInput | string
    balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type AccountUncheckedUpdateManyInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    activityBonus?: BigIntFieldUpdateOperationsInput | bigint | number
    encryptBalance?: StringFieldUpdateOperationsInput | string
    encryptDeductionBalance?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    create_region_id?: StringFieldUpdateOperationsInput | string
    balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type AccountTransactionCreateInput = {
    id?: string
    type: string
    deduction_balance: bigint | number
    balance: bigint | number
    message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    billing_id: string
    userUid: string
    balance_before?: bigint | number | null
    deduction_balance_before?: bigint | number | null
    region?: string | null
    deduction_credit?: bigint | number | null
    billing_id_list?: AccountTransactionCreatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionCreatecredit_id_listInput | string[]
  }

  export type AccountTransactionUncheckedCreateInput = {
    id?: string
    type: string
    deduction_balance: bigint | number
    balance: bigint | number
    message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    billing_id: string
    userUid: string
    balance_before?: bigint | number | null
    deduction_balance_before?: bigint | number | null
    region?: string | null
    deduction_credit?: bigint | number | null
    billing_id_list?: AccountTransactionCreatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionCreatecredit_id_listInput | string[]
  }

  export type AccountTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    deduction_balance?: BigIntFieldUpdateOperationsInput | bigint | number
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    deduction_credit?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    billing_id_list?: AccountTransactionUpdatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionUpdatecredit_id_listInput | string[]
  }

  export type AccountTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    deduction_balance?: BigIntFieldUpdateOperationsInput | bigint | number
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    deduction_credit?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    billing_id_list?: AccountTransactionUpdatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionUpdatecredit_id_listInput | string[]
  }

  export type AccountTransactionCreateManyInput = {
    id?: string
    type: string
    deduction_balance: bigint | number
    balance: bigint | number
    message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    billing_id: string
    userUid: string
    balance_before?: bigint | number | null
    deduction_balance_before?: bigint | number | null
    region?: string | null
    deduction_credit?: bigint | number | null
    billing_id_list?: AccountTransactionCreatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionCreatecredit_id_listInput | string[]
  }

  export type AccountTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    deduction_balance?: BigIntFieldUpdateOperationsInput | bigint | number
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    deduction_credit?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    billing_id_list?: AccountTransactionUpdatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionUpdatecredit_id_listInput | string[]
  }

  export type AccountTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    deduction_balance?: BigIntFieldUpdateOperationsInput | bigint | number
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deduction_balance_before?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    deduction_credit?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    billing_id_list?: AccountTransactionUpdatebilling_id_listInput | string[]
    credit_id_list?: AccountTransactionUpdatecredit_id_listInput | string[]
  }

  export type ErrorPaymentCreateCreateInput = {
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    create_time?: Date | string
  }

  export type ErrorPaymentCreateUncheckedCreateInput = {
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    create_time?: Date | string
  }

  export type ErrorPaymentCreateUpdateInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorPaymentCreateUncheckedUpdateInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorPaymentCreateCreateManyInput = {
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    create_time?: Date | string
  }

  export type ErrorPaymentCreateUpdateManyMutationInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorPaymentCreateUncheckedUpdateManyInput = {
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    activityType?: string | null
    metadata?: string | null
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
  }

  export type PaymentUncheckedCreateInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    activityType?: string | null
    metadata?: string | null
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateManyInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    message: string
    activityType?: string | null
    metadata?: string | null
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderCreateNestedManyWithoutUserInput
    userTasks?: UserTaskCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedCreateNestedManyWithoutUserInput
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
  }

  export type UserUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
  }

  export type UserUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
  }

  export type InviteRewardCreateInput = {
    payment_id: string
    userUid: string
    created_at?: Date | string
    payment_amount: bigint | number
    reward_amount: bigint | number
    inviteFrom: string
  }

  export type InviteRewardUncheckedCreateInput = {
    payment_id: string
    userUid: string
    created_at?: Date | string
    payment_amount: bigint | number
    reward_amount: bigint | number
    inviteFrom: string
  }

  export type InviteRewardUpdateInput = {
    payment_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    reward_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    inviteFrom?: StringFieldUpdateOperationsInput | string
  }

  export type InviteRewardUncheckedUpdateInput = {
    payment_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    reward_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    inviteFrom?: StringFieldUpdateOperationsInput | string
  }

  export type InviteRewardCreateManyInput = {
    payment_id: string
    userUid: string
    created_at?: Date | string
    payment_amount: bigint | number
    reward_amount: bigint | number
    inviteFrom: string
  }

  export type InviteRewardUpdateManyMutationInput = {
    payment_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    reward_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    inviteFrom?: StringFieldUpdateOperationsInput | string
  }

  export type InviteRewardUncheckedUpdateManyInput = {
    payment_id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    reward_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    inviteFrom?: StringFieldUpdateOperationsInput | string
  }

  export type UserSemChannelCreateInput = {
    id?: string
    userUid: string
    channel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelUncheckedCreateInput = {
    id?: string
    userUid: string
    channel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelCreateManyInput = {
    id?: string
    userUid: string
    channel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSemChannelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description: string
    reward: bigint | number
    order: number
    isActive?: boolean
    isNewUserTask?: boolean
    taskType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    userTasks?: UserTaskCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    reward: bigint | number
    order: number
    isActive?: boolean
    isNewUserTask?: boolean
    taskType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTasks?: UserTaskUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTasks?: UserTaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description: string
    reward: bigint | number
    order: number
    isActive?: boolean
    isNewUserTask?: boolean
    taskType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskCreateInput = {
    id?: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserTasksInput
    task: TaskCreateNestedOneWithoutUserTasksInput
  }

  export type UserTaskUncheckedCreateInput = {
    id?: string
    userUid: string
    taskId: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutUserTasksNestedInput
  }

  export type UserTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskCreateManyInput = {
    id?: string
    userUid: string
    taskId: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardInfoCreateInput = {
    id?: string
    user_uid: string
    card_no?: string | null
    card_brand?: string | null
    card_token?: string | null
    created_at?: Date | string | null
    network_transaction_id?: string | null
    default?: boolean | null
    last_payment_status?: string | null
  }

  export type CardInfoUncheckedCreateInput = {
    id?: string
    user_uid: string
    card_no?: string | null
    card_brand?: string | null
    card_token?: string | null
    created_at?: Date | string | null
    network_transaction_id?: string | null
    default?: boolean | null
    last_payment_status?: string | null
  }

  export type CardInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: StringFieldUpdateOperationsInput | string
    card_no?: NullableStringFieldUpdateOperationsInput | string | null
    card_brand?: NullableStringFieldUpdateOperationsInput | string | null
    card_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    network_transaction_id?: NullableStringFieldUpdateOperationsInput | string | null
    default?: NullableBoolFieldUpdateOperationsInput | boolean | null
    last_payment_status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: StringFieldUpdateOperationsInput | string
    card_no?: NullableStringFieldUpdateOperationsInput | string | null
    card_brand?: NullableStringFieldUpdateOperationsInput | string | null
    card_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    network_transaction_id?: NullableStringFieldUpdateOperationsInput | string | null
    default?: NullableBoolFieldUpdateOperationsInput | boolean | null
    last_payment_status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardInfoCreateManyInput = {
    id?: string
    user_uid: string
    card_no?: string | null
    card_brand?: string | null
    card_token?: string | null
    created_at?: Date | string | null
    network_transaction_id?: string | null
    default?: boolean | null
    last_payment_status?: string | null
  }

  export type CardInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: StringFieldUpdateOperationsInput | string
    card_no?: NullableStringFieldUpdateOperationsInput | string | null
    card_brand?: NullableStringFieldUpdateOperationsInput | string | null
    card_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    network_transaction_id?: NullableStringFieldUpdateOperationsInput | string | null
    default?: NullableBoolFieldUpdateOperationsInput | boolean | null
    last_payment_status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: StringFieldUpdateOperationsInput | string
    card_no?: NullableStringFieldUpdateOperationsInput | string | null
    card_brand?: NullableStringFieldUpdateOperationsInput | string | null
    card_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    network_transaction_id?: NullableStringFieldUpdateOperationsInput | string | null
    default?: NullableBoolFieldUpdateOperationsInput | boolean | null
    last_payment_status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CreditsCreateInput = {
    id?: string
    user_uid?: string | null
    amount?: bigint | number | null
    used_amount?: bigint | number | null
    from_id?: string | null
    from_type?: string | null
    expire_at?: Date | string | null
    created_at?: Date | string | null
    start_at?: Date | string | null
    status?: string | null
  }

  export type CreditsUncheckedCreateInput = {
    id?: string
    user_uid?: string | null
    amount?: bigint | number | null
    used_amount?: bigint | number | null
    from_id?: string | null
    from_type?: string | null
    expire_at?: Date | string | null
    created_at?: Date | string | null
    start_at?: Date | string | null
    status?: string | null
  }

  export type CreditsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    from_id?: NullableStringFieldUpdateOperationsInput | string | null
    from_type?: NullableStringFieldUpdateOperationsInput | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CreditsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    from_id?: NullableStringFieldUpdateOperationsInput | string | null
    from_type?: NullableStringFieldUpdateOperationsInput | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CreditsCreateManyInput = {
    id?: string
    user_uid?: string | null
    amount?: bigint | number | null
    used_amount?: bigint | number | null
    from_id?: string | null
    from_type?: string | null
    expire_at?: Date | string | null
    created_at?: Date | string | null
    start_at?: Date | string | null
    status?: string | null
  }

  export type CreditsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    from_id?: NullableStringFieldUpdateOperationsInput | string | null
    from_type?: NullableStringFieldUpdateOperationsInput | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CreditsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    used_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    from_id?: NullableStringFieldUpdateOperationsInput | string | null
    from_type?: NullableStringFieldUpdateOperationsInput | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoicePaymentCreateInput = {
    invoice_id?: string | null
    payment_id: string
    amount: bigint | number
  }

  export type InvoicePaymentUncheckedCreateInput = {
    invoice_id?: string | null
    payment_id: string
    amount: bigint | number
  }

  export type InvoicePaymentUpdateInput = {
    invoice_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_id?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type InvoicePaymentUncheckedUpdateInput = {
    invoice_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_id?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type InvoicePaymentCreateManyInput = {
    invoice_id?: string | null
    payment_id: string
    amount: bigint | number
  }

  export type InvoicePaymentUpdateManyMutationInput = {
    invoice_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_id?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type InvoicePaymentUncheckedUpdateManyInput = {
    invoice_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_id?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PaymentOrderCreateInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string | null
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    activityType?: string | null
    message: string
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
    status: string
  }

  export type PaymentOrderUncheckedCreateInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string | null
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    activityType?: string | null
    message: string
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
    status: string
  }

  export type PaymentOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentOrderCreateManyInput = {
    id: string
    userUid: string
    regionUid: string
    created_at?: Date | string | null
    regionUserOwner: string
    method: string
    amount: bigint | number
    gift?: bigint | number | null
    trade_no: string
    code_url?: string | null
    invoiced_at?: boolean | null
    remark?: string | null
    activityType?: string | null
    message: string
    card_uid?: string | null
    type?: string | null
    charge_source?: string | null
    status: string
  }

  export type PaymentOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    regionUserOwner?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: BigIntFieldUpdateOperationsInput | bigint | number
    gift?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    trade_no?: StringFieldUpdateOperationsInput | string
    code_url?: NullableStringFieldUpdateOperationsInput | string | null
    invoiced_at?: NullableBoolFieldUpdateOperationsInput | boolean | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    card_uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    charge_source?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    plan_name?: string | null
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
    subscriptionPlan: SubscriptionPlanCreateNestedOneWithoutSubscriptionInput
    user: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    plan_id: string
    plan_name?: string | null
    user_uid: string
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionPlan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionNestedInput
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_uid?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    plan_id: string
    plan_name?: string | null
    user_uid: string
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_uid?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionPlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    amount?: bigint | number | null
    gift_amount?: bigint | number | null
    period?: string | null
    upgrade_plan_list?: SubscriptionPlanCreateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanCreatedowngrade_plan_listInput | string[]
    max_seats: bigint | number
    max_workspaces: bigint | number
    max_resources?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    most_popular?: boolean | null
    Subscription?: SubscriptionCreateNestedManyWithoutSubscriptionPlanInput
  }

  export type SubscriptionPlanUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    amount?: bigint | number | null
    gift_amount?: bigint | number | null
    period?: string | null
    upgrade_plan_list?: SubscriptionPlanCreateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanCreatedowngrade_plan_listInput | string[]
    max_seats: bigint | number
    max_workspaces: bigint | number
    max_resources?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    most_popular?: boolean | null
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutSubscriptionPlanInput
  }

  export type SubscriptionPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Subscription?: SubscriptionUpdateManyWithoutSubscriptionPlanNestedInput
  }

  export type SubscriptionPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Subscription?: SubscriptionUncheckedUpdateManyWithoutSubscriptionPlanNestedInput
  }

  export type SubscriptionPlanCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    amount?: bigint | number | null
    gift_amount?: bigint | number | null
    period?: string | null
    upgrade_plan_list?: SubscriptionPlanCreateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanCreatedowngrade_plan_listInput | string[]
    max_seats: bigint | number
    max_workspaces: bigint | number
    max_resources?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    most_popular?: boolean | null
  }

  export type SubscriptionPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SubscriptionPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserInfoCreateInput = {
    id?: string
    firstname?: string
    lastname?: string
    signUpRegionUid: string
    isInited?: boolean
    enSubEmail?: boolean
    user: UserCreateNestedOneWithoutUserInfoInput
  }

  export type UserInfoUncheckedCreateInput = {
    id?: string
    userUid: string
    firstname?: string
    lastname?: string
    signUpRegionUid: string
    isInited?: boolean
    enSubEmail?: boolean
  }

  export type UserInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserInfoNestedInput
  }

  export type UserInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserInfoCreateManyInput = {
    id?: string
    userUid: string
    firstname?: string
    lastname?: string
    signUpRegionUid: string
    isInited?: boolean
    enSubEmail?: boolean
  }

  export type UserInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkspaceUsageCreateInput = {
    id?: string
    workspaceUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
    region: RegionCreateNestedOneWithoutWorkspaceUsageInput
    user: UserCreateNestedOneWithoutWorkspaceUsageInput
  }

  export type WorkspaceUsageUncheckedCreateInput = {
    id?: string
    userUid: string
    workspaceUid: string
    regionUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type WorkspaceUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkspaceUsageNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceUsageNestedInput
  }

  export type WorkspaceUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUsageCreateManyInput = {
    id?: string
    userUid: string
    workspaceUid: string
    regionUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type WorkspaceUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OauthProviderProviderIdProviderTypeCompoundUniqueInput = {
    providerId: string
    providerType: $Enums.ProviderType
  }

  export type OauthProviderCountOrderByAggregateInput = {
    uid?: SortOrder
    userUid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    password?: SortOrder
  }

  export type OauthProviderMaxOrderByAggregateInput = {
    uid?: SortOrder
    userUid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    password?: SortOrder
  }

  export type OauthProviderMinOrderByAggregateInput = {
    uid?: SortOrder
    userUid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    password?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type WorkspaceUsageListRelationFilter = {
    every?: WorkspaceUsageWhereInput
    some?: WorkspaceUsageWhereInput
    none?: WorkspaceUsageWhereInput
  }

  export type WorkspaceUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    location?: SortOrder
    domain?: SortOrder
    description?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    location?: SortOrder
    domain?: SortOrder
    description?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    location?: SortOrder
    domain?: SortOrder
    description?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type AccountCountOrderByAggregateInput = {
    userUid?: SortOrder
    activityBonus?: SortOrder
    encryptBalance?: SortOrder
    encryptDeductionBalance?: SortOrder
    created_at?: SortOrder
    create_region_id?: SortOrder
    balance?: SortOrder
    deduction_balance?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    activityBonus?: SortOrder
    balance?: SortOrder
    deduction_balance?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    userUid?: SortOrder
    activityBonus?: SortOrder
    encryptBalance?: SortOrder
    encryptDeductionBalance?: SortOrder
    created_at?: SortOrder
    create_region_id?: SortOrder
    balance?: SortOrder
    deduction_balance?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    userUid?: SortOrder
    activityBonus?: SortOrder
    encryptBalance?: SortOrder
    encryptDeductionBalance?: SortOrder
    created_at?: SortOrder
    create_region_id?: SortOrder
    balance?: SortOrder
    deduction_balance?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    activityBonus?: SortOrder
    balance?: SortOrder
    deduction_balance?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AccountTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    deduction_balance?: SortOrder
    balance?: SortOrder
    message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    billing_id?: SortOrder
    userUid?: SortOrder
    balance_before?: SortOrder
    deduction_balance_before?: SortOrder
    region?: SortOrder
    deduction_credit?: SortOrder
    billing_id_list?: SortOrder
    credit_id_list?: SortOrder
  }

  export type AccountTransactionAvgOrderByAggregateInput = {
    deduction_balance?: SortOrder
    balance?: SortOrder
    balance_before?: SortOrder
    deduction_balance_before?: SortOrder
    deduction_credit?: SortOrder
  }

  export type AccountTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    deduction_balance?: SortOrder
    balance?: SortOrder
    message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    billing_id?: SortOrder
    userUid?: SortOrder
    balance_before?: SortOrder
    deduction_balance_before?: SortOrder
    region?: SortOrder
    deduction_credit?: SortOrder
  }

  export type AccountTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    deduction_balance?: SortOrder
    balance?: SortOrder
    message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    billing_id?: SortOrder
    userUid?: SortOrder
    balance_before?: SortOrder
    deduction_balance_before?: SortOrder
    region?: SortOrder
    deduction_credit?: SortOrder
  }

  export type AccountTransactionSumOrderByAggregateInput = {
    deduction_balance?: SortOrder
    balance?: SortOrder
    balance_before?: SortOrder
    deduction_balance_before?: SortOrder
    deduction_credit?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ErrorPaymentCreateCountOrderByAggregateInput = {
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    create_time?: SortOrder
  }

  export type ErrorPaymentCreateAvgOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type ErrorPaymentCreateMaxOrderByAggregateInput = {
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    create_time?: SortOrder
  }

  export type ErrorPaymentCreateMinOrderByAggregateInput = {
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    create_time?: SortOrder
  }

  export type ErrorPaymentCreateSumOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    activityType?: SortOrder
    metadata?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    activityType?: SortOrder
    metadata?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    message?: SortOrder
    activityType?: SortOrder
    metadata?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type OauthProviderListRelationFilter = {
    every?: OauthProviderWhereInput
    some?: OauthProviderWhereInput
    none?: OauthProviderWhereInput
  }

  export type UserTaskListRelationFilter = {
    every?: UserTaskWhereInput
    some?: UserTaskWhereInput
    none?: UserTaskWhereInput
  }

  export type UserInfoNullableRelationFilter = {
    is?: UserInfoWhereInput | null
    isNot?: UserInfoWhereInput | null
  }

  export type SubscriptionNullableRelationFilter = {
    is?: SubscriptionWhereInput | null
    isNot?: SubscriptionWhereInput | null
  }

  export type OauthProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarUri?: SortOrder
    nickname?: SortOrder
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarUri?: SortOrder
    nickname?: SortOrder
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarUri?: SortOrder
    nickname?: SortOrder
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type InviteRewardCountOrderByAggregateInput = {
    payment_id?: SortOrder
    userUid?: SortOrder
    created_at?: SortOrder
    payment_amount?: SortOrder
    reward_amount?: SortOrder
    inviteFrom?: SortOrder
  }

  export type InviteRewardAvgOrderByAggregateInput = {
    payment_amount?: SortOrder
    reward_amount?: SortOrder
  }

  export type InviteRewardMaxOrderByAggregateInput = {
    payment_id?: SortOrder
    userUid?: SortOrder
    created_at?: SortOrder
    payment_amount?: SortOrder
    reward_amount?: SortOrder
    inviteFrom?: SortOrder
  }

  export type InviteRewardMinOrderByAggregateInput = {
    payment_id?: SortOrder
    userUid?: SortOrder
    created_at?: SortOrder
    payment_amount?: SortOrder
    reward_amount?: SortOrder
    inviteFrom?: SortOrder
  }

  export type InviteRewardSumOrderByAggregateInput = {
    payment_amount?: SortOrder
    reward_amount?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserSemChannelCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    additionalInfo?: SortOrder
  }

  export type UserSemChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSemChannelMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    reward?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    isNewUserTask?: SortOrder
    taskType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    reward?: SortOrder
    order?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    reward?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    isNewUserTask?: SortOrder
    taskType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    reward?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    isNewUserTask?: SortOrder
    taskType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    reward?: SortOrder
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type TaskRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type UserTaskUserUidTaskIdCompoundUniqueInput = {
    userUid: string
    taskId: string
  }

  export type UserTaskCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    taskId?: SortOrder
    status?: SortOrder
    rewardStatus?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    taskId?: SortOrder
    status?: SortOrder
    rewardStatus?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTaskMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    taskId?: SortOrder
    status?: SortOrder
    rewardStatus?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CardInfoCountOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    card_no?: SortOrder
    card_brand?: SortOrder
    card_token?: SortOrder
    created_at?: SortOrder
    network_transaction_id?: SortOrder
    default?: SortOrder
    last_payment_status?: SortOrder
  }

  export type CardInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    card_no?: SortOrder
    card_brand?: SortOrder
    card_token?: SortOrder
    created_at?: SortOrder
    network_transaction_id?: SortOrder
    default?: SortOrder
    last_payment_status?: SortOrder
  }

  export type CardInfoMinOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    card_no?: SortOrder
    card_brand?: SortOrder
    card_token?: SortOrder
    created_at?: SortOrder
    network_transaction_id?: SortOrder
    default?: SortOrder
    last_payment_status?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CreditsCountOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    amount?: SortOrder
    used_amount?: SortOrder
    from_id?: SortOrder
    from_type?: SortOrder
    expire_at?: SortOrder
    created_at?: SortOrder
    start_at?: SortOrder
    status?: SortOrder
  }

  export type CreditsAvgOrderByAggregateInput = {
    amount?: SortOrder
    used_amount?: SortOrder
  }

  export type CreditsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    amount?: SortOrder
    used_amount?: SortOrder
    from_id?: SortOrder
    from_type?: SortOrder
    expire_at?: SortOrder
    created_at?: SortOrder
    start_at?: SortOrder
    status?: SortOrder
  }

  export type CreditsMinOrderByAggregateInput = {
    id?: SortOrder
    user_uid?: SortOrder
    amount?: SortOrder
    used_amount?: SortOrder
    from_id?: SortOrder
    from_type?: SortOrder
    expire_at?: SortOrder
    created_at?: SortOrder
    start_at?: SortOrder
    status?: SortOrder
  }

  export type CreditsSumOrderByAggregateInput = {
    amount?: SortOrder
    used_amount?: SortOrder
  }

  export type InvoicePaymentCountOrderByAggregateInput = {
    invoice_id?: SortOrder
    payment_id?: SortOrder
    amount?: SortOrder
  }

  export type InvoicePaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InvoicePaymentMaxOrderByAggregateInput = {
    invoice_id?: SortOrder
    payment_id?: SortOrder
    amount?: SortOrder
  }

  export type InvoicePaymentMinOrderByAggregateInput = {
    invoice_id?: SortOrder
    payment_id?: SortOrder
    amount?: SortOrder
  }

  export type InvoicePaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentOrderCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    activityType?: SortOrder
    message?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
    status?: SortOrder
  }

  export type PaymentOrderAvgOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type PaymentOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    activityType?: SortOrder
    message?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
    status?: SortOrder
  }

  export type PaymentOrderMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    regionUid?: SortOrder
    created_at?: SortOrder
    regionUserOwner?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    gift?: SortOrder
    trade_no?: SortOrder
    code_url?: SortOrder
    invoiced_at?: SortOrder
    remark?: SortOrder
    activityType?: SortOrder
    message?: SortOrder
    card_uid?: SortOrder
    type?: SortOrder
    charge_source?: SortOrder
    status?: SortOrder
  }

  export type PaymentOrderSumOrderByAggregateInput = {
    amount?: SortOrder
    gift?: SortOrder
  }

  export type SubscriptionPlanRelationFilter = {
    is?: SubscriptionPlanWhereInput
    isNot?: SubscriptionPlanWhereInput
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    plan_id?: SortOrder
    plan_name?: SortOrder
    user_uid?: SortOrder
    status?: SortOrder
    start_at?: SortOrder
    update_at?: SortOrder
    expire_at?: SortOrder
    card_id?: SortOrder
    next_cycle_date?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    plan_id?: SortOrder
    plan_name?: SortOrder
    user_uid?: SortOrder
    status?: SortOrder
    start_at?: SortOrder
    update_at?: SortOrder
    expire_at?: SortOrder
    card_id?: SortOrder
    next_cycle_date?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    plan_id?: SortOrder
    plan_name?: SortOrder
    user_uid?: SortOrder
    status?: SortOrder
    start_at?: SortOrder
    update_at?: SortOrder
    expire_at?: SortOrder
    card_id?: SortOrder
    next_cycle_date?: SortOrder
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    gift_amount?: SortOrder
    period?: SortOrder
    upgrade_plan_list?: SortOrder
    downgrade_plan_list?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
    max_resources?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    most_popular?: SortOrder
  }

  export type SubscriptionPlanAvgOrderByAggregateInput = {
    amount?: SortOrder
    gift_amount?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
  }

  export type SubscriptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    gift_amount?: SortOrder
    period?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
    max_resources?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    most_popular?: SortOrder
  }

  export type SubscriptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    gift_amount?: SortOrder
    period?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
    max_resources?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    most_popular?: SortOrder
  }

  export type SubscriptionPlanSumOrderByAggregateInput = {
    amount?: SortOrder
    gift_amount?: SortOrder
    max_seats?: SortOrder
    max_workspaces?: SortOrder
  }

  export type UserInfoCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    signUpRegionUid?: SortOrder
    isInited?: SortOrder
    enSubEmail?: SortOrder
  }

  export type UserInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    signUpRegionUid?: SortOrder
    isInited?: SortOrder
    enSubEmail?: SortOrder
  }

  export type UserInfoMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    signUpRegionUid?: SortOrder
    isInited?: SortOrder
    enSubEmail?: SortOrder
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type WorkspaceUsageRegionUidUserUidWorkspaceUidCompoundUniqueInput = {
    regionUid: string
    userUid: string
    workspaceUid: string
  }

  export type WorkspaceUsageCountOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    workspaceUid?: SortOrder
    regionUid?: SortOrder
    seat?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUsageAvgOrderByAggregateInput = {
    seat?: SortOrder
  }

  export type WorkspaceUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    workspaceUid?: SortOrder
    regionUid?: SortOrder
    seat?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUsageMinOrderByAggregateInput = {
    id?: SortOrder
    userUid?: SortOrder
    workspaceUid?: SortOrder
    regionUid?: SortOrder
    seat?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUsageSumOrderByAggregateInput = {
    seat?: SortOrder
  }

  export type UserCreateNestedOneWithoutOauthProviderInput = {
    create?: XOR<UserCreateWithoutOauthProviderInput, UserUncheckedCreateWithoutOauthProviderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthProviderInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumProviderTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProviderType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutOauthProviderNestedInput = {
    create?: XOR<UserCreateWithoutOauthProviderInput, UserUncheckedCreateWithoutOauthProviderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthProviderInput
    upsert?: UserUpsertWithoutOauthProviderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauthProviderInput, UserUpdateWithoutOauthProviderInput>, UserUncheckedUpdateWithoutOauthProviderInput>
  }

  export type WorkspaceUsageCreateNestedManyWithoutRegionInput = {
    create?: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput> | WorkspaceUsageCreateWithoutRegionInput[] | WorkspaceUsageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutRegionInput | WorkspaceUsageCreateOrConnectWithoutRegionInput[]
    createMany?: WorkspaceUsageCreateManyRegionInputEnvelope
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
  }

  export type WorkspaceUsageUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput> | WorkspaceUsageCreateWithoutRegionInput[] | WorkspaceUsageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutRegionInput | WorkspaceUsageCreateOrConnectWithoutRegionInput[]
    createMany?: WorkspaceUsageCreateManyRegionInputEnvelope
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
  }

  export type WorkspaceUsageUpdateManyWithoutRegionNestedInput = {
    create?: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput> | WorkspaceUsageCreateWithoutRegionInput[] | WorkspaceUsageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutRegionInput | WorkspaceUsageCreateOrConnectWithoutRegionInput[]
    upsert?: WorkspaceUsageUpsertWithWhereUniqueWithoutRegionInput | WorkspaceUsageUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: WorkspaceUsageCreateManyRegionInputEnvelope
    set?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    disconnect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    delete?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    update?: WorkspaceUsageUpdateWithWhereUniqueWithoutRegionInput | WorkspaceUsageUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: WorkspaceUsageUpdateManyWithWhereWithoutRegionInput | WorkspaceUsageUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
  }

  export type WorkspaceUsageUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput> | WorkspaceUsageCreateWithoutRegionInput[] | WorkspaceUsageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutRegionInput | WorkspaceUsageCreateOrConnectWithoutRegionInput[]
    upsert?: WorkspaceUsageUpsertWithWhereUniqueWithoutRegionInput | WorkspaceUsageUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: WorkspaceUsageCreateManyRegionInputEnvelope
    set?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    disconnect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    delete?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    update?: WorkspaceUsageUpdateWithWhereUniqueWithoutRegionInput | WorkspaceUsageUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: WorkspaceUsageUpdateManyWithWhereWithoutRegionInput | WorkspaceUsageUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type AccountTransactionCreatebilling_id_listInput = {
    set: string[]
  }

  export type AccountTransactionCreatecredit_id_listInput = {
    set: string[]
  }

  export type AccountTransactionUpdatebilling_id_listInput = {
    set?: string[]
  }

  export type AccountTransactionUpdatecredit_id_listInput = {
    set?: string[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type OauthProviderCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput> | OauthProviderCreateWithoutUserInput[] | OauthProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthProviderCreateOrConnectWithoutUserInput | OauthProviderCreateOrConnectWithoutUserInput[]
    createMany?: OauthProviderCreateManyUserInputEnvelope
    connect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
  }

  export type UserTaskCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput> | UserTaskCreateWithoutUserInput[] | UserTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutUserInput | UserTaskCreateOrConnectWithoutUserInput[]
    createMany?: UserTaskCreateManyUserInputEnvelope
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
  }

  export type UserInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    connect?: UserInfoWhereUniqueInput
  }

  export type WorkspaceUsageCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput> | WorkspaceUsageCreateWithoutUserInput[] | WorkspaceUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutUserInput | WorkspaceUsageCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceUsageCreateManyUserInputEnvelope
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type OauthProviderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput> | OauthProviderCreateWithoutUserInput[] | OauthProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthProviderCreateOrConnectWithoutUserInput | OauthProviderCreateOrConnectWithoutUserInput[]
    createMany?: OauthProviderCreateManyUserInputEnvelope
    connect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
  }

  export type UserTaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput> | UserTaskCreateWithoutUserInput[] | UserTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutUserInput | UserTaskCreateOrConnectWithoutUserInput[]
    createMany?: UserTaskCreateManyUserInputEnvelope
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
  }

  export type UserInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    connect?: UserInfoWhereUniqueInput
  }

  export type WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput> | WorkspaceUsageCreateWithoutUserInput[] | WorkspaceUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutUserInput | WorkspaceUsageCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceUsageCreateManyUserInputEnvelope
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type OauthProviderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput> | OauthProviderCreateWithoutUserInput[] | OauthProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthProviderCreateOrConnectWithoutUserInput | OauthProviderCreateOrConnectWithoutUserInput[]
    upsert?: OauthProviderUpsertWithWhereUniqueWithoutUserInput | OauthProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthProviderCreateManyUserInputEnvelope
    set?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    disconnect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    delete?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    connect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    update?: OauthProviderUpdateWithWhereUniqueWithoutUserInput | OauthProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthProviderUpdateManyWithWhereWithoutUserInput | OauthProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthProviderScalarWhereInput | OauthProviderScalarWhereInput[]
  }

  export type UserTaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput> | UserTaskCreateWithoutUserInput[] | UserTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutUserInput | UserTaskCreateOrConnectWithoutUserInput[]
    upsert?: UserTaskUpsertWithWhereUniqueWithoutUserInput | UserTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTaskCreateManyUserInputEnvelope
    set?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    disconnect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    delete?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    update?: UserTaskUpdateWithWhereUniqueWithoutUserInput | UserTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTaskUpdateManyWithWhereWithoutUserInput | UserTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
  }

  export type UserInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    upsert?: UserInfoUpsertWithoutUserInput
    disconnect?: UserInfoWhereInput | boolean
    delete?: UserInfoWhereInput | boolean
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutUserInput, UserInfoUpdateWithoutUserInput>, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceUsageUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput> | WorkspaceUsageCreateWithoutUserInput[] | WorkspaceUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutUserInput | WorkspaceUsageCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceUsageUpsertWithWhereUniqueWithoutUserInput | WorkspaceUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceUsageCreateManyUserInputEnvelope
    set?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    disconnect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    delete?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    update?: WorkspaceUsageUpdateWithWhereUniqueWithoutUserInput | WorkspaceUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceUsageUpdateManyWithWhereWithoutUserInput | WorkspaceUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
  }

  export type SubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type OauthProviderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput> | OauthProviderCreateWithoutUserInput[] | OauthProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthProviderCreateOrConnectWithoutUserInput | OauthProviderCreateOrConnectWithoutUserInput[]
    upsert?: OauthProviderUpsertWithWhereUniqueWithoutUserInput | OauthProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthProviderCreateManyUserInputEnvelope
    set?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    disconnect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    delete?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    connect?: OauthProviderWhereUniqueInput | OauthProviderWhereUniqueInput[]
    update?: OauthProviderUpdateWithWhereUniqueWithoutUserInput | OauthProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthProviderUpdateManyWithWhereWithoutUserInput | OauthProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthProviderScalarWhereInput | OauthProviderScalarWhereInput[]
  }

  export type UserTaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput> | UserTaskCreateWithoutUserInput[] | UserTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutUserInput | UserTaskCreateOrConnectWithoutUserInput[]
    upsert?: UserTaskUpsertWithWhereUniqueWithoutUserInput | UserTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTaskCreateManyUserInputEnvelope
    set?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    disconnect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    delete?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    update?: UserTaskUpdateWithWhereUniqueWithoutUserInput | UserTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTaskUpdateManyWithWhereWithoutUserInput | UserTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
  }

  export type UserInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    upsert?: UserInfoUpsertWithoutUserInput
    disconnect?: UserInfoWhereInput | boolean
    delete?: UserInfoWhereInput | boolean
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutUserInput, UserInfoUpdateWithoutUserInput>, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput> | WorkspaceUsageCreateWithoutUserInput[] | WorkspaceUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUsageCreateOrConnectWithoutUserInput | WorkspaceUsageCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceUsageUpsertWithWhereUniqueWithoutUserInput | WorkspaceUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceUsageCreateManyUserInputEnvelope
    set?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    disconnect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    delete?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    connect?: WorkspaceUsageWhereUniqueInput | WorkspaceUsageWhereUniqueInput[]
    update?: WorkspaceUsageUpdateWithWhereUniqueWithoutUserInput | WorkspaceUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceUsageUpdateManyWithWhereWithoutUserInput | WorkspaceUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UserTaskCreateNestedManyWithoutTaskInput = {
    create?: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput> | UserTaskCreateWithoutTaskInput[] | UserTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutTaskInput | UserTaskCreateOrConnectWithoutTaskInput[]
    createMany?: UserTaskCreateManyTaskInputEnvelope
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
  }

  export type UserTaskUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput> | UserTaskCreateWithoutTaskInput[] | UserTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutTaskInput | UserTaskCreateOrConnectWithoutTaskInput[]
    createMany?: UserTaskCreateManyTaskInputEnvelope
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskType
  }

  export type UserTaskUpdateManyWithoutTaskNestedInput = {
    create?: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput> | UserTaskCreateWithoutTaskInput[] | UserTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutTaskInput | UserTaskCreateOrConnectWithoutTaskInput[]
    upsert?: UserTaskUpsertWithWhereUniqueWithoutTaskInput | UserTaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: UserTaskCreateManyTaskInputEnvelope
    set?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    disconnect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    delete?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    update?: UserTaskUpdateWithWhereUniqueWithoutTaskInput | UserTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: UserTaskUpdateManyWithWhereWithoutTaskInput | UserTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
  }

  export type UserTaskUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput> | UserTaskCreateWithoutTaskInput[] | UserTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserTaskCreateOrConnectWithoutTaskInput | UserTaskCreateOrConnectWithoutTaskInput[]
    upsert?: UserTaskUpsertWithWhereUniqueWithoutTaskInput | UserTaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: UserTaskCreateManyTaskInputEnvelope
    set?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    disconnect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    delete?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    connect?: UserTaskWhereUniqueInput | UserTaskWhereUniqueInput[]
    update?: UserTaskUpdateWithWhereUniqueWithoutTaskInput | UserTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: UserTaskUpdateManyWithWhereWithoutTaskInput | UserTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserTasksInput = {
    create?: XOR<UserCreateWithoutUserTasksInput, UserUncheckedCreateWithoutUserTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutUserTasksInput = {
    create?: XOR<TaskCreateWithoutUserTasksInput, TaskUncheckedCreateWithoutUserTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutUserTasksInput
    connect?: TaskWhereUniqueInput
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type UserUpdateOneRequiredWithoutUserTasksNestedInput = {
    create?: XOR<UserCreateWithoutUserTasksInput, UserUncheckedCreateWithoutUserTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTasksInput
    upsert?: UserUpsertWithoutUserTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserTasksInput, UserUpdateWithoutUserTasksInput>, UserUncheckedUpdateWithoutUserTasksInput>
  }

  export type TaskUpdateOneRequiredWithoutUserTasksNestedInput = {
    create?: XOR<TaskCreateWithoutUserTasksInput, TaskUncheckedCreateWithoutUserTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutUserTasksInput
    upsert?: TaskUpsertWithoutUserTasksInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutUserTasksInput, TaskUpdateWithoutUserTasksInput>, TaskUncheckedUpdateWithoutUserTasksInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SubscriptionPlanCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionInput
    connect?: SubscriptionPlanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type SubscriptionPlanUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionInput
    upsert?: SubscriptionPlanUpsertWithoutSubscriptionInput
    connect?: SubscriptionPlanWhereUniqueInput
    update?: XOR<XOR<SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionInput, SubscriptionPlanUpdateWithoutSubscriptionInput>, SubscriptionPlanUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type SubscriptionPlanCreateupgrade_plan_listInput = {
    set: string[]
  }

  export type SubscriptionPlanCreatedowngrade_plan_listInput = {
    set: string[]
  }

  export type SubscriptionCreateNestedManyWithoutSubscriptionPlanInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput> | SubscriptionCreateWithoutSubscriptionPlanInput[] | SubscriptionUncheckedCreateWithoutSubscriptionPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPlanInput | SubscriptionCreateOrConnectWithoutSubscriptionPlanInput[]
    createMany?: SubscriptionCreateManySubscriptionPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutSubscriptionPlanInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput> | SubscriptionCreateWithoutSubscriptionPlanInput[] | SubscriptionUncheckedCreateWithoutSubscriptionPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPlanInput | SubscriptionCreateOrConnectWithoutSubscriptionPlanInput[]
    createMany?: SubscriptionCreateManySubscriptionPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionPlanUpdateupgrade_plan_listInput = {
    set?: string[]
  }

  export type SubscriptionPlanUpdatedowngrade_plan_listInput = {
    set?: string[]
  }

  export type SubscriptionUpdateManyWithoutSubscriptionPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput> | SubscriptionCreateWithoutSubscriptionPlanInput[] | SubscriptionUncheckedCreateWithoutSubscriptionPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPlanInput | SubscriptionCreateOrConnectWithoutSubscriptionPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscriptionPlanInput | SubscriptionUpsertWithWhereUniqueWithoutSubscriptionPlanInput[]
    createMany?: SubscriptionCreateManySubscriptionPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscriptionPlanInput | SubscriptionUpdateWithWhereUniqueWithoutSubscriptionPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscriptionPlanInput | SubscriptionUpdateManyWithWhereWithoutSubscriptionPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscriptionPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput> | SubscriptionCreateWithoutSubscriptionPlanInput[] | SubscriptionUncheckedCreateWithoutSubscriptionPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPlanInput | SubscriptionCreateOrConnectWithoutSubscriptionPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscriptionPlanInput | SubscriptionUpsertWithWhereUniqueWithoutSubscriptionPlanInput[]
    createMany?: SubscriptionCreateManySubscriptionPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscriptionPlanInput | SubscriptionUpdateWithWhereUniqueWithoutSubscriptionPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscriptionPlanInput | SubscriptionUpdateManyWithWhereWithoutSubscriptionPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserInfoInput = {
    create?: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInfoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserInfoNestedInput = {
    create?: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInfoInput
    upsert?: UserUpsertWithoutUserInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserInfoInput, UserUpdateWithoutUserInfoInput>, UserUncheckedUpdateWithoutUserInfoInput>
  }

  export type RegionCreateNestedOneWithoutWorkspaceUsageInput = {
    create?: XOR<RegionCreateWithoutWorkspaceUsageInput, RegionUncheckedCreateWithoutWorkspaceUsageInput>
    connectOrCreate?: RegionCreateOrConnectWithoutWorkspaceUsageInput
    connect?: RegionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkspaceUsageInput = {
    create?: XOR<UserCreateWithoutWorkspaceUsageInput, UserUncheckedCreateWithoutWorkspaceUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceUsageInput
    connect?: UserWhereUniqueInput
  }

  export type RegionUpdateOneRequiredWithoutWorkspaceUsageNestedInput = {
    create?: XOR<RegionCreateWithoutWorkspaceUsageInput, RegionUncheckedCreateWithoutWorkspaceUsageInput>
    connectOrCreate?: RegionCreateOrConnectWithoutWorkspaceUsageInput
    upsert?: RegionUpsertWithoutWorkspaceUsageInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutWorkspaceUsageInput, RegionUpdateWithoutWorkspaceUsageInput>, RegionUncheckedUpdateWithoutWorkspaceUsageInput>
  }

  export type UserUpdateOneRequiredWithoutWorkspaceUsageNestedInput = {
    create?: XOR<UserCreateWithoutWorkspaceUsageInput, UserUncheckedCreateWithoutWorkspaceUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceUsageInput
    upsert?: UserUpsertWithoutWorkspaceUsageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkspaceUsageInput, UserUpdateWithoutWorkspaceUsageInput>, UserUncheckedUpdateWithoutWorkspaceUsageInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutOauthProviderInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    userTasks?: UserTaskCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOauthProviderInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOauthProviderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauthProviderInput, UserUncheckedCreateWithoutOauthProviderInput>
  }

  export type UserUpsertWithoutOauthProviderInput = {
    update: XOR<UserUpdateWithoutOauthProviderInput, UserUncheckedUpdateWithoutOauthProviderInput>
    create: XOR<UserCreateWithoutOauthProviderInput, UserUncheckedCreateWithoutOauthProviderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauthProviderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauthProviderInput, UserUncheckedUpdateWithoutOauthProviderInput>
  }

  export type UserUpdateWithoutOauthProviderInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    userTasks?: UserTaskUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOauthProviderInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    userTasks?: UserTaskUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WorkspaceUsageCreateWithoutRegionInput = {
    id?: string
    workspaceUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
    user: UserCreateNestedOneWithoutWorkspaceUsageInput
  }

  export type WorkspaceUsageUncheckedCreateWithoutRegionInput = {
    id?: string
    userUid: string
    workspaceUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type WorkspaceUsageCreateOrConnectWithoutRegionInput = {
    where: WorkspaceUsageWhereUniqueInput
    create: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput>
  }

  export type WorkspaceUsageCreateManyRegionInputEnvelope = {
    data: WorkspaceUsageCreateManyRegionInput | WorkspaceUsageCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceUsageUpsertWithWhereUniqueWithoutRegionInput = {
    where: WorkspaceUsageWhereUniqueInput
    update: XOR<WorkspaceUsageUpdateWithoutRegionInput, WorkspaceUsageUncheckedUpdateWithoutRegionInput>
    create: XOR<WorkspaceUsageCreateWithoutRegionInput, WorkspaceUsageUncheckedCreateWithoutRegionInput>
  }

  export type WorkspaceUsageUpdateWithWhereUniqueWithoutRegionInput = {
    where: WorkspaceUsageWhereUniqueInput
    data: XOR<WorkspaceUsageUpdateWithoutRegionInput, WorkspaceUsageUncheckedUpdateWithoutRegionInput>
  }

  export type WorkspaceUsageUpdateManyWithWhereWithoutRegionInput = {
    where: WorkspaceUsageScalarWhereInput
    data: XOR<WorkspaceUsageUpdateManyMutationInput, WorkspaceUsageUncheckedUpdateManyWithoutRegionInput>
  }

  export type WorkspaceUsageScalarWhereInput = {
    AND?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
    OR?: WorkspaceUsageScalarWhereInput[]
    NOT?: WorkspaceUsageScalarWhereInput | WorkspaceUsageScalarWhereInput[]
    id?: UuidFilter<"WorkspaceUsage"> | string
    userUid?: UuidFilter<"WorkspaceUsage"> | string
    workspaceUid?: UuidFilter<"WorkspaceUsage"> | string
    regionUid?: UuidFilter<"WorkspaceUsage"> | string
    seat?: IntFilter<"WorkspaceUsage"> | number
    createdAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceUsage"> | Date | string
  }

  export type OauthProviderCreateWithoutUserInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
  }

  export type OauthProviderUncheckedCreateWithoutUserInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
  }

  export type OauthProviderCreateOrConnectWithoutUserInput = {
    where: OauthProviderWhereUniqueInput
    create: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput>
  }

  export type OauthProviderCreateManyUserInputEnvelope = {
    data: OauthProviderCreateManyUserInput | OauthProviderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTaskCreateWithoutUserInput = {
    id?: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutUserTasksInput
  }

  export type UserTaskUncheckedCreateWithoutUserInput = {
    id?: string
    taskId: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaskCreateOrConnectWithoutUserInput = {
    where: UserTaskWhereUniqueInput
    create: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput>
  }

  export type UserTaskCreateManyUserInputEnvelope = {
    data: UserTaskCreateManyUserInput | UserTaskCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserInfoCreateWithoutUserInput = {
    id?: string
    firstname?: string
    lastname?: string
    signUpRegionUid: string
    isInited?: boolean
    enSubEmail?: boolean
  }

  export type UserInfoUncheckedCreateWithoutUserInput = {
    id?: string
    firstname?: string
    lastname?: string
    signUpRegionUid: string
    isInited?: boolean
    enSubEmail?: boolean
  }

  export type UserInfoCreateOrConnectWithoutUserInput = {
    where: UserInfoWhereUniqueInput
    create: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceUsageCreateWithoutUserInput = {
    id?: string
    workspaceUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
    region: RegionCreateNestedOneWithoutWorkspaceUsageInput
  }

  export type WorkspaceUsageUncheckedCreateWithoutUserInput = {
    id?: string
    workspaceUid: string
    regionUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type WorkspaceUsageCreateOrConnectWithoutUserInput = {
    where: WorkspaceUsageWhereUniqueInput
    create: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceUsageCreateManyUserInputEnvelope = {
    data: WorkspaceUsageCreateManyUserInput | WorkspaceUsageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    plan_name?: string | null
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
    subscriptionPlan: SubscriptionPlanCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    plan_id: string
    plan_name?: string | null
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type OauthProviderUpsertWithWhereUniqueWithoutUserInput = {
    where: OauthProviderWhereUniqueInput
    update: XOR<OauthProviderUpdateWithoutUserInput, OauthProviderUncheckedUpdateWithoutUserInput>
    create: XOR<OauthProviderCreateWithoutUserInput, OauthProviderUncheckedCreateWithoutUserInput>
  }

  export type OauthProviderUpdateWithWhereUniqueWithoutUserInput = {
    where: OauthProviderWhereUniqueInput
    data: XOR<OauthProviderUpdateWithoutUserInput, OauthProviderUncheckedUpdateWithoutUserInput>
  }

  export type OauthProviderUpdateManyWithWhereWithoutUserInput = {
    where: OauthProviderScalarWhereInput
    data: XOR<OauthProviderUpdateManyMutationInput, OauthProviderUncheckedUpdateManyWithoutUserInput>
  }

  export type OauthProviderScalarWhereInput = {
    AND?: OauthProviderScalarWhereInput | OauthProviderScalarWhereInput[]
    OR?: OauthProviderScalarWhereInput[]
    NOT?: OauthProviderScalarWhereInput | OauthProviderScalarWhereInput[]
    uid?: UuidFilter<"OauthProvider"> | string
    userUid?: UuidFilter<"OauthProvider"> | string
    createdAt?: DateTimeFilter<"OauthProvider"> | Date | string
    updatedAt?: DateTimeFilter<"OauthProvider"> | Date | string
    providerType?: EnumProviderTypeFilter<"OauthProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"OauthProvider"> | string
    password?: StringNullableFilter<"OauthProvider"> | string | null
  }

  export type UserTaskUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTaskWhereUniqueInput
    update: XOR<UserTaskUpdateWithoutUserInput, UserTaskUncheckedUpdateWithoutUserInput>
    create: XOR<UserTaskCreateWithoutUserInput, UserTaskUncheckedCreateWithoutUserInput>
  }

  export type UserTaskUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTaskWhereUniqueInput
    data: XOR<UserTaskUpdateWithoutUserInput, UserTaskUncheckedUpdateWithoutUserInput>
  }

  export type UserTaskUpdateManyWithWhereWithoutUserInput = {
    where: UserTaskScalarWhereInput
    data: XOR<UserTaskUpdateManyMutationInput, UserTaskUncheckedUpdateManyWithoutUserInput>
  }

  export type UserTaskScalarWhereInput = {
    AND?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
    OR?: UserTaskScalarWhereInput[]
    NOT?: UserTaskScalarWhereInput | UserTaskScalarWhereInput[]
    id?: UuidFilter<"UserTask"> | string
    userUid?: UuidFilter<"UserTask"> | string
    taskId?: UuidFilter<"UserTask"> | string
    status?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFilter<"UserTask"> | $Enums.TaskStatus
    completedAt?: DateTimeFilter<"UserTask"> | Date | string
    createdAt?: DateTimeFilter<"UserTask"> | Date | string
    updatedAt?: DateTimeFilter<"UserTask"> | Date | string
  }

  export type UserInfoUpsertWithoutUserInput = {
    update: XOR<UserInfoUpdateWithoutUserInput, UserInfoUncheckedUpdateWithoutUserInput>
    create: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    where?: UserInfoWhereInput
  }

  export type UserInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: UserInfoWhereInput
    data: XOR<UserInfoUpdateWithoutUserInput, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type UserInfoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserInfoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    signUpRegionUid?: StringFieldUpdateOperationsInput | string
    isInited?: BoolFieldUpdateOperationsInput | boolean
    enSubEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkspaceUsageUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkspaceUsageWhereUniqueInput
    update: XOR<WorkspaceUsageUpdateWithoutUserInput, WorkspaceUsageUncheckedUpdateWithoutUserInput>
    create: XOR<WorkspaceUsageCreateWithoutUserInput, WorkspaceUsageUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceUsageUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkspaceUsageWhereUniqueInput
    data: XOR<WorkspaceUsageUpdateWithoutUserInput, WorkspaceUsageUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceUsageUpdateManyWithWhereWithoutUserInput = {
    where: WorkspaceUsageScalarWhereInput
    data: XOR<WorkspaceUsageUpdateManyMutationInput, WorkspaceUsageUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionUpsertWithoutUserInput = {
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionPlan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserTaskCreateWithoutTaskInput = {
    id?: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserTasksInput
  }

  export type UserTaskUncheckedCreateWithoutTaskInput = {
    id?: string
    userUid: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaskCreateOrConnectWithoutTaskInput = {
    where: UserTaskWhereUniqueInput
    create: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput>
  }

  export type UserTaskCreateManyTaskInputEnvelope = {
    data: UserTaskCreateManyTaskInput | UserTaskCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type UserTaskUpsertWithWhereUniqueWithoutTaskInput = {
    where: UserTaskWhereUniqueInput
    update: XOR<UserTaskUpdateWithoutTaskInput, UserTaskUncheckedUpdateWithoutTaskInput>
    create: XOR<UserTaskCreateWithoutTaskInput, UserTaskUncheckedCreateWithoutTaskInput>
  }

  export type UserTaskUpdateWithWhereUniqueWithoutTaskInput = {
    where: UserTaskWhereUniqueInput
    data: XOR<UserTaskUpdateWithoutTaskInput, UserTaskUncheckedUpdateWithoutTaskInput>
  }

  export type UserTaskUpdateManyWithWhereWithoutTaskInput = {
    where: UserTaskScalarWhereInput
    data: XOR<UserTaskUpdateManyMutationInput, UserTaskUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutUserTasksInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserTasksInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserTasksInput, UserUncheckedCreateWithoutUserTasksInput>
  }

  export type TaskCreateWithoutUserTasksInput = {
    id?: string
    title: string
    description: string
    reward: bigint | number
    order: number
    isActive?: boolean
    isNewUserTask?: boolean
    taskType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUncheckedCreateWithoutUserTasksInput = {
    id?: string
    title: string
    description: string
    reward: bigint | number
    order: number
    isActive?: boolean
    isNewUserTask?: boolean
    taskType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutUserTasksInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutUserTasksInput, TaskUncheckedCreateWithoutUserTasksInput>
  }

  export type UserUpsertWithoutUserTasksInput = {
    update: XOR<UserUpdateWithoutUserTasksInput, UserUncheckedUpdateWithoutUserTasksInput>
    create: XOR<UserCreateWithoutUserTasksInput, UserUncheckedCreateWithoutUserTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserTasksInput, UserUncheckedUpdateWithoutUserTasksInput>
  }

  export type UserUpdateWithoutUserTasksInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserTasksInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskUpsertWithoutUserTasksInput = {
    update: XOR<TaskUpdateWithoutUserTasksInput, TaskUncheckedUpdateWithoutUserTasksInput>
    create: XOR<TaskCreateWithoutUserTasksInput, TaskUncheckedCreateWithoutUserTasksInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutUserTasksInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutUserTasksInput, TaskUncheckedUpdateWithoutUserTasksInput>
  }

  export type TaskUpdateWithoutUserTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateWithoutUserTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    reward?: BigIntFieldUpdateOperationsInput | bigint | number
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isNewUserTask?: BoolFieldUpdateOperationsInput | boolean
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    description?: string | null
    amount?: bigint | number | null
    gift_amount?: bigint | number | null
    period?: string | null
    upgrade_plan_list?: SubscriptionPlanCreateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanCreatedowngrade_plan_listInput | string[]
    max_seats: bigint | number
    max_workspaces: bigint | number
    max_resources?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    most_popular?: boolean | null
  }

  export type SubscriptionPlanUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    description?: string | null
    amount?: bigint | number | null
    gift_amount?: bigint | number | null
    period?: string | null
    upgrade_plan_list?: SubscriptionPlanCreateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanCreatedowngrade_plan_listInput | string[]
    max_seats: bigint | number
    max_workspaces: bigint | number
    max_resources?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    most_popular?: boolean | null
  }

  export type SubscriptionPlanCreateOrConnectWithoutSubscriptionInput = {
    where: SubscriptionPlanWhereUniqueInput
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserCreateWithoutSubscriptionInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderCreateNestedManyWithoutUserInput
    userTasks?: UserTaskCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedCreateNestedManyWithoutUserInput
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    workspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type SubscriptionPlanUpsertWithoutSubscriptionInput = {
    update: XOR<SubscriptionPlanUpdateWithoutSubscriptionInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionInput>
    where?: SubscriptionPlanWhereInput
  }

  export type SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: SubscriptionPlanWhereInput
    data: XOR<SubscriptionPlanUpdateWithoutSubscriptionInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionInput>
  }

  export type SubscriptionPlanUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SubscriptionPlanUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gift_amount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    upgrade_plan_list?: SubscriptionPlanUpdateupgrade_plan_listInput | string[]
    downgrade_plan_list?: SubscriptionPlanUpdatedowngrade_plan_listInput | string[]
    max_seats?: BigIntFieldUpdateOperationsInput | bigint | number
    max_workspaces?: BigIntFieldUpdateOperationsInput | bigint | number
    max_resources?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    most_popular?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubscriptionCreateWithoutSubscriptionPlanInput = {
    id?: string
    plan_name?: string | null
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
    user: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutSubscriptionPlanInput = {
    id?: string
    plan_name?: string | null
    user_uid: string
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
  }

  export type SubscriptionCreateOrConnectWithoutSubscriptionPlanInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput>
  }

  export type SubscriptionCreateManySubscriptionPlanInputEnvelope = {
    data: SubscriptionCreateManySubscriptionPlanInput | SubscriptionCreateManySubscriptionPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutSubscriptionPlanInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutSubscriptionPlanInput, SubscriptionUncheckedUpdateWithoutSubscriptionPlanInput>
    create: XOR<SubscriptionCreateWithoutSubscriptionPlanInput, SubscriptionUncheckedCreateWithoutSubscriptionPlanInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutSubscriptionPlanInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutSubscriptionPlanInput, SubscriptionUncheckedUpdateWithoutSubscriptionPlanInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutSubscriptionPlanInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutSubscriptionPlanInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: UuidFilter<"Subscription"> | string
    plan_id?: UuidFilter<"Subscription"> | string
    plan_name?: StringNullableFilter<"Subscription"> | string | null
    user_uid?: UuidFilter<"Subscription"> | string
    status?: StringNullableFilter<"Subscription"> | string | null
    start_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    update_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    expire_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    card_id?: UuidNullableFilter<"Subscription"> | string | null
    next_cycle_date?: DateTimeNullableFilter<"Subscription"> | Date | string | null
  }

  export type UserCreateWithoutUserInfoInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderCreateNestedManyWithoutUserInput
    userTasks?: UserTaskCreateNestedManyWithoutUserInput
    workspaceUsage?: WorkspaceUsageCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserInfoInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedCreateNestedManyWithoutUserInput
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutUserInput
    workspaceUsage?: WorkspaceUsageUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
  }

  export type UserUpsertWithoutUserInfoInput = {
    update: XOR<UserUpdateWithoutUserInfoInput, UserUncheckedUpdateWithoutUserInfoInput>
    create: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserInfoInput, UserUncheckedUpdateWithoutUserInfoInput>
  }

  export type UserUpdateWithoutUserInfoInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUpdateManyWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserInfoInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUncheckedUpdateManyWithoutUserNestedInput
    workspaceUsage?: WorkspaceUsageUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type RegionCreateWithoutWorkspaceUsageInput = {
    uid?: string
    displayName: string
    location: string
    domain: string
    description?: string | null
  }

  export type RegionUncheckedCreateWithoutWorkspaceUsageInput = {
    uid?: string
    displayName: string
    location: string
    domain: string
    description?: string | null
  }

  export type RegionCreateOrConnectWithoutWorkspaceUsageInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutWorkspaceUsageInput, RegionUncheckedCreateWithoutWorkspaceUsageInput>
  }

  export type UserCreateWithoutWorkspaceUsageInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderCreateNestedManyWithoutUserInput
    userTasks?: UserTaskCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkspaceUsageInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarUri: string
    nickname: string
    id: string
    name: string
    status?: $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedCreateNestedManyWithoutUserInput
    userTasks?: UserTaskUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkspaceUsageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkspaceUsageInput, UserUncheckedCreateWithoutWorkspaceUsageInput>
  }

  export type RegionUpsertWithoutWorkspaceUsageInput = {
    update: XOR<RegionUpdateWithoutWorkspaceUsageInput, RegionUncheckedUpdateWithoutWorkspaceUsageInput>
    create: XOR<RegionCreateWithoutWorkspaceUsageInput, RegionUncheckedCreateWithoutWorkspaceUsageInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutWorkspaceUsageInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutWorkspaceUsageInput, RegionUncheckedUpdateWithoutWorkspaceUsageInput>
  }

  export type RegionUpdateWithoutWorkspaceUsageInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionUncheckedUpdateWithoutWorkspaceUsageInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutWorkspaceUsageInput = {
    update: XOR<UserUpdateWithoutWorkspaceUsageInput, UserUncheckedUpdateWithoutWorkspaceUsageInput>
    create: XOR<UserCreateWithoutWorkspaceUsageInput, UserUncheckedCreateWithoutWorkspaceUsageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkspaceUsageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkspaceUsageInput, UserUncheckedUpdateWithoutWorkspaceUsageInput>
  }

  export type UserUpdateWithoutWorkspaceUsageInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkspaceUsageInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarUri?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    oauthProvider?: OauthProviderUncheckedUpdateManyWithoutUserNestedInput
    userTasks?: UserTaskUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WorkspaceUsageCreateManyRegionInput = {
    id?: string
    userUid: string
    workspaceUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type WorkspaceUsageUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkspaceUsageNestedInput
  }

  export type WorkspaceUsageUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUsageUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OauthProviderCreateManyUserInput = {
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    providerType: $Enums.ProviderType
    providerId: string
    password?: string | null
  }

  export type UserTaskCreateManyUserInput = {
    id?: string
    taskId: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUsageCreateManyUserInput = {
    id?: string
    workspaceUid: string
    regionUid: string
    seat: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type OauthProviderUpdateWithoutUserInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OauthProviderUncheckedUpdateWithoutUserInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OauthProviderUncheckedUpdateManyWithoutUserInput = {
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerType?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserTaskUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutUserTasksNestedInput
  }

  export type UserTaskUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUsageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkspaceUsageNestedInput
  }

  export type WorkspaceUsageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUsageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceUid?: StringFieldUpdateOperationsInput | string
    regionUid?: StringFieldUpdateOperationsInput | string
    seat?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskCreateManyTaskInput = {
    id?: string
    userUid: string
    status: $Enums.TaskStatus
    rewardStatus: $Enums.TaskStatus
    completedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaskUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserTasksNestedInput
  }

  export type UserTaskUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaskUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    rewardStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManySubscriptionPlanInput = {
    id?: string
    plan_name?: string | null
    user_uid: string
    status?: string | null
    start_at?: Date | string | null
    update_at?: Date | string | null
    expire_at?: Date | string | null
    card_id?: string | null
    next_cycle_date?: Date | string | null
  }

  export type SubscriptionUpdateWithoutSubscriptionPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutSubscriptionPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_uid?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscriptionPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_uid?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    start_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expire_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    next_cycle_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RegionCountOutputTypeDefaultArgs instead
     */
    export type RegionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionPlanCountOutputTypeDefaultArgs instead
     */
    export type SubscriptionPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OauthProviderDefaultArgs instead
     */
    export type OauthProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OauthProviderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionDefaultArgs instead
     */
    export type RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountTransactionDefaultArgs instead
     */
    export type AccountTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ErrorPaymentCreateDefaultArgs instead
     */
    export type ErrorPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ErrorPaymentCreateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InviteRewardDefaultArgs instead
     */
    export type InviteRewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InviteRewardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSemChannelDefaultArgs instead
     */
    export type UserSemChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSemChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserTaskDefaultArgs instead
     */
    export type UserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserTaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardInfoDefaultArgs instead
     */
    export type CardInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreditsDefaultArgs instead
     */
    export type CreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreditsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoicePaymentDefaultArgs instead
     */
    export type InvoicePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoicePaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentOrderDefaultArgs instead
     */
    export type PaymentOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionPlanDefaultArgs instead
     */
    export type SubscriptionPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInfoDefaultArgs instead
     */
    export type UserInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkspaceUsageDefaultArgs instead
     */
    export type WorkspaceUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkspaceUsageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}